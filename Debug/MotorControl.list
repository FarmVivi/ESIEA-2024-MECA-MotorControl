
MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080039c4  080039c4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039c4  080039c4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c8  080039c8  000049c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000068  08003a34  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08003a34  00005404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081c2  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  0000d252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0000f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000793  00000000  00000000  0000fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117fe  00000000  00000000  00010673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a183  00000000  00000000  00021e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000570e2  00000000  00000000  0002bff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000830d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  0008311c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000859cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800391c 	.word	0x0800391c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800391c 	.word	0x0800391c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <LL_ADC_SetCommonClock>:
  *             is set to clock source asynchronous.
  *             (refer to function @ref LL_ADC_SetClock() ).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <LL_ADC_SetCommonClock+0x24>)
 8000230:	401a      	ands	r2, r3
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	46c0      	nop			@ (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffc3ffff 	.word	0xffc3ffff

08000248 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a05      	ldr	r2, [pc, #20]	@ (800026c <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000258:	401a      	ands	r2, r3
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	431a      	orrs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	46c0      	nop			@ (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	fdffffff 	.word	0xfdffffff

08000270 <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a05      	ldr	r2, [pc, #20]	@ (8000294 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000280:	401a      	ands	r2, r3
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	431a      	orrs	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b002      	add	sp, #8
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	fe3fffff 	.word	0xfe3fffff

08000298 <LL_ADC_SetClock>:
  *             cycle).
  *             Refer to reference manual.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	089a      	lsrs	r2, r3, #2
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	431a      	orrs	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	611a      	str	r2, [r3, #16]
}
 80002b2:	46c0      	nop			@ (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b002      	add	sp, #8
 80002b8:	bd80      	pop	{r7, pc}

080002ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
 80002c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	2207      	movs	r2, #7
 80002ca:	4393      	bics	r3, r2
 80002cc:	001a      	movs	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	431a      	orrs	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	615a      	str	r2, [r3, #20]
}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b002      	add	sp, #8
 80002dc:	bd80      	pop	{r7, pc}

080002de <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b082      	sub	sp, #8
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	2204      	movs	r2, #4
 80002ee:	4393      	bics	r3, r2
 80002f0:	001a      	movs	r2, r3
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	431a      	orrs	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}

08000302 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	035b      	lsls	r3, r3, #13
 8000314:	0b5b      	lsrs	r3, r3, #13
 8000316:	431a      	orrs	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b002      	add	sp, #8
 8000322:	bd80      	pop	{r7, pc}

08000324 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	691b      	ldr	r3, [r3, #16]
 8000332:	2201      	movs	r2, #1
 8000334:	4393      	bics	r3, r2
 8000336:	001a      	movs	r2, r3
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	611a      	str	r2, [r3, #16]
}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a05      	ldr	r2, [pc, #20]	@ (800036c <LL_ADC_EnableInternalRegulator+0x24>)
 8000356:	4013      	ands	r3, r2
 8000358:	2280      	movs	r2, #128	@ 0x80
 800035a:	0552      	lsls	r2, r2, #21
 800035c:	431a      	orrs	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000362:	46c0      	nop			@ (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b002      	add	sp, #8
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	6fffffe8 	.word	0x6fffffe8

08000370 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	2204      	movs	r2, #4
 800037e:	4393      	bics	r3, r2
 8000380:	001a      	movs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b002      	add	sp, #8
 800038c:	bd80      	pop	{r7, pc}

0800038e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	2208      	movs	r2, #8
 800039c:	4393      	bics	r3, r2
 800039e:	001a      	movs	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	605a      	str	r2, [r3, #4]
}
 80003a4:	46c0      	nop			@ (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b002      	add	sp, #8
 80003aa:	bd80      	pop	{r7, pc}

080003ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80003b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003c0:	4b04      	ldr	r3, [pc, #16]	@ (80003d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80003c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4013      	ands	r3, r2
 80003c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ca:	68fb      	ldr	r3, [r7, #12]
}
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b004      	add	sp, #16
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80003e0:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <LL_IOP_GRP1_EnableClock+0x28>)
 80003e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <LL_IOP_GRP1_EnableClock+0x28>)
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80003ec:	4b04      	ldr	r3, [pc, #16]	@ (8000400 <LL_IOP_GRP1_EnableClock+0x28>)
 80003ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	4013      	ands	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f6:	68fb      	ldr	r3, [r7, #12]
}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b004      	add	sp, #16
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000

08000404 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b090      	sub	sp, #64	@ 0x40
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800040a:	2428      	movs	r4, #40	@ 0x28
 800040c:	193b      	adds	r3, r7, r4
 800040e:	0018      	movs	r0, r3
 8000410:	2314      	movs	r3, #20
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f002 fff7 	bl	8003408 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800041a:	2518      	movs	r5, #24
 800041c:	197b      	adds	r3, r7, r5
 800041e:	0018      	movs	r0, r3
 8000420:	2310      	movs	r3, #16
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 ffef 	bl	8003408 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	2318      	movs	r3, #24
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f002 ffe8 	bl	8003408 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	0018      	movs	r0, r3
 800043e:	f7ff ffb5 	bl	80003ac <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff ffc8 	bl	80003d8 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = Vpot_Pin;
 8000448:	003b      	movs	r3, r7
 800044a:	2202      	movs	r2, #2
 800044c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800044e:	003b      	movs	r3, r7
 8000450:	2203      	movs	r2, #3
 8000452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Vpot_GPIO_Port, &GPIO_InitStruct);
 800045a:	003a      	movs	r2, r7
 800045c:	23a0      	movs	r3, #160	@ 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	0011      	movs	r1, r2
 8000462:	0018      	movs	r0, r3
 8000464:	f002 f872 	bl	800254c <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000468:	4a41      	ldr	r2, [pc, #260]	@ (8000570 <MX_ADC_Init+0x16c>)
 800046a:	4b42      	ldr	r3, [pc, #264]	@ (8000574 <MX_ADC_Init+0x170>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f7ff ff47 	bl	8000302 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8000474:	4a40      	ldr	r2, [pc, #256]	@ (8000578 <MX_ADC_Init+0x174>)
 8000476:	4b3f      	ldr	r3, [pc, #252]	@ (8000574 <MX_ADC_Init+0x170>)
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f7ff ff41 	bl	8000302 <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000480:	2380      	movs	r3, #128	@ 0x80
 8000482:	03db      	lsls	r3, r3, #15
 8000484:	4a3d      	ldr	r2, [pc, #244]	@ (800057c <MX_ADC_Init+0x178>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f7ff fef1 	bl	8000270 <LL_ADC_SetCommonPathInternalCh>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800048e:	0021      	movs	r1, r4
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	4a30      	ldr	r2, [pc, #192]	@ (8000574 <MX_ADC_Init+0x170>)
 80004b2:	0019      	movs	r1, r3
 80004b4:	0010      	movs	r0, r2
 80004b6:	f001 fe4f 	bl	8002158 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_39CYCLES_5);
 80004ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000574 <MX_ADC_Init+0x170>)
 80004bc:	2105      	movs	r1, #5
 80004be:	0018      	movs	r0, r3
 80004c0:	f7ff fefb 	bl	80002ba <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80004c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <MX_ADC_Init+0x170>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f7ff ff2b 	bl	8000324 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80004ce:	4b29      	ldr	r3, [pc, #164]	@ (8000574 <MX_ADC_Init+0x170>)
 80004d0:	2100      	movs	r1, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f7ff ff03 	bl	80002de <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 80004d8:	2380      	movs	r3, #128	@ 0x80
 80004da:	049b      	lsls	r3, r3, #18
 80004dc:	4a27      	ldr	r2, [pc, #156]	@ (800057c <MX_ADC_Init+0x178>)
 80004de:	0019      	movs	r1, r3
 80004e0:	0010      	movs	r0, r2
 80004e2:	f7ff feb1 	bl	8000248 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 80004e6:	4b23      	ldr	r3, [pc, #140]	@ (8000574 <MX_ADC_Init+0x170>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ff41 	bl	8000370 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80004ee:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <MX_ADC_Init+0x170>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ff4c 	bl	800038e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80004fc:	197b      	adds	r3, r7, r5
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000508:	197b      	adds	r3, r7, r5
 800050a:	4a1a      	ldr	r2, [pc, #104]	@ (8000574 <MX_ADC_Init+0x170>)
 800050c:	0019      	movs	r1, r3
 800050e:	0010      	movs	r0, r2
 8000510:	f001 fdec 	bl	80020ec <LL_ADC_Init>
  LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_ASYNC);
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <MX_ADC_Init+0x170>)
 8000516:	2100      	movs	r1, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f7ff febd 	bl	8000298 <LL_ADC_SetClock>
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_ASYNC_DIV16);
 800051e:	23e0      	movs	r3, #224	@ 0xe0
 8000520:	035b      	lsls	r3, r3, #13
 8000522:	4a16      	ldr	r2, [pc, #88]	@ (800057c <MX_ADC_Init+0x178>)
 8000524:	0019      	movs	r1, r3
 8000526:	0010      	movs	r0, r2
 8000528:	f7ff fe7a 	bl	8000220 <LL_ADC_SetCommonClock>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_ADC_Init+0x170>)
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff0a 	bl	8000348 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <MX_ADC_Init+0x17c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4912      	ldr	r1, [pc, #72]	@ (8000584 <MX_ADC_Init+0x180>)
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff fde4 	bl	8000108 <__udivsi3>
 8000540:	0003      	movs	r3, r0
 8000542:	001a      	movs	r2, r3
 8000544:	0013      	movs	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	189b      	adds	r3, r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	210a      	movs	r1, #10
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fdda 	bl	8000108 <__udivsi3>
 8000554:	0003      	movs	r3, r0
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 8000558:	e002      	b.n	8000560 <MX_ADC_Init+0x15c>
  {
    wait_loop_index--;
 800055a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800055c:	3b01      	subs	r3, #1
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 8000560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1f9      	bne.n	800055a <MX_ADC_Init+0x156>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b010      	add	sp, #64	@ 0x40
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	04000002 	.word	0x04000002
 8000574:	40012400 	.word	0x40012400
 8000578:	c4020000 	.word	0xc4020000
 800057c:	40012708 	.word	0x40012708
 8000580:	20000008 	.word	0x20000008
 8000584:	00030d40 	.word	0x00030d40

08000588 <LL_IOP_GRP1_EnableClock>:
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000592:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	430a      	orrs	r2, r1
 800059a:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4013      	ands	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b004      	add	sp, #16
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80005be:	4a0f      	ldr	r2, [pc, #60]	@ (80005fc <LL_SYSCFG_SetEXTISource+0x48>)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	21ff      	movs	r1, #255	@ 0xff
 80005c4:	400b      	ands	r3, r1
 80005c6:	3302      	adds	r3, #2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	589b      	ldr	r3, [r3, r2]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	0c12      	lsrs	r2, r2, #16
 80005d0:	210f      	movs	r1, #15
 80005d2:	4091      	lsls	r1, r2
 80005d4:	000a      	movs	r2, r1
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	0011      	movs	r1, r2
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	0c1b      	lsrs	r3, r3, #16
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	409a      	lsls	r2, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <LL_SYSCFG_SetEXTISource+0x48>)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	24ff      	movs	r4, #255	@ 0xff
 80005ea:	4023      	ands	r3, r4
 80005ec:	430a      	orrs	r2, r1
 80005ee:	3302      	adds	r3, #2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	501a      	str	r2, [r3, r0]
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b003      	add	sp, #12
 80005fa:	bd90      	pop	{r4, r7, pc}
 80005fc:	40010000 	.word	0x40010000

08000600 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6819      	ldr	r1, [r3, #0]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	435b      	muls	r3, r3
 8000614:	001a      	movs	r2, r3
 8000616:	0013      	movs	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	189b      	adds	r3, r3, r2
 800061c:	43db      	mvns	r3, r3
 800061e:	400b      	ands	r3, r1
 8000620:	001a      	movs	r2, r3
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	435b      	muls	r3, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	434b      	muls	r3, r1
 800062a:	431a      	orrs	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}

08000638 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	68d9      	ldr	r1, [r3, #12]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	435b      	muls	r3, r3
 800064c:	001a      	movs	r2, r3
 800064e:	0013      	movs	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	189b      	adds	r3, r3, r2
 8000654:	43db      	mvns	r3, r3
 8000656:	400b      	ands	r3, r1
 8000658:	001a      	movs	r2, r3
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	435b      	muls	r3, r3
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	434b      	muls	r3, r1
 8000662:	431a      	orrs	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	60da      	str	r2, [r3, #12]
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b004      	add	sp, #16
 800066e:	bd80      	pop	{r7, pc}

08000670 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b089      	sub	sp, #36	@ 0x24
 800068c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800068e:	2418      	movs	r4, #24
 8000690:	193b      	adds	r3, r7, r4
 8000692:	0018      	movs	r0, r3
 8000694:	2308      	movs	r3, #8
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f002 feb5 	bl	8003408 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	003b      	movs	r3, r7
 80006a0:	0018      	movs	r0, r3
 80006a2:	2318      	movs	r3, #24
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 feae 	bl	8003408 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80006ac:	2004      	movs	r0, #4
 80006ae:	f7ff ff6b 	bl	8000588 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 80006b2:	2080      	movs	r0, #128	@ 0x80
 80006b4:	f7ff ff68 	bl	8000588 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff65 	bl	8000588 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80006be:	2002      	movs	r0, #2
 80006c0:	f7ff ff62 	bl	8000588 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80006c4:	23a0      	movs	r3, #160	@ 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2120      	movs	r1, #32
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff ffd0 	bl	8000670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_GPIO_Init+0xc8>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	2002      	movs	r0, #2
 80006d6:	f7ff ff6d 	bl	80005b4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	481d      	ldr	r0, [pc, #116]	@ (8000754 <MX_GPIO_Init+0xcc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	0019      	movs	r1, r3
 80006e4:	f7ff ffa8 	bl	8000638 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	019b      	lsls	r3, r3, #6
 80006ec:	4819      	ldr	r0, [pc, #100]	@ (8000754 <MX_GPIO_Init+0xcc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0019      	movs	r1, r3
 80006f2:	f7ff ff85 	bl	8000600 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	0192      	lsls	r2, r2, #6
 80006fe:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2202      	movs	r2, #2
 8000710:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000712:	187b      	adds	r3, r7, r1
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fdd9 	bl	80022cc <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800071a:	003b      	movs	r3, r7
 800071c:	2220      	movs	r2, #32
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000720:	003b      	movs	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000738:	003a      	movs	r2, r7
 800073a:	23a0      	movs	r3, #160	@ 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f001 ff03 	bl	800254c <LL_GPIO_Init>

}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b009      	add	sp, #36	@ 0x24
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	00040003 	.word	0x00040003
 8000754:	50000800 	.word	0x50000800

08000758 <LL_ADC_Enable>:
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <LL_ADC_Enable+0x20>)
 8000766:	4013      	ands	r3, r2
 8000768:	2201      	movs	r2, #1
 800076a:	431a      	orrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	609a      	str	r2, [r3, #8]
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}
 8000778:	7fffffe8 	.word	0x7fffffe8

0800077c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <LL_RCC_HSE_EnableBypass+0x18>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <LL_RCC_HSE_EnableBypass+0x18>)
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	02c9      	lsls	r1, r1, #11
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000

08000798 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800079c:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <LL_RCC_HSE_Enable+0x18>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b03      	ldr	r3, [pc, #12]	@ (80007b0 <LL_RCC_HSE_Enable+0x18>)
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	0249      	lsls	r1, r1, #9
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <LL_RCC_HSE_IsReady+0x24>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	029b      	lsls	r3, r3, #10
 80007c0:	401a      	ands	r2, r3
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	029b      	lsls	r3, r3, #10
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d101      	bne.n	80007ce <LL_RCC_HSE_IsReady+0x1a>
 80007ca:	2301      	movs	r3, #1
 80007cc:	e000      	b.n	80007d0 <LL_RCC_HSE_IsReady+0x1c>
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000

080007dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <LL_RCC_HSI_Enable+0x18>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <LL_RCC_HSI_Enable+0x18>)
 80007e6:	2101      	movs	r1, #1
 80007e8:	430a      	orrs	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <LL_RCC_HSI_IsReady+0x1c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2204      	movs	r2, #4
 8000802:	4013      	ands	r3, r2
 8000804:	2b04      	cmp	r3, #4
 8000806:	d101      	bne.n	800080c <LL_RCC_HSI_IsReady+0x14>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <LL_RCC_HSI_IsReady+0x16>
 800080c:	2300      	movs	r3, #0
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000826:	4013      	ands	r3, r2
 8000828:	0019      	movs	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	021a      	lsls	r2, r3, #8
 800082e:	4b03      	ldr	r3, [pc, #12]	@ (800083c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000830:	430a      	orrs	r2, r1
 8000832:	605a      	str	r2, [r3, #4]
}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	ffffe0ff 	.word	0xffffe0ff

08000844 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <LL_RCC_SetSysClkSource+0x24>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	2203      	movs	r2, #3
 8000852:	4393      	bics	r3, r2
 8000854:	0019      	movs	r1, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <LL_RCC_SetSysClkSource+0x24>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	430a      	orrs	r2, r1
 800085c:	60da      	str	r2, [r3, #12]
}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <LL_RCC_GetSysClkSource+0x14>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	220c      	movs	r2, #12
 8000876:	4013      	ands	r3, r2
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	40021000 	.word	0x40021000

08000884 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	22f0      	movs	r2, #240	@ 0xf0
 8000892:	4393      	bics	r3, r2
 8000894:	0019      	movs	r1, r3
 8000896:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	430a      	orrs	r2, r1
 800089c:	60da      	str	r2, [r3, #12]
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <LL_RCC_SetAPB1Prescaler+0x28>)
 80008ba:	4013      	ands	r3, r2
 80008bc:	0019      	movs	r1, r3
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	60da      	str	r2, [r3, #12]
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	40021000 	.word	0x40021000
 80008d4:	fffff8ff 	.word	0xfffff8ff

080008d8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <LL_RCC_SetAPB2Prescaler+0x24>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <LL_RCC_SetAPB2Prescaler+0x28>)
 80008e6:	4013      	ands	r3, r2
 80008e8:	0019      	movs	r1, r3
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <LL_RCC_SetAPB2Prescaler+0x24>)
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	60da      	str	r2, [r3, #12]
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000
 8000900:	ffffc7ff 	.word	0xffffc7ff

08000904 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <LL_RCC_SetUSARTClockSource+0x2c>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	0c12      	lsrs	r2, r2, #16
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	0011      	movs	r1, r2
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	041b      	lsls	r3, r3, #16
 800091e:	0c1a      	lsrs	r2, r3, #16
 8000920:	4b03      	ldr	r3, [pc, #12]	@ (8000930 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000922:	430a      	orrs	r2, r1
 8000924:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	40021000 	.word	0x40021000

08000934 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <LL_RCC_PLL_Enable+0x18>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <LL_RCC_PLL_Enable+0x18>)
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	0449      	lsls	r1, r1, #17
 8000942:	430a      	orrs	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <LL_RCC_PLL_IsReady+0x24>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	049b      	lsls	r3, r3, #18
 800095c:	401a      	ands	r2, r3
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	049b      	lsls	r3, r3, #18
 8000962:	429a      	cmp	r2, r3
 8000964:	d101      	bne.n	800096a <LL_RCC_PLL_IsReady+0x1a>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <LL_RCC_PLL_IsReady+0x1c>
 800096a:	2300      	movs	r3, #0
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	40021000 	.word	0x40021000

08000978 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 800098a:	4013      	ands	r3, r2
 800098c:	0019      	movs	r1, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	431a      	orrs	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	431a      	orrs	r2, r3
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 800099a:	430a      	orrs	r2, r1
 800099c:	60da      	str	r2, [r3, #12]
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000
 80009ac:	ff02ffff 	.word	0xff02ffff

080009b0 <LL_APB1_GRP1_EnableClock>:
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80009ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009c4:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80009c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000

080009dc <LL_APB2_GRP1_EnableClock>:
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <LL_APB2_GRP1_EnableClock+0x28>)
 80009e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <LL_APB2_GRP1_EnableClock+0x28>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <LL_APB2_GRP1_EnableClock+0x28>)
 80009f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b004      	add	sp, #16
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <LL_FLASH_SetLatency+0x24>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2201      	movs	r2, #1
 8000a16:	4393      	bics	r3, r2
 8000a18:	0019      	movs	r1, r3
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <LL_FLASH_SetLatency+0x24>)
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <LL_FLASH_GetLatency+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4013      	ands	r3, r2
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	40022000 	.word	0x40022000

08000a48 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <LL_SYSTICK_EnableIT+0x18>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <LL_SYSTICK_EnableIT+0x18>)
 8000a52:	2102      	movs	r1, #2
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	0019      	movs	r1, r3
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	40007000 	.word	0x40007000
 8000a8c:	ffffe7ff 	.word	0xffffe7ff

08000a90 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a1a      	ldr	r2, [r3, #32]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	621a      	str	r2, [r3, #32]
}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}

08000afa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b02:	f3ef 8310 	mrs	r3, PRIMASK
 8000b06:	60bb      	str	r3, [r7, #8]
  return(result);
 8000b08:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f383 8810 	msr	PRIMASK, r3
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	f383 8810 	msr	PRIMASK, r3
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b006      	add	sp, #24
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  long nextTimeMs = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff ff4a 	bl	80009dc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	055b      	lsls	r3, r3, #21
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff ff2f 	bl	80009b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f847 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f7ff fd97 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b5a:	f001 fa0f 	bl	8001f7c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000b5e:	f7ff fc51 	bl	8000404 <MX_ADC_Init>
  MX_TIM22_Init();
 8000b62:	f001 f887 	bl	8001c74 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  rxFifoInit();
 8000b66:	f000 fedf 	bl	8001928 <rxFifoInit>
  RetargetInit(USART2);
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <main+0x9c>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 fd97 	bl	80016a0 <RetargetInit>
  getchInit();
 8000b72:	f000 ff41 	bl	80019f8 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <main+0x9c>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ffbe 	bl	8000afa <LL_USART_EnableIT_RXNE>
  LL_ADC_Enable(ADC1);
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <main+0xa0>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fde9 	bl	8000758 <LL_ADC_Enable>
//Configuration : 32kHz
// Compteur ==> 0 à 1000
  LL_TIM_OC_SetCompareCH1(TIM22, 0);
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <main+0xa4>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff9d 	bl	8000aca <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM22, 0);
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <main+0xa4>)
 8000b92:	2100      	movs	r1, #0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ffa4 	bl	8000ae2 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_CC_EnableChannel(TIM22, LL_TIM_CHANNEL_CH1); /* Enable output on channel 1*/
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <main+0xa4>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff84 	bl	8000aac <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM22, LL_TIM_CHANNEL_CH2); /* Enable output on channel 2*/
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <main+0xa4>)
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff ff7f 	bl	8000aac <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM22);
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <main+0xa4>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff6d 	bl	8000a90 <LL_TIM_EnableCounter>

  LL_SYSTICK_EnableIT();
 8000bb6:	f7ff ff47 	bl	8000a48 <LL_SYSTICK_EnableIT>
  while (1)
  {
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!! NOT TO BE DELETED   !!!!!!!!!!!!!!!!!
//!!*///Protocol management	//!!!!!!!!!!!!!!!!
    protocolMain();
 8000bba:	f000 fa6b 	bl	8001094 <protocolMain>
// !!!!!!!!!! NOT TO BE DELETED (END) !!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    // Application main
    //Every 10 ms
    if (nextTimeMs <= timeMs)
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <main+0xa8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dcf8      	bgt.n	8000bba <main+0x82>
    {
      nextTimeMs += 10;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	330a      	adds	r3, #10
 8000bcc:	607b      	str	r3, [r7, #4]
      mainApp10ms();
 8000bce:	f000 f8fd 	bl	8000dcc <mainApp10ms>
    protocolMain();
 8000bd2:	e7f2      	b.n	8000bba <main+0x82>
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	40011400 	.word	0x40011400
 8000be0:	20000284 	.word	0x20000284

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff ff0d 	bl	8000a08 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	f7ff ff1e 	bl	8000a30 <LL_FLASH_GetLatency>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d1fa      	bne.n	8000bf0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff ff30 	bl	8000a64 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 8000c04:	f7ff fdba 	bl	800077c <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000c08:	f7ff fdc6 	bl	8000798 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	f7ff fdd1 	bl	80007b4 <LL_RCC_HSE_IsReady>
 8000c12:	0003      	movs	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d1fa      	bne.n	8000c0e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_HSI_Enable();
 8000c18:	f7ff fde0 	bl	80007dc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	f7ff fdeb 	bl	80007f8 <LL_RCC_HSI_IsReady>
 8000c22:	0003      	movs	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1fa      	bne.n	8000c1e <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c28:	2010      	movs	r0, #16
 8000c2a:	f7ff fdf5 	bl	8000818 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLL_MUL_8, LL_RCC_PLL_DIV_2);
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	03da      	lsls	r2, r3, #15
 8000c32:	23c0      	movs	r3, #192	@ 0xc0
 8000c34:	0319      	lsls	r1, r3, #12
 8000c36:	2380      	movs	r3, #128	@ 0x80
 8000c38:	025b      	lsls	r3, r3, #9
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fe9c 	bl	8000978 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c40:	f7ff fe78 	bl	8000934 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	f7ff fe83 	bl	8000950 <LL_RCC_PLL_IsReady>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d1fa      	bne.n	8000c46 <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fe17 	bl	8000884 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fe28 	bl	80008ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fe3b 	bl	80008d8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f7ff fdee 	bl	8000844 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	f7ff fdff 	bl	800086c <LL_RCC_GetSysClkSource>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d1fa      	bne.n	8000c6a <SystemClock_Config+0x86>
  {

  }

  LL_Init1msTick(32000000);
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <SystemClock_Config+0xb0>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 f9e2 	bl	8003040 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SystemClock_Config+0xb0>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 f9ee 	bl	8003060 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000c84:	23c0      	movs	r3, #192	@ 0xc0
 8000c86:	031b      	lsls	r3, r3, #12
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fe3b 	bl	8000904 <LL_RCC_SetUSARTClockSource>
}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	01e84800 	.word	0x01e84800

08000c98 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4013      	ands	r3, r2
 8000cae:	041a      	lsls	r2, r3, #16
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	619a      	str	r2, [r3, #24]
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <controlLoop>:

//============================================================
//            PID controller
//============================================================
int controlLoop(int p_refValueIn,int p_motorOut)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]

  l_epsilon = (p_refValueIn - p_motorOut);
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <controlLoop+0x34>)
 8000cda:	601a      	str	r2, [r3, #0]
  l_motor = l_epsilon * Ad ;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <controlLoop+0x38>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <controlLoop+0x34>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	435a      	muls	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <controlLoop+0x3c>)
 8000cec:	601a      	str	r2, [r3, #0]



  return l_motor;
 8000cee:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <controlLoop+0x3c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	20000224 	.word	0x20000224
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000220 	.word	0x20000220

08000d08 <onNewFrameCommand>:



//On new data frame
void onNewFrameCommand(uint8_t p_frameCode)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <onNewFrameByte>:
void onNewFrameByte(uint8_t p_frameCode, int8_t *p_byte, int p_dataCount)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	1c02      	adds	r2, r0, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <onNewFrameShort>:
void onNewFrameShort(uint8_t p_frameCode, int16_t *p_short, int p_dataCount)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	210f      	movs	r1, #15
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	1c02      	adds	r2, r0, #0
 8000d48:	701a      	strb	r2, [r3, #0]
  switch (p_frameCode)
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b41      	cmp	r3, #65	@ 0x41
 8000d50:	d002      	beq.n	8000d58 <onNewFrameShort+0x20>
 8000d52:	2b50      	cmp	r3, #80	@ 0x50
 8000d54:	d00c      	beq.n	8000d70 <onNewFrameShort+0x38>
      break;
    case 'P':
      Ad = p_short[0];
      break;
  }
}
 8000d56:	e012      	b.n	8000d7e <onNewFrameShort+0x46>
      g_startStep = 1;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <onNewFrameShort+0x50>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
      g_motorStep = p_short[0];
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2200      	movs	r2, #0
 8000d62:	5e9a      	ldrsh	r2, [r3, r2]
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <onNewFrameShort+0x54>)
 8000d66:	801a      	strh	r2, [r3, #0]
      g_data1Cnt = 0;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <onNewFrameShort+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]
      break;
 8000d6e:	e006      	b.n	8000d7e <onNewFrameShort+0x46>
      Ad = p_short[0];
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2200      	movs	r2, #0
 8000d74:	5e9b      	ldrsh	r3, [r3, r2]
 8000d76:	b25a      	sxtb	r2, r3
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <onNewFrameShort+0x5c>)
 8000d7a:	701a      	strb	r2, [r3, #0]
      break;
 8000d7c:	46c0      	nop			@ (mov r8, r8)
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	20000086 	.word	0x20000086
 8000d90:	20000088 	.word	0x20000088
 8000d94:	20000000 	.word	0x20000000

08000d98 <onNewFrameInt>:
void onNewFrameInt(uint8_t p_frameCode, int32_t *p_int, int p_dataCount)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	230f      	movs	r3, #15
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	1c02      	adds	r2, r0, #0
 8000da8:	701a      	strb	r2, [r3, #0]
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <onNewFrameFloat>:
void onNewFrameFloat(uint8_t p_frameCodet, float *p_float, int p_dataCount)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	1c02      	adds	r2, r0, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <mainApp10ms>:

//called once every 10 ms
void mainApp10ms(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  static int l_refValue = 2048;
  static int l_stepDelay=0;
  int l_motor = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  int l_adcValue;

  //Auto step
  l_stepDelay++;
 8000dd6:	4b40      	ldr	r3, [pc, #256]	@ (8000ed8 <mainApp10ms+0x10c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <mainApp10ms+0x10c>)
 8000dde:	601a      	str	r2, [r3, #0]
  if (l_stepDelay==400) //every 4s
 8000de0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <mainApp10ms+0x10c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	23c8      	movs	r3, #200	@ 0xc8
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d117      	bne.n	8000e1c <mainApp10ms+0x50>
  {
    l_stepDelay=0;
 8000dec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <mainApp10ms+0x10c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
    if (g_motorStep==1048)
 8000df2:	4b3a      	ldr	r3, [pc, #232]	@ (8000edc <mainApp10ms+0x110>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	5e9a      	ldrsh	r2, [r3, r2]
 8000df8:	2383      	movs	r3, #131	@ 0x83
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d106      	bne.n	8000e0e <mainApp10ms+0x42>
    {
      g_startStep = 1;
 8000e00:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
      g_motorStep=3048;
 8000e06:	4b35      	ldr	r3, [pc, #212]	@ (8000edc <mainApp10ms+0x110>)
 8000e08:	4a36      	ldr	r2, [pc, #216]	@ (8000ee4 <mainApp10ms+0x118>)
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	e006      	b.n	8000e1c <mainApp10ms+0x50>
    }
    else
    {
      g_startStep = 1;
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
      g_motorStep=1048;
 8000e14:	4b31      	ldr	r3, [pc, #196]	@ (8000edc <mainApp10ms+0x110>)
 8000e16:	2283      	movs	r2, #131	@ 0x83
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	801a      	strh	r2, [r3, #0]
    }
  }


  //Toggle LED state (PA5)
  LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e1c:	23a0      	movs	r3, #160	@ 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	2120      	movs	r1, #32
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff ff38 	bl	8000c98 <LL_GPIO_TogglePin>

  //Read potentiometer value (0-4095)
  //(1 LSB=3.3V/4096)
  l_adcValue = readADC();
 8000e28:	f000 f8b8 	bl	8000f9c <readADC>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	603b      	str	r3, [r7, #0]

  //l_motor step
  if (g_startStep == 1)
 8000e30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d111      	bne.n	8000e5e <mainApp10ms+0x92>
  {
    l_refValue = g_motorStep;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	@ (8000edc <mainApp10ms+0x110>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	5e9b      	ldrsh	r3, [r3, r2]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <mainApp10ms+0x11c>)
 8000e44:	601a      	str	r2, [r3, #0]
    g_data1Cnt = 0;
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <mainApp10ms+0x120>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
    g_startStep++;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e5c:	701a      	strb	r2, [r3, #0]
  }
  if (g_startStep == 2)
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d125      	bne.n	8000eb4 <mainApp10ms+0xe8>
  {
    g_data1[g_data1Cnt] = l_adcValue;
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <mainApp10ms+0x120>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	5e9b      	ldrsh	r3, [r3, r2]
 8000e6e:	001a      	movs	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b219      	sxth	r1, r3
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <mainApp10ms+0x124>)
 8000e76:	0052      	lsls	r2, r2, #1
 8000e78:	52d1      	strh	r1, [r2, r3]
    g_data1Cnt++;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <mainApp10ms+0x120>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	5e9b      	ldrsh	r3, [r3, r2]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <mainApp10ms+0x120>)
 8000e8a:	801a      	strh	r2, [r3, #0]
    if (g_data1Cnt >= MAX_DATA1)
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <mainApp10ms+0x120>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	5e9b      	ldrsh	r3, [r3, r2]
 8000e92:	2bc7      	cmp	r3, #199	@ 0xc7
 8000e94:	dd0e      	ble.n	8000eb4 <mainApp10ms+0xe8>
    {
      g_startStep = 0;
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <mainApp10ms+0x114>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
      writeFrameShort('A', g_data1, g_data1Cnt);
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <mainApp10ms+0x120>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	5e9b      	ldrsh	r3, [r3, r2]
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <mainApp10ms+0x124>)
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	2041      	movs	r0, #65	@ 0x41
 8000eaa:	f000 f9da 	bl	8001262 <writeFrameShort>
      g_startStep = 0;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <mainApp10ms+0x114>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
    }

  }

  //Calculate new l_motor voltage
  l_motor=controlLoop(l_refValue,l_adcValue);
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <mainApp10ms+0x11c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ff03 	bl	8000cc8 <controlLoop>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	607b      	str	r3, [r7, #4]
    //set motor voltage
  setMotor(l_motor);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 f88c 	bl	8000fe8 <setMotor>
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000228 	.word	0x20000228
 8000edc:	20000086 	.word	0x20000086
 8000ee0:	20000084 	.word	0x20000084
 8000ee4:	00000be8 	.word	0x00000be8
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	20000088 	.word	0x20000088
 8000ef0:	2000008c 	.word	0x2000008c

08000ef4 <LL_ADC_REG_SetSequencerChannels>:
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	035b      	lsls	r3, r3, #13
 8000f02:	0b5a      	lsrs	r2, r3, #13
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LL_ADC_REG_StartConversion>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <LL_ADC_REG_StartConversion+0x20>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2204      	movs	r2, #4
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	7fffffe8 	.word	0x7fffffe8

08000f34 <LL_ADC_REG_ReadConversionData12>:
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	b29b      	uxth	r3, r3
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LL_ADC_IsActiveFlag_EOC>:
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2204      	movs	r2, #4
 8000f58:	4013      	ands	r3, r2
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	425a      	negs	r2, r3
 8000f5e:	4153      	adcs	r3, r2
 8000f60:	b2db      	uxtb	r3, r3
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LL_TIM_OC_SetCompareCH1>:
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LL_TIM_OC_SetCompareCH2>:
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <readADC>:
//#define DISPLAY_V_ADC //Print ADC voltage on serial port
//#define DISPLAY_V_MOTOR //Print motor voltage on serial port

//Return ADC converter value (0-4095) (1 LSB=3.3V/4096)
uint16_t readADC(void)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  uint16_t l_value;
  LL_ADC_REG_SetSequencerChannels(ADC1,LL_ADC_CHANNEL_1);
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <readADC+0x44>)
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <readADC+0x48>)
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ffa3 	bl	8000ef4 <LL_ADC_REG_SetSequencerChannels>
  LL_ADC_REG_StartConversion(ADC1);
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <readADC+0x48>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff ffad 	bl	8000f10 <LL_ADC_REG_StartConversion>
  while (LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <readADC+0x48>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff ffc5 	bl	8000f4a <LL_ADC_IsActiveFlag_EOC>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <readADC+0x1c>
  l_value=LL_ADC_REG_ReadConversionData12(ADC1);
 8000fc4:	1dbc      	adds	r4, r7, #6
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <readADC+0x48>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff ffb3 	bl	8000f34 <LL_ADC_REG_ReadConversionData12>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	8023      	strh	r3, [r4, #0]
    IntPartADC=((long)adcValue*33)/40960;
    RemainPartADC=(((((long)adcValue*330))%409600)*10)/4096;
    printf("Vpot=%d.%3.3d\r\n",IntPartADC,RemainPartADC );
  }
#endif //DISPLAY_V_ADC
  return l_value;
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	881b      	ldrh	r3, [r3, #0]
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b003      	add	sp, #12
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	04000002 	.word	0x04000002
 8000fe4:	40012400 	.word	0x40012400

08000fe8 <setMotor>:


//Set motor voltage ratio (-MAX_MOTOR to +MAX_MOTOR)
void setMotor(int16_t p_value)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	1dbb      	adds	r3, r7, #6
 8000ff2:	801a      	strh	r2, [r3, #0]
  if (p_value>=MAX_MOTOR)
 8000ff4:	1dbb      	adds	r3, r7, #6
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	5e9a      	ldrsh	r2, [r3, r2]
 8000ffa:	23fa      	movs	r3, #250	@ 0xfa
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	429a      	cmp	r2, r3
 8001000:	db03      	blt.n	800100a <setMotor+0x22>
	p_value=MAX_MOTOR;
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	22fa      	movs	r2, #250	@ 0xfa
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	801a      	strh	r2, [r3, #0]
  if (p_value<=-MAX_MOTOR)
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	2200      	movs	r2, #0
 800100e:	5e9b      	ldrsh	r3, [r3, r2]
 8001010:	4a1d      	ldr	r2, [pc, #116]	@ (8001088 <setMotor+0xa0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	da02      	bge.n	800101c <setMotor+0x34>
	p_value=-(MAX_MOTOR);
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	4a1c      	ldr	r2, [pc, #112]	@ (800108c <setMotor+0xa4>)
 800101a:	801a      	strh	r2, [r3, #0]
  if (p_value==0)
 800101c:	1dbb      	adds	r3, r7, #6
 800101e:	2200      	movs	r2, #0
 8001020:	5e9b      	ldrsh	r3, [r3, r2]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10a      	bne.n	800103c <setMotor+0x54>
  {
    LL_TIM_OC_SetCompareCH1(TIM22,0);
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <setMotor+0xa8>)
 8001028:	2100      	movs	r1, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff9d 	bl	8000f6a <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM22,0);
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <setMotor+0xa8>)
 8001032:	2100      	movs	r1, #0
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ffa4 	bl	8000f82 <LL_TIM_OC_SetCompareCH2>
    RemainPartADC=((((long)p_value*1200))%(MAX_MOTOR*100)*10)/MAX_MOTOR;
    if (RemainPartADC<0) RemainPartADC=-RemainPartADC;
    printf("Vmotor=%d.%3.3d\r",IntPartADC,RemainPartADC );
  }
#endif //DISPLAY_V_MOTOR
}
 800103a:	e021      	b.n	8001080 <setMotor+0x98>
  else if (p_value>0) //>0
 800103c:	1dbb      	adds	r3, r7, #6
 800103e:	2200      	movs	r2, #0
 8001040:	5e9b      	ldrsh	r3, [r3, r2]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dd0d      	ble.n	8001062 <setMotor+0x7a>
    LL_TIM_OC_SetCompareCH1(TIM22,p_value);
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	2200      	movs	r2, #0
 800104a:	5e9b      	ldrsh	r3, [r3, r2]
 800104c:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <setMotor+0xa8>)
 800104e:	0019      	movs	r1, r3
 8001050:	0010      	movs	r0, r2
 8001052:	f7ff ff8a 	bl	8000f6a <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM22,0);
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <setMotor+0xa8>)
 8001058:	2100      	movs	r1, #0
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff ff91 	bl	8000f82 <LL_TIM_OC_SetCompareCH2>
}
 8001060:	e00e      	b.n	8001080 <setMotor+0x98>
    LL_TIM_OC_SetCompareCH1(TIM22,0);
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <setMotor+0xa8>)
 8001064:	2100      	movs	r1, #0
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff ff7f 	bl	8000f6a <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM22,-p_value);
 800106c:	1dbb      	adds	r3, r7, #6
 800106e:	2200      	movs	r2, #0
 8001070:	5e9b      	ldrsh	r3, [r3, r2]
 8001072:	425b      	negs	r3, r3
 8001074:	001a      	movs	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <setMotor+0xa8>)
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff ff81 	bl	8000f82 <LL_TIM_OC_SetCompareCH2>
}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	fffffc19 	.word	0xfffffc19
 800108c:	fffffc18 	.word	0xfffffc18
 8001090:	40011400 	.word	0x40011400

08001094 <protocolMain>:


//Protocol main function
void protocolMain(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  int l_car;
  l_car = rxFifoRead ();
 800109a:	f000 fc7f 	bl	800199c <rxFifoRead>
 800109e:	0003      	movs	r3, r0
 80010a0:	607b      	str	r3, [r7, #4]
  if (l_car != -1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	d004      	beq.n	80010b2 <protocolMain+0x1e>
  {
    onReceiveCar (l_car);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 f95b 	bl	8001368 <onReceiveCar>
  }
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}

080010ba <writeByte>:
  float f32[MAX_DATA_f32];
}dataParameter;

//Write a byte in "pseudo hexa" ascii format
void writeByte(int8_t p_byte )
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	0002      	movs	r2, r0
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	701a      	strb	r2, [r3, #0]
  serialWrite(0x30 | ((p_byte>>4)&0x0F));
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	2230      	movs	r2, #48	@ 0x30
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fc93 	bl	8001a04 <serialWrite>
  serialWrite(0x30 | (p_byte&0x0F));
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	220f      	movs	r2, #15
 80010e4:	4013      	ands	r3, r2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	2230      	movs	r2, #48	@ 0x30
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fc87 	bl	8001a04 <serialWrite>
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <writeShort>:
//Write a short in "pseudo hexa" ascii format - little-endian
void writeShort(int16_t p_short)
{
 80010fe:	b590      	push	{r4, r7, lr}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	0002      	movs	r2, r0
 8001106:	1dbb      	adds	r3, r7, #6
 8001108:	801a      	strh	r2, [r3, #0]
  convNumByte l_conv;
  l_conv.i16=p_short;
 800110a:	240c      	movs	r4, #12
 800110c:	193b      	adds	r3, r7, r4
 800110e:	1dba      	adds	r2, r7, #6
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	801a      	strh	r2, [r3, #0]
  writeByte(l_conv.bytes[0]); //Little-indian
 8001114:	193b      	adds	r3, r7, r4
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff ffcd 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[1]);
 8001120:	193b      	adds	r3, r7, r4
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ffc7 	bl	80010ba <writeByte>
}
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b005      	add	sp, #20
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <writeInt>:
//Write an int in "pseudo hexa" ascii format - little-endian
void writeInt(int32_t p_int)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  convNumByte l_conv;
  l_conv.i32=p_int;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	60fb      	str	r3, [r7, #12]
  writeByte(l_conv.bytes[0]);
 8001140:	240c      	movs	r4, #12
 8001142:	193b      	adds	r3, r7, r4
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ffb6 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[1]);
 800114e:	193b      	adds	r3, r7, r4
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff ffb0 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[2]);
 800115a:	193b      	adds	r3, r7, r4
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ffaa 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[3]);
 8001166:	193b      	adds	r3, r7, r4
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ffa4 	bl	80010ba <writeByte>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b005      	add	sp, #20
 8001178:	bd90      	pop	{r4, r7, pc}

0800117a <writeFloat>:
//Write a float in "pseudo hexa" ascii format - little-endian
void writeFloat(float p_float)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  convNumByte l_conv;
  l_conv.f32=p_float;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]
  writeByte(l_conv.bytes[0]);
 8001186:	240c      	movs	r4, #12
 8001188:	193b      	adds	r3, r7, r4
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff ff93 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[1]);
 8001194:	193b      	adds	r3, r7, r4
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff ff8d 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[2]);
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff ff87 	bl	80010ba <writeByte>
  writeByte(l_conv.bytes[3]);
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff81 	bl	80010ba <writeByte>
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b005      	add	sp, #20
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <writeFrameStart>:
//Write start frame byte
void writeFrameStart(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  serialWrite(FRAME_START);
 80011c4:	2055      	movs	r0, #85	@ 0x55
 80011c6:	f000 fc1d 	bl	8001a04 <serialWrite>
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <writeFrameStop>:
//Write end frame byte
void writeFrameStop(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  serialWrite(FRAME_STOP);
 80011d4:	20aa      	movs	r0, #170	@ 0xaa
 80011d6:	f000 fc15 	bl	8001a04 <serialWrite>
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <writeFrame>:

//Write a frame without any data
void writeFrame(uint8_t p_code)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	701a      	strb	r2, [r3, #0]
  writeFrameStart();
 80011ec:	f7ff ffe8 	bl	80011c0 <writeFrameStart>
  serialWrite(p_code);
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 fc05 	bl	8001a04 <serialWrite>
  serialWrite('e');
 80011fa:	2065      	movs	r0, #101	@ 0x65
 80011fc:	f000 fc02 	bl	8001a04 <serialWrite>
  writeFrameStop();
 8001200:	f7ff ffe6 	bl	80011d0 <writeFrameStop>
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}

0800120c <writeFrameByte>:
//Write a frame with p_size bytes
void writeFrameByte(uint8_t p_code, int8_t * p_bytes, int p_size)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	240f      	movs	r4, #15
 8001218:	193b      	adds	r3, r7, r4
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 800121e:	f7ff ffcf 	bl	80011c0 <writeFrameStart>
  serialWrite(p_code);
 8001222:	193b      	adds	r3, r7, r4
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fbec 	bl	8001a04 <serialWrite>
  serialWrite('b');
 800122c:	2062      	movs	r0, #98	@ 0x62
 800122e:	f000 fbe9 	bl	8001a04 <serialWrite>
  for(i=0;i<p_size;i++)
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e00a      	b.n	800124e <writeFrameByte+0x42>
  {
    writeByte(p_bytes[i]);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff ff39 	bl	80010ba <writeByte>
  for(i=0;i<p_size;i++)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	dbf0      	blt.n	8001238 <writeFrameByte+0x2c>
  }
  writeFrameStop();
 8001256:	f7ff ffbb 	bl	80011d0 <writeFrameStop>
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b007      	add	sp, #28
 8001260:	bd90      	pop	{r4, r7, pc}

08001262 <writeFrameShort>:
//Write a frame with p_size shorts
void writeFrameShort(uint8_t p_code, int16_t * p_short, int p_size)
{
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	240f      	movs	r4, #15
 800126e:	193b      	adds	r3, r7, r4
 8001270:	1c02      	adds	r2, r0, #0
 8001272:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8001274:	f7ff ffa4 	bl	80011c0 <writeFrameStart>
  serialWrite(p_code);
 8001278:	193b      	adds	r3, r7, r4
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fbc1 	bl	8001a04 <serialWrite>
  serialWrite('s');
 8001282:	2073      	movs	r0, #115	@ 0x73
 8001284:	f000 fbbe 	bl	8001a04 <serialWrite>
  for(i=0;i<p_size;i++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e00b      	b.n	80012a6 <writeFrameShort+0x44>
  {
    writeShort(p_short[i]);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	2200      	movs	r2, #0
 8001298:	5e9b      	ldrsh	r3, [r3, r2]
 800129a:	0018      	movs	r0, r3
 800129c:	f7ff ff2f 	bl	80010fe <writeShort>
  for(i=0;i<p_size;i++)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbef      	blt.n	800128e <writeFrameShort+0x2c>
  }
  writeFrameStop();
 80012ae:	f7ff ff8f 	bl	80011d0 <writeFrameStop>
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b007      	add	sp, #28
 80012b8:	bd90      	pop	{r4, r7, pc}

080012ba <writeFrameInt>:
//Write a frame with p_size ints
void writeFrameInt(uint8_t p_code, int32_t * p_int, int p_size)
{
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	240f      	movs	r4, #15
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	1c02      	adds	r2, r0, #0
 80012ca:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 80012cc:	f7ff ff78 	bl	80011c0 <writeFrameStart>
  serialWrite(p_code);
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fb95 	bl	8001a04 <serialWrite>
  serialWrite('i');
 80012da:	2069      	movs	r0, #105	@ 0x69
 80012dc:	f000 fb92 	bl	8001a04 <serialWrite>
  for(i=0;i<p_size;i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e00a      	b.n	80012fc <writeFrameInt+0x42>
  {
    writeInt(p_int[i]);
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff1f 	bl	8001134 <writeInt>
  for(i=0;i<p_size;i++)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbf0      	blt.n	80012e6 <writeFrameInt+0x2c>
  }
  writeFrameStop();
 8001304:	f7ff ff64 	bl	80011d0 <writeFrameStop>
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b007      	add	sp, #28
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <writeFrameFloat>:
//Write a frame with p_size ints
void writeFrameFloat(uint8_t p_code, float * p_float, int p_size)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	240f      	movs	r4, #15
 800131c:	193b      	adds	r3, r7, r4
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8001322:	f7ff ff4d 	bl	80011c0 <writeFrameStart>
  serialWrite(p_code);
 8001326:	193b      	adds	r3, r7, r4
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fb6a 	bl	8001a04 <serialWrite>
  serialWrite('f');
 8001330:	2066      	movs	r0, #102	@ 0x66
 8001332:	f000 fb67 	bl	8001a04 <serialWrite>
  for(i=0;i<p_size;i++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e00a      	b.n	8001352 <writeFrameFloat+0x42>
  {
    writeFloat(p_float[i]);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	18d3      	adds	r3, r2, r3
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1c18      	adds	r0, r3, #0
 8001348:	f7ff ff17 	bl	800117a <writeFloat>
  for(i=0;i<p_size;i++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	dbf0      	blt.n	800133c <writeFrameFloat+0x2c>
  }
  writeFrameStop();
 800135a:	f7ff ff39 	bl	80011d0 <writeFrameStop>
}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b007      	add	sp, #28
 8001364:	bd90      	pop	{r4, r7, pc}
	...

08001368 <onReceiveCar>:
}rxState;


//Protocol management
void onReceiveCar(uint8_t p_car)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	701a      	strb	r2, [r3, #0]
  static uint8_t l_dataCount=0;
  static uint8_t l_pseudoHexa[2];
  static uint8_t l_pseudoHexaCnt=0;


  if (p_car==FRAME_STOP)
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2baa      	cmp	r3, #170	@ 0xaa
 800137a:	d102      	bne.n	8001382 <onReceiveCar+0x1a>
  {
      l_stateRx=R_FRAME_STOP;
 800137c:	4bbc      	ldr	r3, [pc, #752]	@ (8001670 <onReceiveCar+0x308>)
 800137e:	2204      	movs	r2, #4
 8001380:	701a      	strb	r2, [r3, #0]
  }

  switch(l_stateRx)
 8001382:	4bbb      	ldr	r3, [pc, #748]	@ (8001670 <onReceiveCar+0x308>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d900      	bls.n	800138c <onReceiveCar+0x24>
 800138a:	e16d      	b.n	8001668 <onReceiveCar+0x300>
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	4bb9      	ldr	r3, [pc, #740]	@ (8001674 <onReceiveCar+0x30c>)
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	469f      	mov	pc, r3
  {
    case R_FRAME_STOP:  //end of frame
      switch(l_frameType)
 8001396:	4bb8      	ldr	r3, [pc, #736]	@ (8001678 <onReceiveCar+0x310>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3b62      	subs	r3, #98	@ 0x62
 800139c:	2b11      	cmp	r3, #17
 800139e:	d900      	bls.n	80013a2 <onReceiveCar+0x3a>
 80013a0:	e089      	b.n	80014b6 <onReceiveCar+0x14e>
 80013a2:	009a      	lsls	r2, r3, #2
 80013a4:	4bb5      	ldr	r3, [pc, #724]	@ (800167c <onReceiveCar+0x314>)
 80013a6:	18d3      	adds	r3, r2, r3
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	469f      	mov	pc, r3
      {
	//    'e' (0x65) = command frame
	case 'e':
	  //mode test
	  if (l_frameCode == 254)
 80013ac:	4bb4      	ldr	r3, [pc, #720]	@ (8001680 <onReceiveCar+0x318>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80013b2:	d103      	bne.n	80013bc <onReceiveCar+0x54>
	  {
	    testProtocol=1;  //library test mode
 80013b4:	4bb3      	ldr	r3, [pc, #716]	@ (8001684 <onReceiveCar+0x31c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	  }
	  else if (testProtocol==0) //test mode?
	    onNewFrameCommand(l_frameCode);
	  else
	    writeFrame(l_frameCode); //echo
	  break;
 80013ba:	e07c      	b.n	80014b6 <onReceiveCar+0x14e>
	  else if (l_frameCode == 255)
 80013bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001680 <onReceiveCar+0x318>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2bff      	cmp	r3, #255	@ 0xff
 80013c2:	d103      	bne.n	80013cc <onReceiveCar+0x64>
	    testProtocol=0;  //library test mode end
 80013c4:	4baf      	ldr	r3, [pc, #700]	@ (8001684 <onReceiveCar+0x31c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	  break;
 80013ca:	e074      	b.n	80014b6 <onReceiveCar+0x14e>
	  else if (testProtocol==0) //test mode?
 80013cc:	4bad      	ldr	r3, [pc, #692]	@ (8001684 <onReceiveCar+0x31c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <onReceiveCar+0x7a>
	    onNewFrameCommand(l_frameCode);
 80013d6:	4baa      	ldr	r3, [pc, #680]	@ (8001680 <onReceiveCar+0x318>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff fc94 	bl	8000d08 <onNewFrameCommand>
	  break;
 80013e0:	e069      	b.n	80014b6 <onReceiveCar+0x14e>
	    writeFrame(l_frameCode); //echo
 80013e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001680 <onReceiveCar+0x318>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fefa 	bl	80011e0 <writeFrame>
	  break;
 80013ec:	e063      	b.n	80014b6 <onReceiveCar+0x14e>
	//    'b' (0x62) = integer 8 bits
	case 'b':
	  if (testProtocol==0) //test mode?
 80013ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001684 <onReceiveCar+0x31c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <onReceiveCar+0xa4>
	    onNewFrameByte(l_frameCode,l_data.i8,l_dataCount);
 80013f8:	4ba1      	ldr	r3, [pc, #644]	@ (8001680 <onReceiveCar+0x318>)
 80013fa:	7818      	ldrb	r0, [r3, #0]
 80013fc:	4ba2      	ldr	r3, [pc, #648]	@ (8001688 <onReceiveCar+0x320>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	001a      	movs	r2, r3
 8001402:	4ba2      	ldr	r3, [pc, #648]	@ (800168c <onReceiveCar+0x324>)
 8001404:	0019      	movs	r1, r3
 8001406:	f7ff fc89 	bl	8000d1c <onNewFrameByte>
	  else
	    writeFrameByte(l_frameCode,l_data.i8,l_dataCount); //echo for test
	  break;
 800140a:	e054      	b.n	80014b6 <onReceiveCar+0x14e>
	    writeFrameByte(l_frameCode,l_data.i8,l_dataCount); //echo for test
 800140c:	4b9c      	ldr	r3, [pc, #624]	@ (8001680 <onReceiveCar+0x318>)
 800140e:	7818      	ldrb	r0, [r3, #0]
 8001410:	4b9d      	ldr	r3, [pc, #628]	@ (8001688 <onReceiveCar+0x320>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	001a      	movs	r2, r3
 8001416:	4b9d      	ldr	r3, [pc, #628]	@ (800168c <onReceiveCar+0x324>)
 8001418:	0019      	movs	r1, r3
 800141a:	f7ff fef7 	bl	800120c <writeFrameByte>
	  break;
 800141e:	e04a      	b.n	80014b6 <onReceiveCar+0x14e>
	//    's' (0x73) = integer 16 bits
	case 's':
	  if (testProtocol==0) //test mode?
 8001420:	4b98      	ldr	r3, [pc, #608]	@ (8001684 <onReceiveCar+0x31c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <onReceiveCar+0xd6>
	    onNewFrameShort(l_frameCode,l_data.i16,l_dataCount);
 800142a:	4b95      	ldr	r3, [pc, #596]	@ (8001680 <onReceiveCar+0x318>)
 800142c:	7818      	ldrb	r0, [r3, #0]
 800142e:	4b96      	ldr	r3, [pc, #600]	@ (8001688 <onReceiveCar+0x320>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	001a      	movs	r2, r3
 8001434:	4b95      	ldr	r3, [pc, #596]	@ (800168c <onReceiveCar+0x324>)
 8001436:	0019      	movs	r1, r3
 8001438:	f7ff fc7e 	bl	8000d38 <onNewFrameShort>
	  else
	    writeFrameShort(l_frameCode,l_data.i16,l_dataCount); //echo for test
	  break;
 800143c:	e03b      	b.n	80014b6 <onReceiveCar+0x14e>
	    writeFrameShort(l_frameCode,l_data.i16,l_dataCount); //echo for test
 800143e:	4b90      	ldr	r3, [pc, #576]	@ (8001680 <onReceiveCar+0x318>)
 8001440:	7818      	ldrb	r0, [r3, #0]
 8001442:	4b91      	ldr	r3, [pc, #580]	@ (8001688 <onReceiveCar+0x320>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001a      	movs	r2, r3
 8001448:	4b90      	ldr	r3, [pc, #576]	@ (800168c <onReceiveCar+0x324>)
 800144a:	0019      	movs	r1, r3
 800144c:	f7ff ff09 	bl	8001262 <writeFrameShort>
	  break;
 8001450:	e031      	b.n	80014b6 <onReceiveCar+0x14e>
	//    'i' (0x6C) = integer 32 bits
	case 'i':
	  if (testProtocol==0) //test mode?
 8001452:	4b8c      	ldr	r3, [pc, #560]	@ (8001684 <onReceiveCar+0x31c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b25b      	sxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d109      	bne.n	8001470 <onReceiveCar+0x108>
	    onNewFrameInt(l_frameCode,l_data.i32,l_dataCount);
 800145c:	4b88      	ldr	r3, [pc, #544]	@ (8001680 <onReceiveCar+0x318>)
 800145e:	7818      	ldrb	r0, [r3, #0]
 8001460:	4b89      	ldr	r3, [pc, #548]	@ (8001688 <onReceiveCar+0x320>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	001a      	movs	r2, r3
 8001466:	4b89      	ldr	r3, [pc, #548]	@ (800168c <onReceiveCar+0x324>)
 8001468:	0019      	movs	r1, r3
 800146a:	f7ff fc95 	bl	8000d98 <onNewFrameInt>
	  else
	    writeFrameInt(l_frameCode,l_data.i32,l_dataCount); //echo for test
	  break;
 800146e:	e022      	b.n	80014b6 <onReceiveCar+0x14e>
	    writeFrameInt(l_frameCode,l_data.i32,l_dataCount); //echo for test
 8001470:	4b83      	ldr	r3, [pc, #524]	@ (8001680 <onReceiveCar+0x318>)
 8001472:	7818      	ldrb	r0, [r3, #0]
 8001474:	4b84      	ldr	r3, [pc, #528]	@ (8001688 <onReceiveCar+0x320>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	001a      	movs	r2, r3
 800147a:	4b84      	ldr	r3, [pc, #528]	@ (800168c <onReceiveCar+0x324>)
 800147c:	0019      	movs	r1, r3
 800147e:	f7ff ff1c 	bl	80012ba <writeFrameInt>
	  break;
 8001482:	e018      	b.n	80014b6 <onReceiveCar+0x14e>
	//    'f' (0x66) = float 32 bits
	case 'f':
	  if (testProtocol==0) //test mode?
 8001484:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <onReceiveCar+0x31c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <onReceiveCar+0x13a>
	    onNewFrameFloat(l_frameCode,l_data.f32,l_dataCount);
 800148e:	4b7c      	ldr	r3, [pc, #496]	@ (8001680 <onReceiveCar+0x318>)
 8001490:	7818      	ldrb	r0, [r3, #0]
 8001492:	4b7d      	ldr	r3, [pc, #500]	@ (8001688 <onReceiveCar+0x320>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	001a      	movs	r2, r3
 8001498:	4b7c      	ldr	r3, [pc, #496]	@ (800168c <onReceiveCar+0x324>)
 800149a:	0019      	movs	r1, r3
 800149c:	f7ff fc89 	bl	8000db2 <onNewFrameFloat>
	  else
	    writeFrameFloat(l_frameCode,l_data.f32,l_dataCount); //echo for test
	  break;
 80014a0:	e008      	b.n	80014b4 <onReceiveCar+0x14c>
	    writeFrameFloat(l_frameCode,l_data.f32,l_dataCount); //echo for test
 80014a2:	4b77      	ldr	r3, [pc, #476]	@ (8001680 <onReceiveCar+0x318>)
 80014a4:	7818      	ldrb	r0, [r3, #0]
 80014a6:	4b78      	ldr	r3, [pc, #480]	@ (8001688 <onReceiveCar+0x320>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	001a      	movs	r2, r3
 80014ac:	4b77      	ldr	r3, [pc, #476]	@ (800168c <onReceiveCar+0x324>)
 80014ae:	0019      	movs	r1, r3
 80014b0:	f7ff ff2e 	bl	8001310 <writeFrameFloat>
	  break;
 80014b4:	46c0      	nop			@ (mov r8, r8)
      }
      l_receiveCount=0;
 80014b6:	4b76      	ldr	r3, [pc, #472]	@ (8001690 <onReceiveCar+0x328>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
      l_dataCount=0;
 80014bc:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <onReceiveCar+0x320>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
      l_pseudoHexaCnt=0;
 80014c2:	4b74      	ldr	r3, [pc, #464]	@ (8001694 <onReceiveCar+0x32c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
      l_stateRx=IDLE;
 80014c8:	4b69      	ldr	r3, [pc, #420]	@ (8001670 <onReceiveCar+0x308>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
      break;
 80014ce:	e0cb      	b.n	8001668 <onReceiveCar+0x300>
    case IDLE:
      if (p_car==FRAME_START)
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b55      	cmp	r3, #85	@ 0x55
 80014d6:	d000      	beq.n	80014da <onReceiveCar+0x172>
 80014d8:	e0c3      	b.n	8001662 <onReceiveCar+0x2fa>
	l_stateRx=R_FRAME_START;
 80014da:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <onReceiveCar+0x308>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
      break;
 80014e0:	e0bf      	b.n	8001662 <onReceiveCar+0x2fa>
    case R_FRAME_START:  //receive frame code
      l_frameCode=p_car;
 80014e2:	4b67      	ldr	r3, [pc, #412]	@ (8001680 <onReceiveCar+0x318>)
 80014e4:	1dfa      	adds	r2, r7, #7
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
      l_stateRx=R_FRAME_CODE;
 80014ea:	4b61      	ldr	r3, [pc, #388]	@ (8001670 <onReceiveCar+0x308>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	701a      	strb	r2, [r3, #0]
      break;
 80014f0:	e0ba      	b.n	8001668 <onReceiveCar+0x300>
    case R_FRAME_CODE:  //receive frame type
      l_frameType=p_car;
 80014f2:	4b61      	ldr	r3, [pc, #388]	@ (8001678 <onReceiveCar+0x310>)
 80014f4:	1dfa      	adds	r2, r7, #7
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	701a      	strb	r2, [r3, #0]
      l_stateRx=R_FRAME_TYPE;
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <onReceiveCar+0x308>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	701a      	strb	r2, [r3, #0]
      break;
 8001500:	e0b2      	b.n	8001668 <onReceiveCar+0x300>
    case R_FRAME_TYPE:  //receive data
      if (l_pseudoHexaCnt==0)
 8001502:	4b64      	ldr	r3, [pc, #400]	@ (8001694 <onReceiveCar+0x32c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <onReceiveCar+0x1b2>
      {
	l_pseudoHexaCnt=1;
 800150a:	4b62      	ldr	r3, [pc, #392]	@ (8001694 <onReceiveCar+0x32c>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
	l_pseudoHexa[0]=p_car;
 8001510:	4b61      	ldr	r3, [pc, #388]	@ (8001698 <onReceiveCar+0x330>)
 8001512:	1dfa      	adds	r2, r7, #7
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	701a      	strb	r2, [r3, #0]
	break;
 8001518:	e0a6      	b.n	8001668 <onReceiveCar+0x300>
      }
      else
      {
	l_pseudoHexa[1]=p_car;
 800151a:	4b5f      	ldr	r3, [pc, #380]	@ (8001698 <onReceiveCar+0x330>)
 800151c:	1dfa      	adds	r2, r7, #7
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	705a      	strb	r2, [r3, #1]
	l_pseudoHexaCnt=0;
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <onReceiveCar+0x32c>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	//pseudo hexa to char conv
	p_car=((l_pseudoHexa[0]&0x0F)<<4) | (l_pseudoHexa[1]&0x0F);
 8001528:	4b5b      	ldr	r3, [pc, #364]	@ (8001698 <onReceiveCar+0x330>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	b25a      	sxtb	r2, r3
 8001530:	4b59      	ldr	r3, [pc, #356]	@ (8001698 <onReceiveCar+0x330>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	b25b      	sxtb	r3, r3
 8001536:	210f      	movs	r1, #15
 8001538:	400b      	ands	r3, r1
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b25a      	sxtb	r2, r3
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
      }

      l_conv.bytes[l_receiveCount]=p_car;
 8001544:	4b52      	ldr	r3, [pc, #328]	@ (8001690 <onReceiveCar+0x328>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	0019      	movs	r1, r3
 800154a:	4b54      	ldr	r3, [pc, #336]	@ (800169c <onReceiveCar+0x334>)
 800154c:	1dfa      	adds	r2, r7, #7
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	545a      	strb	r2, [r3, r1]
      l_receiveCount++;
 8001552:	4b4f      	ldr	r3, [pc, #316]	@ (8001690 <onReceiveCar+0x328>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b4d      	ldr	r3, [pc, #308]	@ (8001690 <onReceiveCar+0x328>)
 800155c:	701a      	strb	r2, [r3, #0]
      switch(l_frameType)
 800155e:	4b46      	ldr	r3, [pc, #280]	@ (8001678 <onReceiveCar+0x310>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b73      	cmp	r3, #115	@ 0x73
 8001564:	d020      	beq.n	80015a8 <onReceiveCar+0x240>
 8001566:	dd00      	ble.n	800156a <onReceiveCar+0x202>
 8001568:	e07d      	b.n	8001666 <onReceiveCar+0x2fe>
 800156a:	2b69      	cmp	r3, #105	@ 0x69
 800156c:	d037      	beq.n	80015de <onReceiveCar+0x276>
 800156e:	dd00      	ble.n	8001572 <onReceiveCar+0x20a>
 8001570:	e079      	b.n	8001666 <onReceiveCar+0x2fe>
 8001572:	2b62      	cmp	r3, #98	@ 0x62
 8001574:	d002      	beq.n	800157c <onReceiveCar+0x214>
 8001576:	2b66      	cmp	r3, #102	@ 0x66
 8001578:	d04b      	beq.n	8001612 <onReceiveCar+0x2aa>
	    l_dataCount++;
	    l_receiveCount=0;
	  }
	  break;
      }
      break;
 800157a:	e074      	b.n	8001666 <onReceiveCar+0x2fe>
	  if (l_dataCount==MAX_DATA_i8) // rejects the parameter: too many data parameters
 800157c:	4b42      	ldr	r3, [pc, #264]	@ (8001688 <onReceiveCar+0x320>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b40      	cmp	r3, #64	@ 0x40
 8001582:	d060      	beq.n	8001646 <onReceiveCar+0x2de>
	  l_data.i8[l_dataCount]=p_car;
 8001584:	4b40      	ldr	r3, [pc, #256]	@ (8001688 <onReceiveCar+0x320>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	2100      	movs	r1, #0
 800158e:	5659      	ldrsb	r1, [r3, r1]
 8001590:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <onReceiveCar+0x324>)
 8001592:	5499      	strb	r1, [r3, r2]
	  l_dataCount++;
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <onReceiveCar+0x320>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <onReceiveCar+0x320>)
 800159e:	701a      	strb	r2, [r3, #0]
	  l_receiveCount=0;
 80015a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <onReceiveCar+0x328>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	  break;
 80015a6:	e05b      	b.n	8001660 <onReceiveCar+0x2f8>
	  if (l_dataCount==MAX_DATA_i16) // rejects the parameter: too many data parameters
 80015a8:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <onReceiveCar+0x320>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d04c      	beq.n	800164a <onReceiveCar+0x2e2>
	  if (l_receiveCount==2)
 80015b0:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <onReceiveCar+0x328>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d14a      	bne.n	800164e <onReceiveCar+0x2e6>
	    l_data.i16[l_dataCount]=l_conv.i16;
 80015b8:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <onReceiveCar+0x320>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	001a      	movs	r2, r3
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <onReceiveCar+0x334>)
 80015c0:	2100      	movs	r1, #0
 80015c2:	5e59      	ldrsh	r1, [r3, r1]
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <onReceiveCar+0x324>)
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	52d1      	strh	r1, [r2, r3]
	    l_dataCount++;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <onReceiveCar+0x320>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <onReceiveCar+0x320>)
 80015d4:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <onReceiveCar+0x328>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
	  break;
 80015dc:	e037      	b.n	800164e <onReceiveCar+0x2e6>
	  if (l_dataCount==MAX_DATA_i32) // rejects the parameter: too many data parameters
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <onReceiveCar+0x320>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d035      	beq.n	8001652 <onReceiveCar+0x2ea>
	  if (l_receiveCount==4)
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <onReceiveCar+0x328>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d133      	bne.n	8001656 <onReceiveCar+0x2ee>
	    l_data.i32[l_dataCount]=l_conv.i32;;
 80015ee:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <onReceiveCar+0x320>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	001a      	movs	r2, r3
 80015f4:	4b29      	ldr	r3, [pc, #164]	@ (800169c <onReceiveCar+0x334>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4b24      	ldr	r3, [pc, #144]	@ (800168c <onReceiveCar+0x324>)
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	50d1      	str	r1, [r2, r3]
	    l_dataCount++;
 80015fe:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <onReceiveCar+0x320>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <onReceiveCar+0x320>)
 8001608:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <onReceiveCar+0x328>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	  break;
 8001610:	e021      	b.n	8001656 <onReceiveCar+0x2ee>
	  if (l_dataCount==MAX_DATA_f32) // rejects the parameter: too many data parameters
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <onReceiveCar+0x320>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d01f      	beq.n	800165a <onReceiveCar+0x2f2>
	  if (l_receiveCount==4)
 800161a:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <onReceiveCar+0x328>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b04      	cmp	r3, #4
 8001620:	d11d      	bne.n	800165e <onReceiveCar+0x2f6>
	    l_data.f32[l_dataCount]=l_conv.f32;;
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <onReceiveCar+0x320>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	001a      	movs	r2, r3
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <onReceiveCar+0x334>)
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <onReceiveCar+0x324>)
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	50d1      	str	r1, [r2, r3]
	    l_dataCount++;
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <onReceiveCar+0x320>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <onReceiveCar+0x320>)
 800163c:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <onReceiveCar+0x328>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	  break;
 8001644:	e00b      	b.n	800165e <onReceiveCar+0x2f6>
	    break;
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	e00d      	b.n	8001666 <onReceiveCar+0x2fe>
	    break;
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	e00b      	b.n	8001666 <onReceiveCar+0x2fe>
	  break;
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	e009      	b.n	8001666 <onReceiveCar+0x2fe>
	    break;
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	e007      	b.n	8001666 <onReceiveCar+0x2fe>
	  break;
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	e005      	b.n	8001666 <onReceiveCar+0x2fe>
	    break;
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	e003      	b.n	8001666 <onReceiveCar+0x2fe>
	  break;
 800165e:	46c0      	nop			@ (mov r8, r8)
      break;
 8001660:	e001      	b.n	8001666 <onReceiveCar+0x2fe>
      break;
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	e000      	b.n	8001668 <onReceiveCar+0x300>
      break;
 8001666:	46c0      	nop			@ (mov r8, r8)
  }

}
 8001668:	46c0      	nop			@ (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000022d 	.word	0x2000022d
 8001674:	08003934 	.word	0x08003934
 8001678:	2000022e 	.word	0x2000022e
 800167c:	08003948 	.word	0x08003948
 8001680:	2000022f 	.word	0x2000022f
 8001684:	2000022c 	.word	0x2000022c
 8001688:	20000230 	.word	0x20000230
 800168c:	20000234 	.word	0x20000234
 8001690:	20000274 	.word	0x20000274
 8001694:	20000275 	.word	0x20000275
 8001698:	20000278 	.word	0x20000278
 800169c:	2000027c 	.word	0x2000027c

080016a0 <RetargetInit>:
#define STDERR_FILENO 2

USART_TypeDef *gHuart;
extern  uint8_t g_rxCarUSART2;

void RetargetInit(USART_TypeDef *huart) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <RetargetInit+0x28>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <RetargetInit+0x2c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6898      	ldr	r0, [r3, #8]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2202      	movs	r2, #2
 80016b8:	2100      	movs	r1, #0
 80016ba:	f001 fda3 	bl	8003204 <setvbuf>
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	20000280 	.word	0x20000280
 80016cc:	20000018 	.word	0x20000018

080016d0 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d002      	beq.n	80016e8 <_write+0x18>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d113      	bne.n	8001710 <_write+0x40>
      for (int i=0; i<len;i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_write+0x34>
      {
        serialWrite(*ptr);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 f986 	bl	8001a04 <serialWrite>
        ptr++;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
      for (int i=0; i<len;i++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_write+0x1e>
      }
    return len;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	e006      	b.n	800171e <_write+0x4e>
  }
  errno = EBADF;
 8001710:	f001 fed0 	bl	80034b4 <__errno>
 8001714:	0003      	movs	r3, r0
 8001716:	2209      	movs	r2, #9
 8001718:	601a      	str	r2, [r3, #0]
  return -1;
 800171a:	2301      	movs	r3, #1
 800171c:	425b      	negs	r3, r3
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b006      	add	sp, #24
 8001724:	bd80      	pop	{r7, pc}

08001726 <_close>:

int _close(int fd) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db04      	blt.n	800173e <_close+0x18>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	dc01      	bgt.n	800173e <_close+0x18>
    return 0;
 800173a:	2300      	movs	r3, #0
 800173c:	e006      	b.n	800174c <_close+0x26>

  errno = EBADF;
 800173e:	f001 feb9 	bl	80034b4 <__errno>
 8001742:	0003      	movs	r3, r0
 8001744:	2209      	movs	r2, #9
 8001746:	601a      	str	r2, [r3, #0]
  return -1;
 8001748:	2301      	movs	r3, #1
 800174a:	425b      	negs	r3, r3
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}

08001754 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001760:	f001 fea8 	bl	80034b4 <__errno>
 8001764:	0003      	movs	r3, r0
 8001766:	2209      	movs	r2, #9
 8001768:	601a      	str	r2, [r3, #0]
  return -1;
 800176a:	2301      	movs	r3, #1
 800176c:	425b      	negs	r3, r3
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bd80      	pop	{r7, pc}

08001776 <_read>:

int _read(int fd, char* ptr, int len) {
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]

  int l_car=0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  if (fd == STDIN_FILENO) {
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d110      	bne.n	80017ae <_read+0x38>
      do
      {
	  l_car=rxFifoRead();
 800178c:	f000 f906 	bl	800199c <rxFifoRead>
 8001790:	0003      	movs	r3, r0
 8001792:	617b      	str	r3, [r7, #20]
	  if (l_car==-1)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	d100      	bne.n	800179c <_read+0x26>
	  {
    	    __WFI(); //wait for interrupt (for a key ==> data RX)
 800179a:	bf30      	wfi
    	  }
      }
      while(l_car==-1); //while no char received
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	d0f4      	beq.n	800178c <_read+0x16>
      *ptr=l_car;  //save received data
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	701a      	strb	r2, [r3, #0]
      return 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e006      	b.n	80017bc <_read+0x46>
  }
  errno = EBADF;
 80017ae:	f001 fe81 	bl	80034b4 <__errno>
 80017b2:	0003      	movs	r3, r0
 80017b4:	2209      	movs	r2, #9
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	425b      	negs	r3, r3
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b006      	add	sp, #24
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db08      	blt.n	80017e6 <_fstat+0x22>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	dc05      	bgt.n	80017e6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	0192      	lsls	r2, r2, #6
 80017e0:	605a      	str	r2, [r3, #4]
    return 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e005      	b.n	80017f2 <_fstat+0x2e>
  }

  errno = EBADF;
 80017e6:	f001 fe65 	bl	80034b4 <__errno>
 80017ea:	0003      	movs	r3, r0
 80017ec:	2209      	movs	r2, #9
 80017ee:	601a      	str	r2, [r3, #0]
  return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}

080017fa <LL_USART_IsActiveFlag_ORE>:
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2208      	movs	r2, #8
 8001808:	4013      	ands	r3, r2
 800180a:	2b08      	cmp	r3, #8
 800180c:	d101      	bne.n	8001812 <LL_USART_IsActiveFlag_ORE+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_USART_IsActiveFlag_ORE+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_USART_IsActiveFlag_RXNE>:
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2220      	movs	r2, #32
 800182a:	4013      	ands	r3, r2
 800182c:	2b20      	cmp	r3, #32
 800182e:	d101      	bne.n	8001834 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}

0800183e <LL_USART_IsActiveFlag_TXE>:
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2280      	movs	r2, #128	@ 0x80
 800184c:	4013      	ands	r3, r2
 800184e:	2b80      	cmp	r3, #128	@ 0x80
 8001850:	d101      	bne.n	8001856 <LL_USART_IsActiveFlag_TXE+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <LL_USART_ClearFlag_ORE>:
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2208      	movs	r2, #8
 800186c:	621a      	str	r2, [r3, #32]
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}

08001876 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	000a      	movs	r2, r1
 8001896:	1cfb      	adds	r3, r7, #3
 8001898:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800189a:	1cfb      	adds	r3, r7, #3
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}

080018aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	e7fd      	b.n	80018ae <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	e7fd      	b.n	80018b6 <HardFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c8:	46c0      	nop			@ (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timeMs++;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <SysTick_Handler+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <SysTick_Handler+0x14>)
 80018dc:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000284 	.word	0x20000284

080018e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <USART2_IRQHandler+0x3c>)
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff ff94 	bl	800181c <LL_USART_IsActiveFlag_RXNE>
 80018f4:	1e03      	subs	r3, r0, #0
 80018f6:	d007      	beq.n	8001908 <USART2_IRQHandler+0x20>
  {
      rxFifoWrite(LL_USART_ReceiveData8(USART2));
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <USART2_IRQHandler+0x3c>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ffbb 	bl	8001876 <LL_USART_ReceiveData8>
 8001900:	0003      	movs	r3, r0
 8001902:	0018      	movs	r0, r3
 8001904:	f000 f820 	bl	8001948 <rxFifoWrite>
  }

  /* Clear overrun error flag */
  if (LL_USART_IsActiveFlag_ORE(USART2))
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <USART2_IRQHandler+0x3c>)
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff ff75 	bl	80017fa <LL_USART_IsActiveFlag_ORE>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d003      	beq.n	800191c <USART2_IRQHandler+0x34>
    {
      LL_USART_ClearFlag_ORE(USART2);
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <USART2_IRQHandler+0x3c>)
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff ffa2 	bl	8001860 <LL_USART_ClearFlag_ORE>
    }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	40004400 	.word	0x40004400

08001928 <rxFifoInit>:
   int writePos;
   int count;
   uint8_t buffer[FIFO_LENGTH];
}g_rxFifo;
void rxFifoInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  g_rxFifo.readPos=0;
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <rxFifoInit+0x1c>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
  g_rxFifo.writePos=0;
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <rxFifoInit+0x1c>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  g_rxFifo.count=0;
 8001938:	4b02      	ldr	r3, [pc, #8]	@ (8001944 <rxFifoInit+0x1c>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000288 	.word	0x20000288

08001948 <rxFifoWrite>:
void rxFifoWrite(uint8_t p_car)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	0002      	movs	r2, r0
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	701a      	strb	r2, [r3, #0]
 if (g_rxFifo.count==FIFO_LENGTH) return;  // buffer full
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <rxFifoWrite+0x50>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b1e      	cmp	r3, #30
 800195a:	d018      	beq.n	800198e <rxFifoWrite+0x46>
 g_rxFifo.buffer[g_rxFifo.writePos]=p_car;
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <rxFifoWrite+0x50>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <rxFifoWrite+0x50>)
 8001962:	18d3      	adds	r3, r2, r3
 8001964:	1dfa      	adds	r2, r7, #7
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	731a      	strb	r2, [r3, #12]
 g_rxFifo.writePos++;
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <rxFifoWrite+0x50>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <rxFifoWrite+0x50>)
 8001972:	605a      	str	r2, [r3, #4]
 g_rxFifo.count++;
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <rxFifoWrite+0x50>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <rxFifoWrite+0x50>)
 800197c:	609a      	str	r2, [r3, #8]
 if (g_rxFifo.writePos==FIFO_LENGTH) g_rxFifo.writePos=0;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <rxFifoWrite+0x50>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b1e      	cmp	r3, #30
 8001984:	d104      	bne.n	8001990 <rxFifoWrite+0x48>
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <rxFifoWrite+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	e000      	b.n	8001990 <rxFifoWrite+0x48>
 if (g_rxFifo.count==FIFO_LENGTH) return;  // buffer full
 800198e:	46c0      	nop			@ (mov r8, r8)
}
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	20000288 	.word	0x20000288

0800199c <rxFifoRead>:
int rxFifoRead(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019a2:	b672      	cpsid	i
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
  int l_car;
  __disable_irq();
  if (g_rxFifo.count==0)
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <rxFifoRead+0x58>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <rxFifoRead+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 80019ae:	b662      	cpsie	i
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
  {
      __enable_irq();
      return -1; //empty
 80019b2:	2301      	movs	r3, #1
 80019b4:	425b      	negs	r3, r3
 80019b6:	e019      	b.n	80019ec <rxFifoRead+0x50>
  }
  l_car=g_rxFifo.buffer[g_rxFifo.readPos];
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <rxFifoRead+0x58>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <rxFifoRead+0x58>)
 80019be:	18d3      	adds	r3, r2, r3
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	607b      	str	r3, [r7, #4]
  g_rxFifo.count--;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <rxFifoRead+0x58>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <rxFifoRead+0x58>)
 80019cc:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ce:	b662      	cpsie	i
}
 80019d0:	46c0      	nop			@ (mov r8, r8)
  __enable_irq();
  g_rxFifo.readPos++;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <rxFifoRead+0x58>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <rxFifoRead+0x58>)
 80019da:	601a      	str	r2, [r3, #0]
  if (g_rxFifo.readPos==FIFO_LENGTH) g_rxFifo.readPos=0;
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <rxFifoRead+0x58>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b1e      	cmp	r3, #30
 80019e2:	d102      	bne.n	80019ea <rxFifoRead+0x4e>
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <rxFifoRead+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
  return l_car;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000288 	.word	0x20000288

080019f8 <getchInit>:

void getchInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
}
 80019fc:	46c0      	nop			@ (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <serialWrite>:
   return 0;
 else
   return 1;
}
void serialWrite(uint8_t p_car)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	701a      	strb	r2, [r3, #0]
  while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 8001a10:	46c0      	nop			@ (mov r8, r8)
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <serialWrite+0x30>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff ff12 	bl	800183e <LL_USART_IsActiveFlag_TXE>
 8001a1a:	1e03      	subs	r3, r0, #0
 8001a1c:	d0f9      	beq.n	8001a12 <serialWrite+0xe>
  LL_USART_TransmitData8(USART2,p_car);
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <serialWrite+0x30>)
 8001a24:	0019      	movs	r1, r3
 8001a26:	0010      	movs	r0, r2
 8001a28:	f7ff ff30 	bl	800188c <LL_USART_TransmitData8>
}
 8001a2c:	46c0      	nop			@ (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40004400 	.word	0x40004400

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f001 fd24 	bl	80034b4 <__errno>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	425b      	negs	r3, r3
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	18d2      	adds	r2, r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <_sbrk+0x64>)
 8001a88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b006      	add	sp, #24
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20002000 	.word	0x20002000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	200002b4 	.word	0x200002b4
 8001aa0:	20000408 	.word	0x20000408

08001aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <LL_APB2_GRP1_EnableClock>:
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <LL_APB2_GRP1_EnableClock+0x28>)
 8001aba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <LL_APB2_GRP1_EnableClock+0x28>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <LL_APB2_GRP1_EnableClock+0x28>)
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_IOP_GRP1_EnableClock>:
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <LL_IOP_GRP1_EnableClock+0x28>)
 8001ae6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <LL_IOP_GRP1_EnableClock+0x28>)
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <LL_IOP_GRP1_EnableClock+0x28>)
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000

08001b08 <LL_TIM_DisableARRPreload>:
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2280      	movs	r2, #128	@ 0x80
 8001b16:	4393      	bics	r3, r2
 8001b18:	001a      	movs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <LL_TIM_OC_DisableFast>:
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d00d      	beq.n	8001b54 <LL_TIM_OC_DisableFast+0x2c>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d008      	beq.n	8001b50 <LL_TIM_OC_DisableFast+0x28>
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d101      	bne.n	8001b4c <LL_TIM_OC_DisableFast+0x24>
 8001b48:	2304      	movs	r3, #4
 8001b4a:	e004      	b.n	8001b56 <LL_TIM_OC_DisableFast+0x2e>
 8001b4c:	2306      	movs	r3, #6
 8001b4e:	e002      	b.n	8001b56 <LL_TIM_OC_DisableFast+0x2e>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e000      	b.n	8001b56 <LL_TIM_OC_DisableFast+0x2e>
 8001b54:	2300      	movs	r3, #0
 8001b56:	200f      	movs	r0, #15
 8001b58:	183a      	adds	r2, r7, r0
 8001b5a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3318      	adds	r3, #24
 8001b60:	0019      	movs	r1, r3
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <LL_TIM_OC_DisableFast+0x68>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
 8001b6a:	18cb      	adds	r3, r1, r3
 8001b6c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	183a      	adds	r2, r7, r0
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <LL_TIM_OC_DisableFast+0x6c>)
 8001b78:	5c8a      	ldrb	r2, [r1, r2]
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	408a      	lsls	r2, r1
 8001b80:	43d2      	mvns	r2, r2
 8001b82:	401a      	ands	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b004      	add	sp, #16
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	080039b4 	.word	0x080039b4
 8001b94:	080039bc 	.word	0x080039bc

08001b98 <LL_TIM_OC_EnablePreload>:
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00d      	beq.n	8001bc4 <LL_TIM_OC_EnablePreload+0x2c>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d008      	beq.n	8001bc0 <LL_TIM_OC_EnablePreload+0x28>
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d101      	bne.n	8001bbc <LL_TIM_OC_EnablePreload+0x24>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	e004      	b.n	8001bc6 <LL_TIM_OC_EnablePreload+0x2e>
 8001bbc:	2306      	movs	r3, #6
 8001bbe:	e002      	b.n	8001bc6 <LL_TIM_OC_EnablePreload+0x2e>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e000      	b.n	8001bc6 <LL_TIM_OC_EnablePreload+0x2e>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	183a      	adds	r2, r7, r0
 8001bca:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3318      	adds	r3, #24
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <LL_TIM_OC_EnablePreload+0x68>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	18cb      	adds	r3, r1, r3
 8001bdc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4907      	ldr	r1, [pc, #28]	@ (8001c04 <LL_TIM_OC_EnablePreload+0x6c>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	0019      	movs	r1, r3
 8001bec:	2308      	movs	r3, #8
 8001bee:	408b      	lsls	r3, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b004      	add	sp, #16
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	080039b4 	.word	0x080039b4
 8001c04:	080039bc 	.word	0x080039bc

08001c08 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <LL_TIM_SetClockSource+0x24>)
 8001c18:	401a      	ands	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	ffffbff8 	.word	0xffffbff8

08001c30 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2270      	movs	r2, #112	@ 0x70
 8001c40:	4393      	bics	r3, r2
 8001c42:	001a      	movs	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	605a      	str	r2, [r3, #4]
}
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	4393      	bics	r3, r2
 8001c64:	001a      	movs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <MX_TIM22_Init>:

/* USER CODE END 0 */

/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b08e      	sub	sp, #56	@ 0x38
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c7a:	2528      	movs	r5, #40	@ 0x28
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	0018      	movs	r0, r3
 8001c80:	2310      	movs	r3, #16
 8001c82:	001a      	movs	r2, r3
 8001c84:	2100      	movs	r1, #0
 8001c86:	f001 fbbf 	bl	8003408 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c8a:	2418      	movs	r4, #24
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2310      	movs	r3, #16
 8001c92:	001a      	movs	r2, r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	f001 fbb7 	bl	8003408 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	003b      	movs	r3, r7
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	2318      	movs	r3, #24
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f001 fbb0 	bl	8003408 <memset>
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM22);
 8001ca8:	2020      	movs	r0, #32
 8001caa:	f7ff ff01 	bl	8001ab0 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cb4:	197b      	adds	r3, r7, r5
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8001cba:	197b      	adds	r3, r7, r5
 8001cbc:	22fa      	movs	r2, #250	@ 0xfa
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cc2:	197b      	adds	r3, r7, r5
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 8001cc8:	197b      	adds	r3, r7, r5
 8001cca:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001ccc:	0019      	movs	r1, r3
 8001cce:	0010      	movs	r0, r2
 8001cd0:	f000 feec 	bl	8002aac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM22);
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff ff16 	bl	8001b08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001cdc:	4b38      	ldr	r3, [pc, #224]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff ff91 	bl	8001c08 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM22, LL_TIM_CHANNEL_CH1);
 8001ce6:	4b36      	ldr	r3, [pc, #216]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff54 	bl	8001b98 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001cf0:	193b      	adds	r3, r7, r4
 8001cf2:	2260      	movs	r2, #96	@ 0x60
 8001cf4:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	2202      	movs	r2, #2
 8001d06:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	482d      	ldr	r0, [pc, #180]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	2101      	movs	r1, #1
 8001d10:	f000 ff1e 	bl	8002b50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM22, LL_TIM_CHANNEL_CH1);
 8001d14:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff ff05 	bl	8001b28 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM22, LL_TIM_CHANNEL_CH2);
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d20:	2110      	movs	r1, #16
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff38 	bl	8001b98 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	4825      	ldr	r0, [pc, #148]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	2110      	movs	r1, #16
 8001d30:	f000 ff0e 	bl	8002b50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM22, LL_TIM_CHANNEL_CH2);
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d36:	2110      	movs	r1, #16
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff fef5 	bl	8001b28 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM22, LL_TIM_TRGO_RESET);
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d40:	2100      	movs	r1, #0
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff ff74 	bl	8001c30 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM22);
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <MX_TIM22_Init+0x14c>)
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ff82 	bl	8001c54 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7ff fec3 	bl	8001adc <LL_IOP_GRP1_EnableClock>
    /**TIM22 GPIO Configuration
    PB4     ------> TIM22_CH1
    PB5     ------> TIM22_CH2
    */
  GPIO_InitStruct.Pin = PWM1_Pin;
 8001d56:	003b      	movs	r3, r7
 8001d58:	2210      	movs	r2, #16
 8001d5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d5c:	003b      	movs	r3, r7
 8001d5e:	2202      	movs	r2, #2
 8001d60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d62:	003b      	movs	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d68:	003b      	movs	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d6e:	003b      	movs	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d74:	003b      	movs	r3, r7
 8001d76:	2204      	movs	r2, #4
 8001d78:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <MX_TIM22_Init+0x150>)
 8001d7e:	0019      	movs	r1, r3
 8001d80:	0010      	movs	r0, r2
 8001d82:	f000 fbe3 	bl	800254c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM2_Pin;
 8001d86:	003b      	movs	r3, r7
 8001d88:	2220      	movs	r2, #32
 8001d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d8c:	003b      	movs	r3, r7
 8001d8e:	2202      	movs	r2, #2
 8001d90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d92:	003b      	movs	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d98:	003b      	movs	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9e:	003b      	movs	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001da4:	003b      	movs	r3, r7
 8001da6:	2204      	movs	r2, #4
 8001da8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8001daa:	003b      	movs	r3, r7
 8001dac:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <MX_TIM22_Init+0x150>)
 8001dae:	0019      	movs	r1, r3
 8001db0:	0010      	movs	r0, r2
 8001db2:	f000 fbcb 	bl	800254c <LL_GPIO_Init>

}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b00e      	add	sp, #56	@ 0x38
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	40011400 	.word	0x40011400
 8001dc4:	50000400 	.word	0x50000400

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	0002      	movs	r2, r0
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dda:	d809      	bhi.n	8001df0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	001a      	movs	r2, r3
 8001de2:	231f      	movs	r3, #31
 8001de4:	401a      	ands	r2, r3
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <__NVIC_EnableIRQ+0x30>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	4091      	lsls	r1, r2
 8001dec:	000a      	movs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
  }
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	0002      	movs	r2, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e10:	d828      	bhi.n	8001e64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <__NVIC_SetPriority+0xd4>)
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	33c0      	adds	r3, #192	@ 0xc0
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	589b      	ldr	r3, [r3, r2]
 8001e22:	1dfa      	adds	r2, r7, #7
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	0011      	movs	r1, r2
 8001e28:	2203      	movs	r2, #3
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	00d2      	lsls	r2, r2, #3
 8001e2e:	21ff      	movs	r1, #255	@ 0xff
 8001e30:	4091      	lsls	r1, r2
 8001e32:	000a      	movs	r2, r1
 8001e34:	43d2      	mvns	r2, r2
 8001e36:	401a      	ands	r2, r3
 8001e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	22ff      	movs	r2, #255	@ 0xff
 8001e40:	401a      	ands	r2, r3
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	2303      	movs	r3, #3
 8001e4a:	4003      	ands	r3, r0
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e50:	481f      	ldr	r0, [pc, #124]	@ (8001ed0 <__NVIC_SetPriority+0xd4>)
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	33c0      	adds	r3, #192	@ 0xc0
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e62:	e031      	b.n	8001ec8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e64:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed4 <__NVIC_SetPriority+0xd8>)
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	400b      	ands	r3, r1
 8001e70:	3b08      	subs	r3, #8
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3306      	adds	r3, #6
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1dfa      	adds	r2, r7, #7
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	0011      	movs	r1, r2
 8001e84:	2203      	movs	r2, #3
 8001e86:	400a      	ands	r2, r1
 8001e88:	00d2      	lsls	r2, r2, #3
 8001e8a:	21ff      	movs	r1, #255	@ 0xff
 8001e8c:	4091      	lsls	r1, r2
 8001e8e:	000a      	movs	r2, r1
 8001e90:	43d2      	mvns	r2, r2
 8001e92:	401a      	ands	r2, r3
 8001e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	22ff      	movs	r2, #255	@ 0xff
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	4003      	ands	r3, r0
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eac:	4809      	ldr	r0, [pc, #36]	@ (8001ed4 <__NVIC_SetPriority+0xd8>)
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001c      	movs	r4, r3
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	4023      	ands	r3, r4
 8001eb8:	3b08      	subs	r3, #8
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	3306      	adds	r3, #6
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	18c3      	adds	r3, r0, r3
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <LL_APB1_GRP1_EnableClock>:
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ee0:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <LL_APB1_GRP1_EnableClock+0x28>)
 8001ee2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <LL_APB1_GRP1_EnableClock+0x28>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <LL_APB1_GRP1_EnableClock+0x28>)
 8001eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <LL_IOP_GRP1_EnableClock>:
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <LL_IOP_GRP1_EnableClock+0x28>)
 8001f0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <LL_IOP_GRP1_EnableClock+0x28>)
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <LL_IOP_GRP1_EnableClock+0x28>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <LL_USART_Enable>:
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <LL_USART_ConfigAsyncMode>:
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <LL_USART_ConfigAsyncMode+0x2c>)
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	222a      	movs	r2, #42	@ 0x2a
 8001f66:	4393      	bics	r3, r2
 8001f68:	001a      	movs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	ffffb7ff 	.word	0xffffb7ff

08001f7c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b08f      	sub	sp, #60	@ 0x3c
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f82:	241c      	movs	r4, #28
 8001f84:	193b      	adds	r3, r7, r4
 8001f86:	0018      	movs	r0, r3
 8001f88:	231c      	movs	r3, #28
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	f001 fa3b 	bl	8003408 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	0018      	movs	r0, r3
 8001f96:	2318      	movs	r3, #24
 8001f98:	001a      	movs	r2, r3
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f001 fa34 	bl	8003408 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff ff97 	bl	8001ed8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff ffaa 	bl	8001f04 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2202      	movs	r2, #2
 8001fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	1d3a      	adds	r2, r7, #4
 8001fd6:	23a0      	movs	r3, #160	@ 0xa0
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	0011      	movs	r1, r2
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fab5 	bl	800254c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2202      	movs	r2, #2
 8001fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2204      	movs	r2, #4
 8002004:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002006:	1d3a      	adds	r2, r7, #4
 8002008:	23a0      	movs	r3, #160	@ 0xa0
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	0011      	movs	r1, r2
 800200e:	0018      	movs	r0, r3
 8002010:	f000 fa9c 	bl	800254c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002014:	2100      	movs	r1, #0
 8002016:	201c      	movs	r0, #28
 8002018:	f7ff fef0 	bl	8001dfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800201c:	201c      	movs	r0, #28
 800201e:	f7ff fed3 	bl	8001dc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002022:	193b      	adds	r3, r7, r4
 8002024:	22e1      	movs	r2, #225	@ 0xe1
 8002026:	0252      	lsls	r2, r2, #9
 8002028:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800202a:	0021      	movs	r1, r4
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	220c      	movs	r2, #12
 8002042:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002050:	187b      	adds	r3, r7, r1
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <MX_USART2_UART_Init+0xf8>)
 8002054:	0019      	movs	r1, r3
 8002056:	0010      	movs	r0, r2
 8002058:	f000 ff74 	bl	8002f44 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <MX_USART2_UART_Init+0xf8>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff ff74 	bl	8001f4c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <MX_USART2_UART_Init+0xf8>)
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff62 	bl	8001f30 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b00f      	add	sp, #60	@ 0x3c
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	40004400 	.word	0x40004400

08002078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002078:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800207a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800207c:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800207e:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <LoopForever+0xe>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002094:	4c0b      	ldr	r4, [pc, #44]	@ (80020c4 <LoopForever+0x16>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020a2:	f7ff fcff 	bl	8001aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a6:	f001 fa0b 	bl	80034c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020aa:	f7fe fd45 	bl	8000b38 <main>

080020ae <LoopForever>:

LoopForever:
    b LoopForever
 80020ae:	e7fe      	b.n	80020ae <LoopForever>
  ldr   r0, =_estack
 80020b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80020bc:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 80020c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80020c4:	20000404 	.word	0x20000404

080020c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_COMP_IRQHandler>

080020ca <LL_ADC_IsEnabled>:
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	3b01      	subs	r3, #1
 80020dc:	425a      	negs	r2, r3
 80020de:	4153      	adcs	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020f6:	230f      	movs	r3, #15
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ffe2 	bl	80020ca <LL_ADC_IsEnabled>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d118      	bne.n	800213c <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a11      	ldr	r2, [pc, #68]	@ (8002154 <LL_ADC_Init+0x68>)
 8002110:	401a      	ands	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4319      	orrs	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	430b      	orrs	r3, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	089a      	lsrs	r2, r3, #2
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e003      	b.n	8002144 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800213c:	230f      	movs	r3, #15
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	ffff3fc7 	.word	0xffff3fc7

08002158 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002162:	230f      	movs	r3, #15
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff ffac 	bl	80020ca <LL_ADC_IsEnabled>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d115      	bne.n	80021a2 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4a0f      	ldr	r2, [pc, #60]	@ (80021b8 <LL_ADC_REG_Init+0x60>)
 800217c:	401a      	ands	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4319      	orrs	r1, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4319      	orrs	r1, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4319      	orrs	r1, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	430b      	orrs	r3, r1
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	e003      	b.n	80021aa <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80021a2:	230f      	movs	r3, #15
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80021aa:	230f      	movs	r3, #15
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	fffec23c 	.word	0xfffec23c

080021bc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	46c0      	nop			@ (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010400 	.word	0x40010400

080021dc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <LL_EXTI_DisableIT_0_31+0x20>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <LL_EXTI_DisableIT_0_31+0x20>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b002      	add	sp, #8
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	40010400 	.word	0x40010400

08002200 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]

}
 8002214:	46c0      	nop			@ (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40010400 	.word	0x40010400

08002220 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <LL_EXTI_DisableEvent_0_31+0x20>)
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	43d9      	mvns	r1, r3
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002232:	400a      	ands	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	40010400 	.word	0x40010400

08002244 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]

}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40010400 	.word	0x40010400

08002264 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	43d9      	mvns	r1, r3
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002276:	400a      	ands	r2, r1
 8002278:	609a      	str	r2, [r3, #8]

}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40010400 	.word	0x40010400

08002288 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002292:	68d9      	ldr	r1, [r3, #12]
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	430a      	orrs	r2, r1
 800229a:	60da      	str	r2, [r3, #12]
}
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010400 	.word	0x40010400

080022a8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	40010400 	.word	0x40010400

080022cc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80022d4:	230f      	movs	r3, #15
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d100      	bne.n	80022e6 <LL_EXTI_Init+0x1a>
 80022e4:	e068      	b.n	80023b8 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <LL_EXTI_Init+0x24>
 80022ee:	e06d      	b.n	80023cc <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	795b      	ldrb	r3, [r3, #5]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d01b      	beq.n	8002330 <LL_EXTI_Init+0x64>
 80022f8:	dc25      	bgt.n	8002346 <LL_EXTI_Init+0x7a>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <LL_EXTI_Init+0x38>
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d00b      	beq.n	800231a <LL_EXTI_Init+0x4e>
 8002302:	e020      	b.n	8002346 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ff89 	bl	8002220 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff ff52 	bl	80021bc <LL_EXTI_EnableIT_0_31>
          break;
 8002318:	e01a      	b.n	8002350 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff ff5c 	bl	80021dc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff69 	bl	8002200 <LL_EXTI_EnableEvent_0_31>
          break;
 800232e:	e00f      	b.n	8002350 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ff41 	bl	80021bc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	f7ff ff5e 	bl	8002200 <LL_EXTI_EnableEvent_0_31>
          break;
 8002344:	e004      	b.n	8002350 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002346:	230f      	movs	r3, #15
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
          break;
 800234e:	46c0      	nop			@ (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	799b      	ldrb	r3, [r3, #6]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d039      	beq.n	80023cc <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	799b      	ldrb	r3, [r3, #6]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d01b      	beq.n	8002398 <LL_EXTI_Init+0xcc>
 8002360:	dc25      	bgt.n	80023ae <LL_EXTI_Init+0xe2>
 8002362:	2b01      	cmp	r3, #1
 8002364:	d002      	beq.n	800236c <LL_EXTI_Init+0xa0>
 8002366:	2b02      	cmp	r3, #2
 8002368:	d00b      	beq.n	8002382 <LL_EXTI_Init+0xb6>
 800236a:	e020      	b.n	80023ae <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff ff99 	bl	80022a8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff ff62 	bl	8002244 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002380:	e024      	b.n	80023cc <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ff6c 	bl	8002264 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff ff79 	bl	8002288 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002396:	e019      	b.n	80023cc <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff ff51 	bl	8002244 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff ff6e 	bl	8002288 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80023ac:	e00e      	b.n	80023cc <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 80023ae:	230f      	movs	r3, #15
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
            break;
 80023b6:	e009      	b.n	80023cc <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff0d 	bl	80021dc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7ff ff2a 	bl	8002220 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	781b      	ldrb	r3, [r3, #0]
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}

080023da <LL_GPIO_SetPinMode>:
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	435b      	muls	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	0013      	movs	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	43db      	mvns	r3, r3
 80023f8:	400b      	ands	r3, r1
 80023fa:	001a      	movs	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	435b      	muls	r3, r3
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	434b      	muls	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}

08002412 <LL_GPIO_SetPinOutputType>:
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	43d2      	mvns	r2, r2
 8002426:	401a      	ands	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	434b      	muls	r3, r1
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
}
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bd80      	pop	{r7, pc}

0800243c <LL_GPIO_SetPinSpeed>:
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	435b      	muls	r3, r3
 8002450:	001a      	movs	r2, r3
 8002452:	0013      	movs	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	189b      	adds	r3, r3, r2
 8002458:	43db      	mvns	r3, r3
 800245a:	400b      	ands	r3, r1
 800245c:	001a      	movs	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	435b      	muls	r3, r3
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	434b      	muls	r3, r1
 8002466:	431a      	orrs	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	609a      	str	r2, [r3, #8]
}
 800246c:	46c0      	nop			@ (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}

08002474 <LL_GPIO_SetPinPull>:
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	435b      	muls	r3, r3
 8002488:	001a      	movs	r2, r3
 800248a:	0013      	movs	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	189b      	adds	r3, r3, r2
 8002490:	43db      	mvns	r3, r3
 8002492:	400b      	ands	r3, r1
 8002494:	001a      	movs	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	435b      	muls	r3, r3
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	434b      	muls	r3, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	46c0      	nop			@ (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b004      	add	sp, #16
 80024aa:	bd80      	pop	{r7, pc}

080024ac <LL_GPIO_SetAFPin_0_7>:
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a19      	ldr	r1, [r3, #32]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	435b      	muls	r3, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4353      	muls	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	435a      	muls	r2, r3
 80024c8:	0013      	movs	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	43db      	mvns	r3, r3
 80024d0:	400b      	ands	r3, r1
 80024d2:	001a      	movs	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	435b      	muls	r3, r3
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	434b      	muls	r3, r1
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	434b      	muls	r3, r1
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	434b      	muls	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b004      	add	sp, #16
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <LL_GPIO_SetAFPin_8_15>:
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	0a12      	lsrs	r2, r2, #8
 800250a:	4353      	muls	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	0a12      	lsrs	r2, r2, #8
 8002510:	4353      	muls	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	0a12      	lsrs	r2, r2, #8
 8002516:	435a      	muls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	43db      	mvns	r3, r3
 8002520:	400b      	ands	r3, r1
 8002522:	001a      	movs	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	0a09      	lsrs	r1, r1, #8
 800252c:	434b      	muls	r3, r1
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	0a09      	lsrs	r1, r1, #8
 8002532:	434b      	muls	r3, r1
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	0a09      	lsrs	r1, r1, #8
 8002538:	434b      	muls	r3, r1
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	434b      	muls	r3, r1
 800253e:	431a      	orrs	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002544:	46c0      	nop			@ (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b004      	add	sp, #16
 800254a:	bd80      	pop	{r7, pc}

0800254c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800255e:	e048      	b.n	80025f2 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4091      	lsls	r1, r2
 800256a:	000a      	movs	r2, r1
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03a      	beq.n	80025ec <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d003      	beq.n	8002586 <LL_GPIO_Init+0x3a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d10e      	bne.n	80025a4 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f7ff ff54 	bl	800243c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff ff37 	bl	8002412 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff ff61 	bl	8002474 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d111      	bne.n	80025de <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2bff      	cmp	r3, #255	@ 0xff
 80025be:	d807      	bhi.n	80025d0 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff ff6f 	bl	80024ac <LL_GPIO_SetAFPin_0_7>
 80025ce:	e006      	b.n	80025de <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ff8a 	bl	80024f2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff fef7 	bl	80023da <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	40da      	lsrs	r2, r3
 80025fa:	1e13      	subs	r3, r2, #0
 80025fc:	d1b0      	bne.n	8002560 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80025fe:	2300      	movs	r3, #0
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b004      	add	sp, #16
 8002606:	bd80      	pop	{r7, pc}

08002608 <LL_RCC_HSI_IsReady>:
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <LL_RCC_HSI_IsReady+0x1c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2204      	movs	r2, #4
 8002612:	4013      	ands	r3, r2
 8002614:	2b04      	cmp	r3, #4
 8002616:	d101      	bne.n	800261c <LL_RCC_HSI_IsReady+0x14>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_RCC_HSI_IsReady+0x16>
 800261c:	2300      	movs	r3, #0
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000

08002628 <LL_RCC_LSE_IsReady>:
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800262c:	4b07      	ldr	r3, [pc, #28]	@ (800264c <LL_RCC_LSE_IsReady+0x24>)
 800262e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	401a      	ands	r2, r3
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	429a      	cmp	r2, r3
 800263c:	d101      	bne.n	8002642 <LL_RCC_LSE_IsReady+0x1a>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_RCC_LSE_IsReady+0x1c>
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	40021000 	.word	0x40021000

08002650 <LL_RCC_MSI_GetRange>:
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <LL_RCC_MSI_GetRange+0x14>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	23e0      	movs	r3, #224	@ 0xe0
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	4013      	ands	r3, r2
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000

08002668 <LL_RCC_GetSysClkSource>:
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <LL_RCC_GetSysClkSource+0x14>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	220c      	movs	r2, #12
 8002672:	4013      	ands	r3, r2
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	40021000 	.word	0x40021000

08002680 <LL_RCC_GetAHBPrescaler>:
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <LL_RCC_GetAHBPrescaler+0x14>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	22f0      	movs	r2, #240	@ 0xf0
 800268a:	4013      	ands	r3, r2
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40021000 	.word	0x40021000

08002698 <LL_RCC_GetAPB1Prescaler>:
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	23e0      	movs	r3, #224	@ 0xe0
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4013      	ands	r3, r2
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <LL_RCC_GetAPB2Prescaler>:
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <LL_RCC_GetAPB2Prescaler+0x14>)
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	23e0      	movs	r3, #224	@ 0xe0
 80026ba:	019b      	lsls	r3, r3, #6
 80026bc:	4013      	ands	r3, r2
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <LL_RCC_GetUSARTClockSource>:
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <LL_RCC_GetUSARTClockSource+0x20>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	4313      	orrs	r3, r2
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	40021000 	.word	0x40021000

080026ec <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <LL_RCC_PLL_GetMainSource+0x14>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	4013      	ands	r3, r2
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	23f0      	movs	r3, #240	@ 0xf0
 800270e:	039b      	lsls	r3, r3, #14
 8002710:	4013      	ands	r3, r2
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002720:	4b03      	ldr	r3, [pc, #12]	@ (8002730 <LL_RCC_PLL_GetDivider+0x14>)
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	23c0      	movs	r3, #192	@ 0xc0
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	4013      	ands	r3, r2
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000

08002734 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2210      	movs	r2, #16
 800273e:	4013      	ands	r3, r2
 8002740:	2b10      	cmp	r3, #16
 8002742:	d101      	bne.n	8002748 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8002748:	2300      	movs	r3, #0
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000

08002754 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d13c      	bne.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff ffad 	bl	80026c8 <LL_RCC_GetUSARTClockSource>
 800276e:	0003      	movs	r3, r0
 8002770:	4a3e      	ldr	r2, [pc, #248]	@ (800286c <LL_RCC_GetUSARTClockFreq+0x118>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01c      	beq.n	80027b0 <LL_RCC_GetUSARTClockFreq+0x5c>
 8002776:	4a3d      	ldr	r2, [pc, #244]	@ (800286c <LL_RCC_GetUSARTClockFreq+0x118>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d821      	bhi.n	80027c0 <LL_RCC_GetUSARTClockFreq+0x6c>
 800277c:	4a3c      	ldr	r2, [pc, #240]	@ (8002870 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <LL_RCC_GetUSARTClockFreq+0x36>
 8002782:	4a3c      	ldr	r2, [pc, #240]	@ (8002874 <LL_RCC_GetUSARTClockFreq+0x120>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d005      	beq.n	8002794 <LL_RCC_GetUSARTClockFreq+0x40>
 8002788:	e01a      	b.n	80027c0 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800278a:	f000 f87f 	bl	800288c <RCC_GetSystemClockFreq>
 800278e:	0003      	movs	r3, r0
 8002790:	60fb      	str	r3, [r7, #12]
        break;
 8002792:	e025      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002794:	f7ff ff38 	bl	8002608 <LL_RCC_HSI_IsReady>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d01e      	beq.n	80027da <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800279c:	f7ff ffca 	bl	8002734 <LL_RCC_IsActiveFlag_HSIDIV>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d002      	beq.n	80027aa <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <LL_RCC_GetUSARTClockFreq+0x124>)
 80027a6:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80027a8:	e017      	b.n	80027da <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 80027aa:	4b34      	ldr	r3, [pc, #208]	@ (800287c <LL_RCC_GetUSARTClockFreq+0x128>)
 80027ac:	60fb      	str	r3, [r7, #12]
        break;
 80027ae:	e014      	b.n	80027da <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80027b0:	f7ff ff3a 	bl	8002628 <LL_RCC_LSE_IsReady>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	d012      	beq.n	80027de <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 80027b8:	2380      	movs	r3, #128	@ 0x80
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027be:	e00e      	b.n	80027de <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027c0:	f000 f864 	bl	800288c <RCC_GetSystemClockFreq>
 80027c4:	0003      	movs	r3, r0
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f8a4 	bl	8002914 <RCC_GetHCLKClockFreq>
 80027cc:	0003      	movs	r3, r0
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f8ca 	bl	8002968 <RCC_GetPCLK2ClockFreq>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]
        break;
 80027d8:	e002      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	e000      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 80027de:	46c0      	nop			@ (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d13c      	bne.n	8002860 <LL_RCC_GetUSARTClockFreq+0x10c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ff6d 	bl	80026c8 <LL_RCC_GetUSARTClockSource>
 80027ee:	0003      	movs	r3, r0
 80027f0:	4a23      	ldr	r2, [pc, #140]	@ (8002880 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01c      	beq.n	8002830 <LL_RCC_GetUSARTClockFreq+0xdc>
 80027f6:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d821      	bhi.n	8002840 <LL_RCC_GetUSARTClockFreq+0xec>
 80027fc:	4a21      	ldr	r2, [pc, #132]	@ (8002884 <LL_RCC_GetUSARTClockFreq+0x130>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <LL_RCC_GetUSARTClockFreq+0xb6>
 8002802:	4a21      	ldr	r2, [pc, #132]	@ (8002888 <LL_RCC_GetUSARTClockFreq+0x134>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d005      	beq.n	8002814 <LL_RCC_GetUSARTClockFreq+0xc0>
 8002808:	e01a      	b.n	8002840 <LL_RCC_GetUSARTClockFreq+0xec>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800280a:	f000 f83f 	bl	800288c <RCC_GetSystemClockFreq>
 800280e:	0003      	movs	r3, r0
 8002810:	60fb      	str	r3, [r7, #12]
        break;
 8002812:	e025      	b.n	8002860 <LL_RCC_GetUSARTClockFreq+0x10c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002814:	f7ff fef8 	bl	8002608 <LL_RCC_HSI_IsReady>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d01e      	beq.n	800285a <LL_RCC_GetUSARTClockFreq+0x106>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800281c:	f7ff ff8a 	bl	8002734 <LL_RCC_IsActiveFlag_HSIDIV>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d002      	beq.n	800282a <LL_RCC_GetUSARTClockFreq+0xd6>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <LL_RCC_GetUSARTClockFreq+0x124>)
 8002826:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002828:	e017      	b.n	800285a <LL_RCC_GetUSARTClockFreq+0x106>
            usart_frequency = HSI_VALUE;
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <LL_RCC_GetUSARTClockFreq+0x128>)
 800282c:	60fb      	str	r3, [r7, #12]
        break;
 800282e:	e014      	b.n	800285a <LL_RCC_GetUSARTClockFreq+0x106>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002830:	f7ff fefa 	bl	8002628 <LL_RCC_LSE_IsReady>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d012      	beq.n	800285e <LL_RCC_GetUSARTClockFreq+0x10a>
        {
          usart_frequency = LSE_VALUE;
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800283e:	e00e      	b.n	800285e <LL_RCC_GetUSARTClockFreq+0x10a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002840:	f000 f824 	bl	800288c <RCC_GetSystemClockFreq>
 8002844:	0003      	movs	r3, r0
 8002846:	0018      	movs	r0, r3
 8002848:	f000 f864 	bl	8002914 <RCC_GetHCLKClockFreq>
 800284c:	0003      	movs	r3, r0
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f876 	bl	8002940 <RCC_GetPCLK1ClockFreq>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]
        break;
 8002858:	e002      	b.n	8002860 <LL_RCC_GetUSARTClockFreq+0x10c>
        break;
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	e000      	b.n	8002860 <LL_RCC_GetUSARTClockFreq+0x10c>
        break;
 800285e:	46c0      	nop			@ (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8002860:	68fb      	ldr	r3, [r7, #12]
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	00030003 	.word	0x00030003
 8002870:	00030001 	.word	0x00030001
 8002874:	00030002 	.word	0x00030002
 8002878:	003d0900 	.word	0x003d0900
 800287c:	00f42400 	.word	0x00f42400
 8002880:	000c000c 	.word	0x000c000c
 8002884:	000c0004 	.word	0x000c0004
 8002888:	000c0008 	.word	0x000c0008

0800288c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002892:	f7ff fee9 	bl	8002668 <LL_RCC_GetSysClkSource>
 8002896:	0003      	movs	r3, r0
 8002898:	2b0c      	cmp	r3, #12
 800289a:	d020      	beq.n	80028de <RCC_GetSystemClockFreq+0x52>
 800289c:	d824      	bhi.n	80028e8 <RCC_GetSystemClockFreq+0x5c>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d01a      	beq.n	80028d8 <RCC_GetSystemClockFreq+0x4c>
 80028a2:	d821      	bhi.n	80028e8 <RCC_GetSystemClockFreq+0x5c>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <RCC_GetSystemClockFreq+0x22>
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00b      	beq.n	80028c4 <RCC_GetSystemClockFreq+0x38>
 80028ac:	e01c      	b.n	80028e8 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028ae:	f7ff fecf 	bl	8002650 <LL_RCC_MSI_GetRange>
 80028b2:	0003      	movs	r3, r0
 80028b4:	0b5b      	lsrs	r3, r3, #13
 80028b6:	3301      	adds	r3, #1
 80028b8:	2280      	movs	r2, #128	@ 0x80
 80028ba:	0212      	lsls	r2, r2, #8
 80028bc:	409a      	lsls	r2, r3
 80028be:	0013      	movs	r3, r2
 80028c0:	607b      	str	r3, [r7, #4]
      break;
 80028c2:	e01c      	b.n	80028fe <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80028c4:	f7ff ff36 	bl	8002734 <LL_RCC_IsActiveFlag_HSIDIV>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d002      	beq.n	80028d2 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 80028cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <RCC_GetSystemClockFreq+0x7c>)
 80028ce:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 80028d0:	e015      	b.n	80028fe <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <RCC_GetSystemClockFreq+0x80>)
 80028d4:	607b      	str	r3, [r7, #4]
      break;
 80028d6:	e012      	b.n	80028fe <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 80028d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <RCC_GetSystemClockFreq+0x84>)
 80028da:	607b      	str	r3, [r7, #4]
      break;
 80028dc:	e00f      	b.n	80028fe <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80028de:	f000 f857 	bl	8002990 <RCC_PLL_GetFreqDomain_SYS>
 80028e2:	0003      	movs	r3, r0
 80028e4:	607b      	str	r3, [r7, #4]
      break;
 80028e6:	e00a      	b.n	80028fe <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028e8:	f7ff feb2 	bl	8002650 <LL_RCC_MSI_GetRange>
 80028ec:	0003      	movs	r3, r0
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	3301      	adds	r3, #1
 80028f2:	2280      	movs	r2, #128	@ 0x80
 80028f4:	0212      	lsls	r2, r2, #8
 80028f6:	409a      	lsls	r2, r3
 80028f8:	0013      	movs	r3, r2
 80028fa:	607b      	str	r3, [r7, #4]
      break;
 80028fc:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80028fe:	687b      	ldr	r3, [r7, #4]
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}
 8002908:	003d0900 	.word	0x003d0900
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800291c:	f7ff feb0 	bl	8002680 <LL_RCC_GetAHBPrescaler>
 8002920:	0003      	movs	r3, r0
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	220f      	movs	r2, #15
 8002926:	4013      	ands	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	@ (800293c <RCC_GetHCLKClockFreq+0x28>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	001a      	movs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	40d3      	lsrs	r3, r2
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	08003990 	.word	0x08003990

08002940 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002948:	f7ff fea6 	bl	8002698 <LL_RCC_GetAPB1Prescaler>
 800294c:	0003      	movs	r3, r0
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <RCC_GetPCLK1ClockFreq+0x24>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	001a      	movs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	40d3      	lsrs	r3, r2
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	080039a0 	.word	0x080039a0

08002968 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002970:	f7ff fe9e 	bl	80026b0 <LL_RCC_GetAPB2Prescaler>
 8002974:	0003      	movs	r3, r0
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	4a04      	ldr	r2, [pc, #16]	@ (800298c <RCC_GetPCLK2ClockFreq+0x24>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	001a      	movs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	40d3      	lsrs	r3, r2
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	080039a0 	.word	0x080039a0

08002990 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002996:	f7ff fea9 	bl	80026ec <LL_RCC_PLL_GetMainSource>
 800299a:	0003      	movs	r3, r0
 800299c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80029a4:	f7ff fec6 	bl	8002734 <LL_RCC_IsActiveFlag_HSIDIV>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d002      	beq.n	80029b2 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 80029ac:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80029ae:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 80029b0:	e005      	b.n	80029be <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80029b4:	607b      	str	r3, [r7, #4]
      break;
 80029b6:	e002      	b.n	80029be <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80029ba:	607b      	str	r3, [r7, #4]
      break;
 80029bc:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80029be:	f7ff fea1 	bl	8002704 <LL_RCC_PLL_GetMultiplicator>
 80029c2:	0003      	movs	r3, r0
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	001a      	movs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4353      	muls	r3, r2
 80029d0:	001c      	movs	r4, r3
 80029d2:	f7ff fea3 	bl	800271c <LL_RCC_PLL_GetDivider>
 80029d6:	0003      	movs	r3, r0
 80029d8:	0d9b      	lsrs	r3, r3, #22
 80029da:	3301      	adds	r3, #1
 80029dc:	0019      	movs	r1, r3
 80029de:	0020      	movs	r0, r4
 80029e0:	f7fd fb92 	bl	8000108 <__udivsi3>
 80029e4:	0003      	movs	r3, r0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b003      	add	sp, #12
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	003d0900 	.word	0x003d0900
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	080039a8 	.word	0x080039a8

08002a00 <LL_TIM_SetPrescaler>:
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <LL_TIM_SetAutoReload>:
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <LL_TIM_OC_SetCompareCH1>:
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <LL_TIM_OC_SetCompareCH2>:
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <LL_TIM_OC_SetCompareCH3>:
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <LL_TIM_OC_SetCompareCH4>:
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002a88:	46c0      	nop			@ (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	615a      	str	r2, [r3, #20]
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	05db      	lsls	r3, r3, #23
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d007      	beq.n	8002ad6 <LL_TIM_Init+0x2a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <LL_TIM_Init+0x98>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <LL_TIM_Init+0x2a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b48 <LL_TIM_Init+0x9c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d107      	bne.n	8002ae6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2270      	movs	r2, #112	@ 0x70
 8002ada:	4393      	bics	r3, r2
 8002adc:	001a      	movs	r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	05db      	lsls	r3, r3, #23
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d007      	beq.n	8002b00 <LL_TIM_Init+0x54>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <LL_TIM_Init+0x98>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <LL_TIM_Init+0x54>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <LL_TIM_Init+0x9c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d106      	bne.n	8002b0e <LL_TIM_Init+0x62>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <LL_TIM_Init+0xa0>)
 8002b04:	401a      	ands	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7ff ff7b 	bl	8002a18 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	001a      	movs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ff67 	bl	8002a00 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ffab 	bl	8002a90 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b004      	add	sp, #16
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40010800 	.word	0x40010800
 8002b48:	40011400 	.word	0x40011400
 8002b4c:	fffffcff 	.word	0xfffffcff

08002b50 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002b5c:	2317      	movs	r3, #23
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	015b      	lsls	r3, r3, #5
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d036      	beq.n	8002bdc <LL_TIM_OC_Init+0x8c>
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	015b      	lsls	r3, r3, #5
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d83c      	bhi.n	8002bf2 <LL_TIM_OC_Init+0xa2>
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d021      	beq.n	8002bc6 <LL_TIM_OC_Init+0x76>
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d832      	bhi.n	8002bf2 <LL_TIM_OC_Init+0xa2>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d003      	beq.n	8002b9a <LL_TIM_OC_Init+0x4a>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d00b      	beq.n	8002bb0 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002b98:	e02b      	b.n	8002bf2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002b9a:	2317      	movs	r3, #23
 8002b9c:	18fc      	adds	r4, r7, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f82c 	bl	8002c02 <OC1Config>
 8002baa:	0003      	movs	r3, r0
 8002bac:	7023      	strb	r3, [r4, #0]
      break;
 8002bae:	e021      	b.n	8002bf4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002bb0:	2317      	movs	r3, #23
 8002bb2:	18fc      	adds	r4, r7, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f868 	bl	8002c90 <OC2Config>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	7023      	strb	r3, [r4, #0]
      break;
 8002bc4:	e016      	b.n	8002bf4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002bc6:	2317      	movs	r3, #23
 8002bc8:	18fc      	adds	r4, r7, r3
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f8a9 	bl	8002d28 <OC3Config>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	7023      	strb	r3, [r4, #0]
      break;
 8002bda:	e00b      	b.n	8002bf4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002bdc:	2317      	movs	r3, #23
 8002bde:	18fc      	adds	r4, r7, r3
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	0011      	movs	r1, r2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8e8 	bl	8002dbc <OC4Config>
 8002bec:	0003      	movs	r3, r0
 8002bee:	7023      	strb	r3, [r4, #0]
      break;
 8002bf0:	e000      	b.n	8002bf4 <LL_TIM_OC_Init+0xa4>
      break;
 8002bf2:	46c0      	nop			@ (mov r8, r8)
  }

  return result;
 8002bf4:	2317      	movs	r3, #23
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b007      	add	sp, #28
 8002c00:	bd90      	pop	{r4, r7, pc}

08002c02 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4393      	bics	r3, r2
 8002c14:	001a      	movs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	4393      	bics	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2270      	movs	r2, #112	@ 0x70
 8002c38:	4393      	bics	r3, r2
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2202      	movs	r2, #2
 8002c48:	4393      	bics	r3, r2
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4393      	bics	r3, r2
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7ff fed9 	bl	8002a30 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <OC2Config+0x90>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <OC2Config+0x94>)
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	001a      	movs	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	4393      	bics	r3, r2
 8002cea:	001a      	movs	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0011      	movs	r1, r2
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7ff fe9c 	bl	8002a48 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b006      	add	sp, #24
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	fffffcff 	.word	0xfffffcff
 8002d24:	ffff8fff 	.word	0xffff8fff

08002d28 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a1f      	ldr	r2, [pc, #124]	@ (8002db4 <OC3Config+0x8c>)
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2203      	movs	r2, #3
 8002d54:	4393      	bics	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2270      	movs	r2, #112	@ 0x70
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	001a      	movs	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <OC3Config+0x90>)
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002db4 <OC3Config+0x8c>)
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff fe5f 	bl	8002a60 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b006      	add	sp, #24
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	fffffeff 	.word	0xfffffeff
 8002db8:	fffffdff 	.word	0xfffffdff

08002dbc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	@ (8002e48 <OC4Config+0x8c>)
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <OC4Config+0x90>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a18      	ldr	r2, [pc, #96]	@ (8002e50 <OC4Config+0x94>)
 8002df0:	401a      	ands	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	4a15      	ldr	r2, [pc, #84]	@ (8002e54 <OC4Config+0x98>)
 8002e00:	401a      	ands	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	031b      	lsls	r3, r3, #12
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <OC4Config+0x8c>)
 8002e10:	401a      	ands	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	031b      	lsls	r3, r3, #12
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fe21 	bl	8002a78 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b006      	add	sp, #24
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	ffffefff 	.word	0xffffefff
 8002e4c:	fffffcff 	.word	0xfffffcff
 8002e50:	ffff8fff 	.word	0xffff8fff
 8002e54:	ffffdfff 	.word	0xffffdfff

08002e58 <LL_USART_IsEnabled>:
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <LL_USART_IsEnabled+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_USART_IsEnabled+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <LL_USART_SetStopBitsLength>:
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <LL_USART_SetStopBitsLength+0x24>)
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	605a      	str	r2, [r3, #4]
}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	ffffcfff 	.word	0xffffcfff

08002ea4 <LL_USART_SetHWFlowCtrl>:
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a05      	ldr	r2, [pc, #20]	@ (8002ec8 <LL_USART_SetHWFlowCtrl+0x24>)
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	fffffcff 	.word	0xfffffcff

08002ecc <LL_USART_SetBaudRate>:
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d11c      	bne.n	8002f1e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	005a      	lsls	r2, r3, #1
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	18d3      	adds	r3, r2, r3
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd f909 	bl	8000108 <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <LL_USART_SetBaudRate+0x74>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	4013      	ands	r3, r2
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	e00c      	b.n	8002f38 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	085a      	lsrs	r2, r3, #1
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	18d3      	adds	r3, r2, r3
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7fd f8ed 	bl	8000108 <__udivsi3>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	001a      	movs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b006      	add	sp, #24
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	0000fff0 	.word	0x0000fff0

08002f44 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002f4e:	230f      	movs	r3, #15
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ff7b 	bl	8002e58 <LL_USART_IsEnabled>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d145      	bne.n	8002ff2 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <LL_USART_Init+0xbc>)
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4319      	orrs	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	4319      	orrs	r1, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0011      	movs	r1, r2
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7ff ff72 	bl	8002e7c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff ff7f 	bl	8002ea4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <LL_USART_Init+0xc0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d105      	bne.n	8002fba <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002fae:	2003      	movs	r0, #3
 8002fb0:	f7ff fbd0 	bl	8002754 <LL_RCC_GetUSARTClockFreq>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	e008      	b.n	8002fcc <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <LL_USART_Init+0xc4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d104      	bne.n	8002fcc <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002fc2:	200c      	movs	r0, #12
 8002fc4:	f7ff fbc6 	bl	8002754 <LL_RCC_GetUSARTClockFreq>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00f      	beq.n	8002ff2 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8002fda:	230f      	movs	r3, #15
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff6d 	bl	8002ecc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	efff69f3 	.word	0xefff69f3
 8003004:	40013800 	.word	0x40013800
 8003008:	40004400 	.word	0x40004400

0800300c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003016:	6839      	ldr	r1, [r7, #0]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7fd f875 	bl	8000108 <__udivsi3>
 800301e:	0003      	movs	r3, r0
 8003020:	001a      	movs	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <LL_InitTick+0x30>)
 8003024:	3a01      	subs	r2, #1
 8003026:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <LL_InitTick+0x30>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b03      	ldr	r3, [pc, #12]	@ (800303c <LL_InitTick+0x30>)
 8003030:	2205      	movs	r2, #5
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}
 800303c:	e000e010 	.word	0xe000e010

08003040 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003048:	23fa      	movs	r3, #250	@ 0xfa
 800304a:	009a      	lsls	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff ffdb 	bl	800300c <LL_InitTick>
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <LL_SetSystemCoreClock+0x18>)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	20000008 	.word	0x20000008

0800307c <std>:
 800307c:	2300      	movs	r3, #0
 800307e:	b510      	push	{r4, lr}
 8003080:	0004      	movs	r4, r0
 8003082:	6003      	str	r3, [r0, #0]
 8003084:	6043      	str	r3, [r0, #4]
 8003086:	6083      	str	r3, [r0, #8]
 8003088:	8181      	strh	r1, [r0, #12]
 800308a:	6643      	str	r3, [r0, #100]	@ 0x64
 800308c:	81c2      	strh	r2, [r0, #14]
 800308e:	6103      	str	r3, [r0, #16]
 8003090:	6143      	str	r3, [r0, #20]
 8003092:	6183      	str	r3, [r0, #24]
 8003094:	0019      	movs	r1, r3
 8003096:	2208      	movs	r2, #8
 8003098:	305c      	adds	r0, #92	@ 0x5c
 800309a:	f000 f9b5 	bl	8003408 <memset>
 800309e:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <std+0x50>)
 80030a0:	6224      	str	r4, [r4, #32]
 80030a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80030a4:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <std+0x54>)
 80030a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <std+0x58>)
 80030aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030ac:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <std+0x5c>)
 80030ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <std+0x60>)
 80030b2:	429c      	cmp	r4, r3
 80030b4:	d005      	beq.n	80030c2 <std+0x46>
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <std+0x64>)
 80030b8:	429c      	cmp	r4, r3
 80030ba:	d002      	beq.n	80030c2 <std+0x46>
 80030bc:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <std+0x68>)
 80030be:	429c      	cmp	r4, r3
 80030c0:	d103      	bne.n	80030ca <std+0x4e>
 80030c2:	0020      	movs	r0, r4
 80030c4:	3058      	adds	r0, #88	@ 0x58
 80030c6:	f000 fa1f 	bl	8003508 <__retarget_lock_init_recursive>
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	08003371 	.word	0x08003371
 80030d0:	08003399 	.word	0x08003399
 80030d4:	080033d1 	.word	0x080033d1
 80030d8:	080033fd 	.word	0x080033fd
 80030dc:	200002b8 	.word	0x200002b8
 80030e0:	20000320 	.word	0x20000320
 80030e4:	20000388 	.word	0x20000388

080030e8 <stdio_exit_handler>:
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4a03      	ldr	r2, [pc, #12]	@ (80030f8 <stdio_exit_handler+0x10>)
 80030ec:	4903      	ldr	r1, [pc, #12]	@ (80030fc <stdio_exit_handler+0x14>)
 80030ee:	4804      	ldr	r0, [pc, #16]	@ (8003100 <stdio_exit_handler+0x18>)
 80030f0:	f000 f86c 	bl	80031cc <_fwalk_sglue>
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	2000000c 	.word	0x2000000c
 80030fc:	08003829 	.word	0x08003829
 8003100:	2000001c 	.word	0x2000001c

08003104 <cleanup_stdio>:
 8003104:	6841      	ldr	r1, [r0, #4]
 8003106:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <cleanup_stdio+0x30>)
 8003108:	b510      	push	{r4, lr}
 800310a:	0004      	movs	r4, r0
 800310c:	4299      	cmp	r1, r3
 800310e:	d001      	beq.n	8003114 <cleanup_stdio+0x10>
 8003110:	f000 fb8a 	bl	8003828 <_fflush_r>
 8003114:	68a1      	ldr	r1, [r4, #8]
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <cleanup_stdio+0x34>)
 8003118:	4299      	cmp	r1, r3
 800311a:	d002      	beq.n	8003122 <cleanup_stdio+0x1e>
 800311c:	0020      	movs	r0, r4
 800311e:	f000 fb83 	bl	8003828 <_fflush_r>
 8003122:	68e1      	ldr	r1, [r4, #12]
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <cleanup_stdio+0x38>)
 8003126:	4299      	cmp	r1, r3
 8003128:	d002      	beq.n	8003130 <cleanup_stdio+0x2c>
 800312a:	0020      	movs	r0, r4
 800312c:	f000 fb7c 	bl	8003828 <_fflush_r>
 8003130:	bd10      	pop	{r4, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	200002b8 	.word	0x200002b8
 8003138:	20000320 	.word	0x20000320
 800313c:	20000388 	.word	0x20000388

08003140 <global_stdio_init.part.0>:
 8003140:	b510      	push	{r4, lr}
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <global_stdio_init.part.0+0x28>)
 8003144:	4a09      	ldr	r2, [pc, #36]	@ (800316c <global_stdio_init.part.0+0x2c>)
 8003146:	2104      	movs	r1, #4
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	4809      	ldr	r0, [pc, #36]	@ (8003170 <global_stdio_init.part.0+0x30>)
 800314c:	2200      	movs	r2, #0
 800314e:	f7ff ff95 	bl	800307c <std>
 8003152:	2201      	movs	r2, #1
 8003154:	2109      	movs	r1, #9
 8003156:	4807      	ldr	r0, [pc, #28]	@ (8003174 <global_stdio_init.part.0+0x34>)
 8003158:	f7ff ff90 	bl	800307c <std>
 800315c:	2202      	movs	r2, #2
 800315e:	2112      	movs	r1, #18
 8003160:	4805      	ldr	r0, [pc, #20]	@ (8003178 <global_stdio_init.part.0+0x38>)
 8003162:	f7ff ff8b 	bl	800307c <std>
 8003166:	bd10      	pop	{r4, pc}
 8003168:	200003f0 	.word	0x200003f0
 800316c:	080030e9 	.word	0x080030e9
 8003170:	200002b8 	.word	0x200002b8
 8003174:	20000320 	.word	0x20000320
 8003178:	20000388 	.word	0x20000388

0800317c <__sfp_lock_acquire>:
 800317c:	b510      	push	{r4, lr}
 800317e:	4802      	ldr	r0, [pc, #8]	@ (8003188 <__sfp_lock_acquire+0xc>)
 8003180:	f000 f9c3 	bl	800350a <__retarget_lock_acquire_recursive>
 8003184:	bd10      	pop	{r4, pc}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	200003f9 	.word	0x200003f9

0800318c <__sfp_lock_release>:
 800318c:	b510      	push	{r4, lr}
 800318e:	4802      	ldr	r0, [pc, #8]	@ (8003198 <__sfp_lock_release+0xc>)
 8003190:	f000 f9bc 	bl	800350c <__retarget_lock_release_recursive>
 8003194:	bd10      	pop	{r4, pc}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	200003f9 	.word	0x200003f9

0800319c <__sinit>:
 800319c:	b510      	push	{r4, lr}
 800319e:	0004      	movs	r4, r0
 80031a0:	f7ff ffec 	bl	800317c <__sfp_lock_acquire>
 80031a4:	6a23      	ldr	r3, [r4, #32]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <__sinit+0x14>
 80031aa:	f7ff ffef 	bl	800318c <__sfp_lock_release>
 80031ae:	bd10      	pop	{r4, pc}
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <__sinit+0x28>)
 80031b2:	6223      	str	r3, [r4, #32]
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <__sinit+0x2c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f6      	bne.n	80031aa <__sinit+0xe>
 80031bc:	f7ff ffc0 	bl	8003140 <global_stdio_init.part.0>
 80031c0:	e7f3      	b.n	80031aa <__sinit+0xe>
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	08003105 	.word	0x08003105
 80031c8:	200003f0 	.word	0x200003f0

080031cc <_fwalk_sglue>:
 80031cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ce:	0014      	movs	r4, r2
 80031d0:	2600      	movs	r6, #0
 80031d2:	9000      	str	r0, [sp, #0]
 80031d4:	9101      	str	r1, [sp, #4]
 80031d6:	68a5      	ldr	r5, [r4, #8]
 80031d8:	6867      	ldr	r7, [r4, #4]
 80031da:	3f01      	subs	r7, #1
 80031dc:	d504      	bpl.n	80031e8 <_fwalk_sglue+0x1c>
 80031de:	6824      	ldr	r4, [r4, #0]
 80031e0:	2c00      	cmp	r4, #0
 80031e2:	d1f8      	bne.n	80031d6 <_fwalk_sglue+0xa>
 80031e4:	0030      	movs	r0, r6
 80031e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031e8:	89ab      	ldrh	r3, [r5, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d908      	bls.n	8003200 <_fwalk_sglue+0x34>
 80031ee:	220e      	movs	r2, #14
 80031f0:	5eab      	ldrsh	r3, [r5, r2]
 80031f2:	3301      	adds	r3, #1
 80031f4:	d004      	beq.n	8003200 <_fwalk_sglue+0x34>
 80031f6:	0029      	movs	r1, r5
 80031f8:	9800      	ldr	r0, [sp, #0]
 80031fa:	9b01      	ldr	r3, [sp, #4]
 80031fc:	4798      	blx	r3
 80031fe:	4306      	orrs	r6, r0
 8003200:	3568      	adds	r5, #104	@ 0x68
 8003202:	e7ea      	b.n	80031da <_fwalk_sglue+0xe>

08003204 <setvbuf>:
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	001d      	movs	r5, r3
 8003208:	4b57      	ldr	r3, [pc, #348]	@ (8003368 <setvbuf+0x164>)
 800320a:	b085      	sub	sp, #20
 800320c:	681e      	ldr	r6, [r3, #0]
 800320e:	0004      	movs	r4, r0
 8003210:	000f      	movs	r7, r1
 8003212:	9200      	str	r2, [sp, #0]
 8003214:	2e00      	cmp	r6, #0
 8003216:	d005      	beq.n	8003224 <setvbuf+0x20>
 8003218:	6a33      	ldr	r3, [r6, #32]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <setvbuf+0x20>
 800321e:	0030      	movs	r0, r6
 8003220:	f7ff ffbc 	bl	800319c <__sinit>
 8003224:	9b00      	ldr	r3, [sp, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d005      	beq.n	8003236 <setvbuf+0x32>
 800322a:	2b01      	cmp	r3, #1
 800322c:	d900      	bls.n	8003230 <setvbuf+0x2c>
 800322e:	e097      	b.n	8003360 <setvbuf+0x15c>
 8003230:	2d00      	cmp	r5, #0
 8003232:	da00      	bge.n	8003236 <setvbuf+0x32>
 8003234:	e094      	b.n	8003360 <setvbuf+0x15c>
 8003236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003238:	07db      	lsls	r3, r3, #31
 800323a:	d405      	bmi.n	8003248 <setvbuf+0x44>
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	059b      	lsls	r3, r3, #22
 8003240:	d402      	bmi.n	8003248 <setvbuf+0x44>
 8003242:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003244:	f000 f961 	bl	800350a <__retarget_lock_acquire_recursive>
 8003248:	0021      	movs	r1, r4
 800324a:	0030      	movs	r0, r6
 800324c:	f000 faec 	bl	8003828 <_fflush_r>
 8003250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003252:	2900      	cmp	r1, #0
 8003254:	d008      	beq.n	8003268 <setvbuf+0x64>
 8003256:	0023      	movs	r3, r4
 8003258:	3344      	adds	r3, #68	@ 0x44
 800325a:	4299      	cmp	r1, r3
 800325c:	d002      	beq.n	8003264 <setvbuf+0x60>
 800325e:	0030      	movs	r0, r6
 8003260:	f000 f956 	bl	8003510 <_free_r>
 8003264:	2300      	movs	r3, #0
 8003266:	6363      	str	r3, [r4, #52]	@ 0x34
 8003268:	2300      	movs	r3, #0
 800326a:	61a3      	str	r3, [r4, #24]
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	d503      	bpl.n	800327c <setvbuf+0x78>
 8003274:	0030      	movs	r0, r6
 8003276:	6921      	ldr	r1, [r4, #16]
 8003278:	f000 f94a 	bl	8003510 <_free_r>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	4a3b      	ldr	r2, [pc, #236]	@ (800336c <setvbuf+0x168>)
 8003280:	4013      	ands	r3, r2
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	9b00      	ldr	r3, [sp, #0]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d060      	beq.n	800334c <setvbuf+0x148>
 800328a:	ab03      	add	r3, sp, #12
 800328c:	0021      	movs	r1, r4
 800328e:	0030      	movs	r0, r6
 8003290:	aa02      	add	r2, sp, #8
 8003292:	f000 faf5 	bl	8003880 <__swhatbuf_r>
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	4303      	orrs	r3, r0
 800329a:	81a3      	strh	r3, [r4, #12]
 800329c:	2d00      	cmp	r5, #0
 800329e:	d124      	bne.n	80032ea <setvbuf+0xe6>
 80032a0:	9d02      	ldr	r5, [sp, #8]
 80032a2:	0028      	movs	r0, r5
 80032a4:	f000 f97e 	bl	80035a4 <malloc>
 80032a8:	9501      	str	r5, [sp, #4]
 80032aa:	1e07      	subs	r7, r0, #0
 80032ac:	d148      	bne.n	8003340 <setvbuf+0x13c>
 80032ae:	9b02      	ldr	r3, [sp, #8]
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	42ab      	cmp	r3, r5
 80032b4:	d13f      	bne.n	8003336 <setvbuf+0x132>
 80032b6:	2501      	movs	r5, #1
 80032b8:	426d      	negs	r5, r5
 80032ba:	220c      	movs	r2, #12
 80032bc:	5ea3      	ldrsh	r3, [r4, r2]
 80032be:	2202      	movs	r2, #2
 80032c0:	431a      	orrs	r2, r3
 80032c2:	81a2      	strh	r2, [r4, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	60a2      	str	r2, [r4, #8]
 80032c8:	0022      	movs	r2, r4
 80032ca:	3247      	adds	r2, #71	@ 0x47
 80032cc:	6022      	str	r2, [r4, #0]
 80032ce:	6122      	str	r2, [r4, #16]
 80032d0:	2201      	movs	r2, #1
 80032d2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80032d4:	6162      	str	r2, [r4, #20]
 80032d6:	4211      	tst	r1, r2
 80032d8:	d104      	bne.n	80032e4 <setvbuf+0xe0>
 80032da:	059b      	lsls	r3, r3, #22
 80032dc:	d402      	bmi.n	80032e4 <setvbuf+0xe0>
 80032de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032e0:	f000 f914 	bl	800350c <__retarget_lock_release_recursive>
 80032e4:	0028      	movs	r0, r5
 80032e6:	b005      	add	sp, #20
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d0d9      	beq.n	80032a2 <setvbuf+0x9e>
 80032ee:	6a33      	ldr	r3, [r6, #32]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <setvbuf+0xf6>
 80032f4:	0030      	movs	r0, r6
 80032f6:	f7ff ff51 	bl	800319c <__sinit>
 80032fa:	9b00      	ldr	r3, [sp, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d103      	bne.n	8003308 <setvbuf+0x104>
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	9a00      	ldr	r2, [sp, #0]
 8003304:	431a      	orrs	r2, r3
 8003306:	81a2      	strh	r2, [r4, #12]
 8003308:	220c      	movs	r2, #12
 800330a:	5ea3      	ldrsh	r3, [r4, r2]
 800330c:	2208      	movs	r2, #8
 800330e:	0019      	movs	r1, r3
 8003310:	6027      	str	r7, [r4, #0]
 8003312:	6127      	str	r7, [r4, #16]
 8003314:	6165      	str	r5, [r4, #20]
 8003316:	4011      	ands	r1, r2
 8003318:	4213      	tst	r3, r2
 800331a:	d01b      	beq.n	8003354 <setvbuf+0x150>
 800331c:	07da      	lsls	r2, r3, #31
 800331e:	d517      	bpl.n	8003350 <setvbuf+0x14c>
 8003320:	2200      	movs	r2, #0
 8003322:	426d      	negs	r5, r5
 8003324:	60a2      	str	r2, [r4, #8]
 8003326:	61a5      	str	r5, [r4, #24]
 8003328:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800332a:	07d2      	lsls	r2, r2, #31
 800332c:	d401      	bmi.n	8003332 <setvbuf+0x12e>
 800332e:	059b      	lsls	r3, r3, #22
 8003330:	d512      	bpl.n	8003358 <setvbuf+0x154>
 8003332:	2500      	movs	r5, #0
 8003334:	e7d6      	b.n	80032e4 <setvbuf+0xe0>
 8003336:	9801      	ldr	r0, [sp, #4]
 8003338:	f000 f934 	bl	80035a4 <malloc>
 800333c:	1e07      	subs	r7, r0, #0
 800333e:	d0ba      	beq.n	80032b6 <setvbuf+0xb2>
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	89a2      	ldrh	r2, [r4, #12]
 8003344:	9d01      	ldr	r5, [sp, #4]
 8003346:	4313      	orrs	r3, r2
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	e7d0      	b.n	80032ee <setvbuf+0xea>
 800334c:	2500      	movs	r5, #0
 800334e:	e7b4      	b.n	80032ba <setvbuf+0xb6>
 8003350:	60a5      	str	r5, [r4, #8]
 8003352:	e7e9      	b.n	8003328 <setvbuf+0x124>
 8003354:	60a1      	str	r1, [r4, #8]
 8003356:	e7e7      	b.n	8003328 <setvbuf+0x124>
 8003358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335a:	f000 f8d7 	bl	800350c <__retarget_lock_release_recursive>
 800335e:	e7e8      	b.n	8003332 <setvbuf+0x12e>
 8003360:	2501      	movs	r5, #1
 8003362:	426d      	negs	r5, r5
 8003364:	e7be      	b.n	80032e4 <setvbuf+0xe0>
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	20000018 	.word	0x20000018
 800336c:	fffff35c 	.word	0xfffff35c

08003370 <__sread>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	000c      	movs	r4, r1
 8003374:	250e      	movs	r5, #14
 8003376:	5f49      	ldrsh	r1, [r1, r5]
 8003378:	f000 f874 	bl	8003464 <_read_r>
 800337c:	2800      	cmp	r0, #0
 800337e:	db03      	blt.n	8003388 <__sread+0x18>
 8003380:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003382:	181b      	adds	r3, r3, r0
 8003384:	6563      	str	r3, [r4, #84]	@ 0x54
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	4a02      	ldr	r2, [pc, #8]	@ (8003394 <__sread+0x24>)
 800338c:	4013      	ands	r3, r2
 800338e:	81a3      	strh	r3, [r4, #12]
 8003390:	e7f9      	b.n	8003386 <__sread+0x16>
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	ffffefff 	.word	0xffffefff

08003398 <__swrite>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	001f      	movs	r7, r3
 800339c:	898b      	ldrh	r3, [r1, #12]
 800339e:	0005      	movs	r5, r0
 80033a0:	000c      	movs	r4, r1
 80033a2:	0016      	movs	r6, r2
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	d505      	bpl.n	80033b4 <__swrite+0x1c>
 80033a8:	230e      	movs	r3, #14
 80033aa:	5ec9      	ldrsh	r1, [r1, r3]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2302      	movs	r3, #2
 80033b0:	f000 f844 	bl	800343c <_lseek_r>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <__swrite+0x34>)
 80033b8:	0028      	movs	r0, r5
 80033ba:	4013      	ands	r3, r2
 80033bc:	81a3      	strh	r3, [r4, #12]
 80033be:	0032      	movs	r2, r6
 80033c0:	230e      	movs	r3, #14
 80033c2:	5ee1      	ldrsh	r1, [r4, r3]
 80033c4:	003b      	movs	r3, r7
 80033c6:	f000 f861 	bl	800348c <_write_r>
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033cc:	ffffefff 	.word	0xffffefff

080033d0 <__sseek>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	000c      	movs	r4, r1
 80033d4:	250e      	movs	r5, #14
 80033d6:	5f49      	ldrsh	r1, [r1, r5]
 80033d8:	f000 f830 	bl	800343c <_lseek_r>
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	1c42      	adds	r2, r0, #1
 80033e0:	d103      	bne.n	80033ea <__sseek+0x1a>
 80033e2:	4a05      	ldr	r2, [pc, #20]	@ (80033f8 <__sseek+0x28>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	2280      	movs	r2, #128	@ 0x80
 80033ec:	0152      	lsls	r2, r2, #5
 80033ee:	4313      	orrs	r3, r2
 80033f0:	81a3      	strh	r3, [r4, #12]
 80033f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80033f4:	e7f8      	b.n	80033e8 <__sseek+0x18>
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	ffffefff 	.word	0xffffefff

080033fc <__sclose>:
 80033fc:	b510      	push	{r4, lr}
 80033fe:	230e      	movs	r3, #14
 8003400:	5ec9      	ldrsh	r1, [r1, r3]
 8003402:	f000 f809 	bl	8003418 <_close_r>
 8003406:	bd10      	pop	{r4, pc}

08003408 <memset>:
 8003408:	0003      	movs	r3, r0
 800340a:	1882      	adds	r2, r0, r2
 800340c:	4293      	cmp	r3, r2
 800340e:	d100      	bne.n	8003412 <memset+0xa>
 8003410:	4770      	bx	lr
 8003412:	7019      	strb	r1, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	e7f9      	b.n	800340c <memset+0x4>

08003418 <_close_r>:
 8003418:	2300      	movs	r3, #0
 800341a:	b570      	push	{r4, r5, r6, lr}
 800341c:	4d06      	ldr	r5, [pc, #24]	@ (8003438 <_close_r+0x20>)
 800341e:	0004      	movs	r4, r0
 8003420:	0008      	movs	r0, r1
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	f7fe f97f 	bl	8001726 <_close>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d103      	bne.n	8003434 <_close_r+0x1c>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d000      	beq.n	8003434 <_close_r+0x1c>
 8003432:	6023      	str	r3, [r4, #0]
 8003434:	bd70      	pop	{r4, r5, r6, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	200003f4 	.word	0x200003f4

0800343c <_lseek_r>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	0004      	movs	r4, r0
 8003440:	0008      	movs	r0, r1
 8003442:	0011      	movs	r1, r2
 8003444:	001a      	movs	r2, r3
 8003446:	2300      	movs	r3, #0
 8003448:	4d05      	ldr	r5, [pc, #20]	@ (8003460 <_lseek_r+0x24>)
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fe f982 	bl	8001754 <_lseek>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d103      	bne.n	800345c <_lseek_r+0x20>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d000      	beq.n	800345c <_lseek_r+0x20>
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	200003f4 	.word	0x200003f4

08003464 <_read_r>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0004      	movs	r4, r0
 8003468:	0008      	movs	r0, r1
 800346a:	0011      	movs	r1, r2
 800346c:	001a      	movs	r2, r3
 800346e:	2300      	movs	r3, #0
 8003470:	4d05      	ldr	r5, [pc, #20]	@ (8003488 <_read_r+0x24>)
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	f7fe f97f 	bl	8001776 <_read>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d103      	bne.n	8003484 <_read_r+0x20>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d000      	beq.n	8003484 <_read_r+0x20>
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	bd70      	pop	{r4, r5, r6, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	200003f4 	.word	0x200003f4

0800348c <_write_r>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	0004      	movs	r4, r0
 8003490:	0008      	movs	r0, r1
 8003492:	0011      	movs	r1, r2
 8003494:	001a      	movs	r2, r3
 8003496:	2300      	movs	r3, #0
 8003498:	4d05      	ldr	r5, [pc, #20]	@ (80034b0 <_write_r+0x24>)
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	f7fe f918 	bl	80016d0 <_write>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d103      	bne.n	80034ac <_write_r+0x20>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d000      	beq.n	80034ac <_write_r+0x20>
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	200003f4 	.word	0x200003f4

080034b4 <__errno>:
 80034b4:	4b01      	ldr	r3, [pc, #4]	@ (80034bc <__errno+0x8>)
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	4770      	bx	lr
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	20000018 	.word	0x20000018

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	2600      	movs	r6, #0
 80034c4:	4c0c      	ldr	r4, [pc, #48]	@ (80034f8 <__libc_init_array+0x38>)
 80034c6:	4d0d      	ldr	r5, [pc, #52]	@ (80034fc <__libc_init_array+0x3c>)
 80034c8:	1b64      	subs	r4, r4, r5
 80034ca:	10a4      	asrs	r4, r4, #2
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	2600      	movs	r6, #0
 80034d2:	f000 fa23 	bl	800391c <_init>
 80034d6:	4c0a      	ldr	r4, [pc, #40]	@ (8003500 <__libc_init_array+0x40>)
 80034d8:	4d0a      	ldr	r5, [pc, #40]	@ (8003504 <__libc_init_array+0x44>)
 80034da:	1b64      	subs	r4, r4, r5
 80034dc:	10a4      	asrs	r4, r4, #2
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	00b3      	lsls	r3, r6, #2
 80034e6:	58eb      	ldr	r3, [r5, r3]
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	00b3      	lsls	r3, r6, #2
 80034f0:	58eb      	ldr	r3, [r5, r3]
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	080039c4 	.word	0x080039c4
 80034fc:	080039c4 	.word	0x080039c4
 8003500:	080039c8 	.word	0x080039c8
 8003504:	080039c4 	.word	0x080039c4

08003508 <__retarget_lock_init_recursive>:
 8003508:	4770      	bx	lr

0800350a <__retarget_lock_acquire_recursive>:
 800350a:	4770      	bx	lr

0800350c <__retarget_lock_release_recursive>:
 800350c:	4770      	bx	lr
	...

08003510 <_free_r>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	0005      	movs	r5, r0
 8003514:	1e0c      	subs	r4, r1, #0
 8003516:	d010      	beq.n	800353a <_free_r+0x2a>
 8003518:	3c04      	subs	r4, #4
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da00      	bge.n	8003522 <_free_r+0x12>
 8003520:	18e4      	adds	r4, r4, r3
 8003522:	0028      	movs	r0, r5
 8003524:	f000 f8ea 	bl	80036fc <__malloc_lock>
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <_free_r+0x90>)
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <_free_r+0x2c>
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	6014      	str	r4, [r2, #0]
 8003534:	0028      	movs	r0, r5
 8003536:	f000 f8e9 	bl	800370c <__malloc_unlock>
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	42a3      	cmp	r3, r4
 800353e:	d908      	bls.n	8003552 <_free_r+0x42>
 8003540:	6820      	ldr	r0, [r4, #0]
 8003542:	1821      	adds	r1, r4, r0
 8003544:	428b      	cmp	r3, r1
 8003546:	d1f3      	bne.n	8003530 <_free_r+0x20>
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	1809      	adds	r1, r1, r0
 800354e:	6021      	str	r1, [r4, #0]
 8003550:	e7ee      	b.n	8003530 <_free_r+0x20>
 8003552:	001a      	movs	r2, r3
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <_free_r+0x4e>
 800355a:	42a3      	cmp	r3, r4
 800355c:	d9f9      	bls.n	8003552 <_free_r+0x42>
 800355e:	6811      	ldr	r1, [r2, #0]
 8003560:	1850      	adds	r0, r2, r1
 8003562:	42a0      	cmp	r0, r4
 8003564:	d10b      	bne.n	800357e <_free_r+0x6e>
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	1809      	adds	r1, r1, r0
 800356a:	1850      	adds	r0, r2, r1
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	4283      	cmp	r3, r0
 8003570:	d1e0      	bne.n	8003534 <_free_r+0x24>
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	1841      	adds	r1, r0, r1
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	6053      	str	r3, [r2, #4]
 800357c:	e7da      	b.n	8003534 <_free_r+0x24>
 800357e:	42a0      	cmp	r0, r4
 8003580:	d902      	bls.n	8003588 <_free_r+0x78>
 8003582:	230c      	movs	r3, #12
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	e7d5      	b.n	8003534 <_free_r+0x24>
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	1821      	adds	r1, r4, r0
 800358c:	428b      	cmp	r3, r1
 800358e:	d103      	bne.n	8003598 <_free_r+0x88>
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	1809      	adds	r1, r1, r0
 8003596:	6021      	str	r1, [r4, #0]
 8003598:	6063      	str	r3, [r4, #4]
 800359a:	6054      	str	r4, [r2, #4]
 800359c:	e7ca      	b.n	8003534 <_free_r+0x24>
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	20000400 	.word	0x20000400

080035a4 <malloc>:
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <malloc+0x10>)
 80035a8:	0001      	movs	r1, r0
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	f000 f826 	bl	80035fc <_malloc_r>
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	20000018 	.word	0x20000018

080035b8 <sbrk_aligned>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	4e0f      	ldr	r6, [pc, #60]	@ (80035f8 <sbrk_aligned+0x40>)
 80035bc:	000d      	movs	r5, r1
 80035be:	6831      	ldr	r1, [r6, #0]
 80035c0:	0004      	movs	r4, r0
 80035c2:	2900      	cmp	r1, #0
 80035c4:	d102      	bne.n	80035cc <sbrk_aligned+0x14>
 80035c6:	f000 f997 	bl	80038f8 <_sbrk_r>
 80035ca:	6030      	str	r0, [r6, #0]
 80035cc:	0029      	movs	r1, r5
 80035ce:	0020      	movs	r0, r4
 80035d0:	f000 f992 	bl	80038f8 <_sbrk_r>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d103      	bne.n	80035e0 <sbrk_aligned+0x28>
 80035d8:	2501      	movs	r5, #1
 80035da:	426d      	negs	r5, r5
 80035dc:	0028      	movs	r0, r5
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	2303      	movs	r3, #3
 80035e2:	1cc5      	adds	r5, r0, #3
 80035e4:	439d      	bics	r5, r3
 80035e6:	42a8      	cmp	r0, r5
 80035e8:	d0f8      	beq.n	80035dc <sbrk_aligned+0x24>
 80035ea:	1a29      	subs	r1, r5, r0
 80035ec:	0020      	movs	r0, r4
 80035ee:	f000 f983 	bl	80038f8 <_sbrk_r>
 80035f2:	3001      	adds	r0, #1
 80035f4:	d1f2      	bne.n	80035dc <sbrk_aligned+0x24>
 80035f6:	e7ef      	b.n	80035d8 <sbrk_aligned+0x20>
 80035f8:	200003fc 	.word	0x200003fc

080035fc <_malloc_r>:
 80035fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035fe:	2203      	movs	r2, #3
 8003600:	1ccb      	adds	r3, r1, #3
 8003602:	4393      	bics	r3, r2
 8003604:	3308      	adds	r3, #8
 8003606:	0005      	movs	r5, r0
 8003608:	001f      	movs	r7, r3
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d234      	bcs.n	8003678 <_malloc_r+0x7c>
 800360e:	270c      	movs	r7, #12
 8003610:	42b9      	cmp	r1, r7
 8003612:	d833      	bhi.n	800367c <_malloc_r+0x80>
 8003614:	0028      	movs	r0, r5
 8003616:	f000 f871 	bl	80036fc <__malloc_lock>
 800361a:	4e37      	ldr	r6, [pc, #220]	@ (80036f8 <_malloc_r+0xfc>)
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	001c      	movs	r4, r3
 8003620:	2c00      	cmp	r4, #0
 8003622:	d12f      	bne.n	8003684 <_malloc_r+0x88>
 8003624:	0039      	movs	r1, r7
 8003626:	0028      	movs	r0, r5
 8003628:	f7ff ffc6 	bl	80035b8 <sbrk_aligned>
 800362c:	0004      	movs	r4, r0
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	d15f      	bne.n	80036f2 <_malloc_r+0xf6>
 8003632:	6834      	ldr	r4, [r6, #0]
 8003634:	9400      	str	r4, [sp, #0]
 8003636:	9b00      	ldr	r3, [sp, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d14a      	bne.n	80036d2 <_malloc_r+0xd6>
 800363c:	2c00      	cmp	r4, #0
 800363e:	d052      	beq.n	80036e6 <_malloc_r+0xea>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	0028      	movs	r0, r5
 8003644:	18e3      	adds	r3, r4, r3
 8003646:	9900      	ldr	r1, [sp, #0]
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	f000 f955 	bl	80038f8 <_sbrk_r>
 800364e:	9b01      	ldr	r3, [sp, #4]
 8003650:	4283      	cmp	r3, r0
 8003652:	d148      	bne.n	80036e6 <_malloc_r+0xea>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	0028      	movs	r0, r5
 8003658:	1aff      	subs	r7, r7, r3
 800365a:	0039      	movs	r1, r7
 800365c:	f7ff ffac 	bl	80035b8 <sbrk_aligned>
 8003660:	3001      	adds	r0, #1
 8003662:	d040      	beq.n	80036e6 <_malloc_r+0xea>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	19db      	adds	r3, r3, r7
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	6833      	ldr	r3, [r6, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	2a00      	cmp	r2, #0
 8003670:	d133      	bne.n	80036da <_malloc_r+0xde>
 8003672:	9b00      	ldr	r3, [sp, #0]
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	e019      	b.n	80036ac <_malloc_r+0xb0>
 8003678:	2b00      	cmp	r3, #0
 800367a:	dac9      	bge.n	8003610 <_malloc_r+0x14>
 800367c:	230c      	movs	r3, #12
 800367e:	602b      	str	r3, [r5, #0]
 8003680:	2000      	movs	r0, #0
 8003682:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003684:	6821      	ldr	r1, [r4, #0]
 8003686:	1bc9      	subs	r1, r1, r7
 8003688:	d420      	bmi.n	80036cc <_malloc_r+0xd0>
 800368a:	290b      	cmp	r1, #11
 800368c:	d90a      	bls.n	80036a4 <_malloc_r+0xa8>
 800368e:	19e2      	adds	r2, r4, r7
 8003690:	6027      	str	r7, [r4, #0]
 8003692:	42a3      	cmp	r3, r4
 8003694:	d104      	bne.n	80036a0 <_malloc_r+0xa4>
 8003696:	6032      	str	r2, [r6, #0]
 8003698:	6863      	ldr	r3, [r4, #4]
 800369a:	6011      	str	r1, [r2, #0]
 800369c:	6053      	str	r3, [r2, #4]
 800369e:	e005      	b.n	80036ac <_malloc_r+0xb0>
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	e7f9      	b.n	8003698 <_malloc_r+0x9c>
 80036a4:	6862      	ldr	r2, [r4, #4]
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	d10e      	bne.n	80036c8 <_malloc_r+0xcc>
 80036aa:	6032      	str	r2, [r6, #0]
 80036ac:	0028      	movs	r0, r5
 80036ae:	f000 f82d 	bl	800370c <__malloc_unlock>
 80036b2:	0020      	movs	r0, r4
 80036b4:	2207      	movs	r2, #7
 80036b6:	300b      	adds	r0, #11
 80036b8:	1d23      	adds	r3, r4, #4
 80036ba:	4390      	bics	r0, r2
 80036bc:	1ac2      	subs	r2, r0, r3
 80036be:	4298      	cmp	r0, r3
 80036c0:	d0df      	beq.n	8003682 <_malloc_r+0x86>
 80036c2:	1a1b      	subs	r3, r3, r0
 80036c4:	50a3      	str	r3, [r4, r2]
 80036c6:	e7dc      	b.n	8003682 <_malloc_r+0x86>
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	e7ef      	b.n	80036ac <_malloc_r+0xb0>
 80036cc:	0023      	movs	r3, r4
 80036ce:	6864      	ldr	r4, [r4, #4]
 80036d0:	e7a6      	b.n	8003620 <_malloc_r+0x24>
 80036d2:	9c00      	ldr	r4, [sp, #0]
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	e7ad      	b.n	8003636 <_malloc_r+0x3a>
 80036da:	001a      	movs	r2, r3
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	42a3      	cmp	r3, r4
 80036e0:	d1fb      	bne.n	80036da <_malloc_r+0xde>
 80036e2:	2300      	movs	r3, #0
 80036e4:	e7da      	b.n	800369c <_malloc_r+0xa0>
 80036e6:	230c      	movs	r3, #12
 80036e8:	0028      	movs	r0, r5
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f000 f80e 	bl	800370c <__malloc_unlock>
 80036f0:	e7c6      	b.n	8003680 <_malloc_r+0x84>
 80036f2:	6007      	str	r7, [r0, #0]
 80036f4:	e7da      	b.n	80036ac <_malloc_r+0xb0>
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	20000400 	.word	0x20000400

080036fc <__malloc_lock>:
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4802      	ldr	r0, [pc, #8]	@ (8003708 <__malloc_lock+0xc>)
 8003700:	f7ff ff03 	bl	800350a <__retarget_lock_acquire_recursive>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	200003f8 	.word	0x200003f8

0800370c <__malloc_unlock>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4802      	ldr	r0, [pc, #8]	@ (8003718 <__malloc_unlock+0xc>)
 8003710:	f7ff fefc 	bl	800350c <__retarget_lock_release_recursive>
 8003714:	bd10      	pop	{r4, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	200003f8 	.word	0x200003f8

0800371c <__sflush_r>:
 800371c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800371e:	220c      	movs	r2, #12
 8003720:	5e8b      	ldrsh	r3, [r1, r2]
 8003722:	0005      	movs	r5, r0
 8003724:	000c      	movs	r4, r1
 8003726:	071a      	lsls	r2, r3, #28
 8003728:	d456      	bmi.n	80037d8 <__sflush_r+0xbc>
 800372a:	684a      	ldr	r2, [r1, #4]
 800372c:	2a00      	cmp	r2, #0
 800372e:	dc02      	bgt.n	8003736 <__sflush_r+0x1a>
 8003730:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003732:	2a00      	cmp	r2, #0
 8003734:	dd4e      	ble.n	80037d4 <__sflush_r+0xb8>
 8003736:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003738:	2f00      	cmp	r7, #0
 800373a:	d04b      	beq.n	80037d4 <__sflush_r+0xb8>
 800373c:	2200      	movs	r2, #0
 800373e:	2080      	movs	r0, #128	@ 0x80
 8003740:	682e      	ldr	r6, [r5, #0]
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	001a      	movs	r2, r3
 8003746:	0140      	lsls	r0, r0, #5
 8003748:	6a21      	ldr	r1, [r4, #32]
 800374a:	4002      	ands	r2, r0
 800374c:	4203      	tst	r3, r0
 800374e:	d033      	beq.n	80037b8 <__sflush_r+0x9c>
 8003750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	075b      	lsls	r3, r3, #29
 8003756:	d506      	bpl.n	8003766 <__sflush_r+0x4a>
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <__sflush_r+0x4a>
 8003762:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003764:	1ad2      	subs	r2, r2, r3
 8003766:	2300      	movs	r3, #0
 8003768:	0028      	movs	r0, r5
 800376a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800376c:	6a21      	ldr	r1, [r4, #32]
 800376e:	47b8      	blx	r7
 8003770:	89a2      	ldrh	r2, [r4, #12]
 8003772:	1c43      	adds	r3, r0, #1
 8003774:	d106      	bne.n	8003784 <__sflush_r+0x68>
 8003776:	6829      	ldr	r1, [r5, #0]
 8003778:	291d      	cmp	r1, #29
 800377a:	d846      	bhi.n	800380a <__sflush_r+0xee>
 800377c:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <__sflush_r+0x108>)
 800377e:	410b      	asrs	r3, r1
 8003780:	07db      	lsls	r3, r3, #31
 8003782:	d442      	bmi.n	800380a <__sflush_r+0xee>
 8003784:	2300      	movs	r3, #0
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	04d2      	lsls	r2, r2, #19
 800378e:	d505      	bpl.n	800379c <__sflush_r+0x80>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <__sflush_r+0x7e>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d100      	bne.n	800379c <__sflush_r+0x80>
 800379a:	6560      	str	r0, [r4, #84]	@ 0x54
 800379c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800379e:	602e      	str	r6, [r5, #0]
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d017      	beq.n	80037d4 <__sflush_r+0xb8>
 80037a4:	0023      	movs	r3, r4
 80037a6:	3344      	adds	r3, #68	@ 0x44
 80037a8:	4299      	cmp	r1, r3
 80037aa:	d002      	beq.n	80037b2 <__sflush_r+0x96>
 80037ac:	0028      	movs	r0, r5
 80037ae:	f7ff feaf 	bl	8003510 <_free_r>
 80037b2:	2300      	movs	r3, #0
 80037b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80037b6:	e00d      	b.n	80037d4 <__sflush_r+0xb8>
 80037b8:	2301      	movs	r3, #1
 80037ba:	0028      	movs	r0, r5
 80037bc:	47b8      	blx	r7
 80037be:	0002      	movs	r2, r0
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	d1c6      	bne.n	8003752 <__sflush_r+0x36>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0c3      	beq.n	8003752 <__sflush_r+0x36>
 80037ca:	2b1d      	cmp	r3, #29
 80037cc:	d001      	beq.n	80037d2 <__sflush_r+0xb6>
 80037ce:	2b16      	cmp	r3, #22
 80037d0:	d11a      	bne.n	8003808 <__sflush_r+0xec>
 80037d2:	602e      	str	r6, [r5, #0]
 80037d4:	2000      	movs	r0, #0
 80037d6:	e01e      	b.n	8003816 <__sflush_r+0xfa>
 80037d8:	690e      	ldr	r6, [r1, #16]
 80037da:	2e00      	cmp	r6, #0
 80037dc:	d0fa      	beq.n	80037d4 <__sflush_r+0xb8>
 80037de:	680f      	ldr	r7, [r1, #0]
 80037e0:	600e      	str	r6, [r1, #0]
 80037e2:	1bba      	subs	r2, r7, r6
 80037e4:	9201      	str	r2, [sp, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	079b      	lsls	r3, r3, #30
 80037ea:	d100      	bne.n	80037ee <__sflush_r+0xd2>
 80037ec:	694a      	ldr	r2, [r1, #20]
 80037ee:	60a2      	str	r2, [r4, #8]
 80037f0:	9b01      	ldr	r3, [sp, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	ddee      	ble.n	80037d4 <__sflush_r+0xb8>
 80037f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80037f8:	0032      	movs	r2, r6
 80037fa:	001f      	movs	r7, r3
 80037fc:	0028      	movs	r0, r5
 80037fe:	9b01      	ldr	r3, [sp, #4]
 8003800:	6a21      	ldr	r1, [r4, #32]
 8003802:	47b8      	blx	r7
 8003804:	2800      	cmp	r0, #0
 8003806:	dc07      	bgt.n	8003818 <__sflush_r+0xfc>
 8003808:	89a2      	ldrh	r2, [r4, #12]
 800380a:	2340      	movs	r3, #64	@ 0x40
 800380c:	2001      	movs	r0, #1
 800380e:	4313      	orrs	r3, r2
 8003810:	b21b      	sxth	r3, r3
 8003812:	81a3      	strh	r3, [r4, #12]
 8003814:	4240      	negs	r0, r0
 8003816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003818:	9b01      	ldr	r3, [sp, #4]
 800381a:	1836      	adds	r6, r6, r0
 800381c:	1a1b      	subs	r3, r3, r0
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	e7e6      	b.n	80037f0 <__sflush_r+0xd4>
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	dfbffffe 	.word	0xdfbffffe

08003828 <_fflush_r>:
 8003828:	690b      	ldr	r3, [r1, #16]
 800382a:	b570      	push	{r4, r5, r6, lr}
 800382c:	0005      	movs	r5, r0
 800382e:	000c      	movs	r4, r1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <_fflush_r+0x12>
 8003834:	2500      	movs	r5, #0
 8003836:	0028      	movs	r0, r5
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	2800      	cmp	r0, #0
 800383c:	d004      	beq.n	8003848 <_fflush_r+0x20>
 800383e:	6a03      	ldr	r3, [r0, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <_fflush_r+0x20>
 8003844:	f7ff fcaa 	bl	800319c <__sinit>
 8003848:	220c      	movs	r2, #12
 800384a:	5ea3      	ldrsh	r3, [r4, r2]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f1      	beq.n	8003834 <_fflush_r+0xc>
 8003850:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003852:	07d2      	lsls	r2, r2, #31
 8003854:	d404      	bmi.n	8003860 <_fflush_r+0x38>
 8003856:	059b      	lsls	r3, r3, #22
 8003858:	d402      	bmi.n	8003860 <_fflush_r+0x38>
 800385a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800385c:	f7ff fe55 	bl	800350a <__retarget_lock_acquire_recursive>
 8003860:	0028      	movs	r0, r5
 8003862:	0021      	movs	r1, r4
 8003864:	f7ff ff5a 	bl	800371c <__sflush_r>
 8003868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800386a:	0005      	movs	r5, r0
 800386c:	07db      	lsls	r3, r3, #31
 800386e:	d4e2      	bmi.n	8003836 <_fflush_r+0xe>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	059b      	lsls	r3, r3, #22
 8003874:	d4df      	bmi.n	8003836 <_fflush_r+0xe>
 8003876:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003878:	f7ff fe48 	bl	800350c <__retarget_lock_release_recursive>
 800387c:	e7db      	b.n	8003836 <_fflush_r+0xe>
	...

08003880 <__swhatbuf_r>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	000e      	movs	r6, r1
 8003884:	001d      	movs	r5, r3
 8003886:	230e      	movs	r3, #14
 8003888:	5ec9      	ldrsh	r1, [r1, r3]
 800388a:	0014      	movs	r4, r2
 800388c:	b096      	sub	sp, #88	@ 0x58
 800388e:	2900      	cmp	r1, #0
 8003890:	da0c      	bge.n	80038ac <__swhatbuf_r+0x2c>
 8003892:	89b2      	ldrh	r2, [r6, #12]
 8003894:	2380      	movs	r3, #128	@ 0x80
 8003896:	0011      	movs	r1, r2
 8003898:	4019      	ands	r1, r3
 800389a:	421a      	tst	r2, r3
 800389c:	d114      	bne.n	80038c8 <__swhatbuf_r+0x48>
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	2000      	movs	r0, #0
 80038a4:	6029      	str	r1, [r5, #0]
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	b016      	add	sp, #88	@ 0x58
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	466a      	mov	r2, sp
 80038ae:	f000 f811 	bl	80038d4 <_fstat_r>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	dbed      	blt.n	8003892 <__swhatbuf_r+0x12>
 80038b6:	23f0      	movs	r3, #240	@ 0xf0
 80038b8:	9901      	ldr	r1, [sp, #4]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	4019      	ands	r1, r3
 80038be:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <__swhatbuf_r+0x50>)
 80038c0:	18c9      	adds	r1, r1, r3
 80038c2:	424b      	negs	r3, r1
 80038c4:	4159      	adcs	r1, r3
 80038c6:	e7ea      	b.n	800389e <__swhatbuf_r+0x1e>
 80038c8:	2100      	movs	r1, #0
 80038ca:	2340      	movs	r3, #64	@ 0x40
 80038cc:	e7e9      	b.n	80038a2 <__swhatbuf_r+0x22>
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	ffffe000 	.word	0xffffe000

080038d4 <_fstat_r>:
 80038d4:	2300      	movs	r3, #0
 80038d6:	b570      	push	{r4, r5, r6, lr}
 80038d8:	4d06      	ldr	r5, [pc, #24]	@ (80038f4 <_fstat_r+0x20>)
 80038da:	0004      	movs	r4, r0
 80038dc:	0008      	movs	r0, r1
 80038de:	0011      	movs	r1, r2
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	f7fd ff6f 	bl	80017c4 <_fstat>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	d103      	bne.n	80038f2 <_fstat_r+0x1e>
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d000      	beq.n	80038f2 <_fstat_r+0x1e>
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	200003f4 	.word	0x200003f4

080038f8 <_sbrk_r>:
 80038f8:	2300      	movs	r3, #0
 80038fa:	b570      	push	{r4, r5, r6, lr}
 80038fc:	4d06      	ldr	r5, [pc, #24]	@ (8003918 <_sbrk_r+0x20>)
 80038fe:	0004      	movs	r4, r0
 8003900:	0008      	movs	r0, r1
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	f7fe f898 	bl	8001a38 <_sbrk>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d103      	bne.n	8003914 <_sbrk_r+0x1c>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d000      	beq.n	8003914 <_sbrk_r+0x1c>
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	200003f4 	.word	0x200003f4

0800391c <_init>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr

08003928 <_fini>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr
