
MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080054bc  080054bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800554c  0800554c  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  0800554c  0800554c  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800554c  0800554c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800554c  0800554c  0000654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005550  08005550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005554  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000068  080055bc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080055bc  00007404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000821a  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002220  00000000  00000000  0000f2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000114d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000794  00000000  00000000  00011f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011866  00000000  00000000  000126d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0fc  00000000  00000000  00023f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057254  00000000  00000000  0002e036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008528a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a48  00000000  00000000  000852d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00087d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054a4 	.word	0x080054a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080054a4 	.word	0x080054a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0044      	lsls	r4, r0, #1
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0246      	lsls	r6, r0, #9
 800022e:	1c0f      	adds	r7, r1, #0
 8000230:	0a76      	lsrs	r6, r6, #9
 8000232:	0e24      	lsrs	r4, r4, #24
 8000234:	0fc5      	lsrs	r5, r0, #31
 8000236:	2c00      	cmp	r4, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fmul+0x1c>
 800023a:	e0da      	b.n	80003f2 <__aeabi_fmul+0x1d2>
 800023c:	2cff      	cmp	r4, #255	@ 0xff
 800023e:	d074      	beq.n	800032a <__aeabi_fmul+0x10a>
 8000240:	2380      	movs	r3, #128	@ 0x80
 8000242:	00f6      	lsls	r6, r6, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431e      	orrs	r6, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469a      	mov	sl, r3
 800024e:	3c7f      	subs	r4, #127	@ 0x7f
 8000250:	027b      	lsls	r3, r7, #9
 8000252:	0a5b      	lsrs	r3, r3, #9
 8000254:	4698      	mov	r8, r3
 8000256:	007b      	lsls	r3, r7, #1
 8000258:	0e1b      	lsrs	r3, r3, #24
 800025a:	0fff      	lsrs	r7, r7, #31
 800025c:	2b00      	cmp	r3, #0
 800025e:	d074      	beq.n	800034a <__aeabi_fmul+0x12a>
 8000260:	2bff      	cmp	r3, #255	@ 0xff
 8000262:	d100      	bne.n	8000266 <__aeabi_fmul+0x46>
 8000264:	e08e      	b.n	8000384 <__aeabi_fmul+0x164>
 8000266:	4642      	mov	r2, r8
 8000268:	2180      	movs	r1, #128	@ 0x80
 800026a:	00d2      	lsls	r2, r2, #3
 800026c:	04c9      	lsls	r1, r1, #19
 800026e:	4311      	orrs	r1, r2
 8000270:	3b7f      	subs	r3, #127	@ 0x7f
 8000272:	002a      	movs	r2, r5
 8000274:	18e4      	adds	r4, r4, r3
 8000276:	464b      	mov	r3, r9
 8000278:	407a      	eors	r2, r7
 800027a:	4688      	mov	r8, r1
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	2b0a      	cmp	r3, #10
 8000280:	dc75      	bgt.n	800036e <__aeabi_fmul+0x14e>
 8000282:	464b      	mov	r3, r9
 8000284:	2000      	movs	r0, #0
 8000286:	2b02      	cmp	r3, #2
 8000288:	dd0f      	ble.n	80002aa <__aeabi_fmul+0x8a>
 800028a:	4649      	mov	r1, r9
 800028c:	2301      	movs	r3, #1
 800028e:	408b      	lsls	r3, r1
 8000290:	21a6      	movs	r1, #166	@ 0xa6
 8000292:	00c9      	lsls	r1, r1, #3
 8000294:	420b      	tst	r3, r1
 8000296:	d169      	bne.n	800036c <__aeabi_fmul+0x14c>
 8000298:	2190      	movs	r1, #144	@ 0x90
 800029a:	0089      	lsls	r1, r1, #2
 800029c:	420b      	tst	r3, r1
 800029e:	d000      	beq.n	80002a2 <__aeabi_fmul+0x82>
 80002a0:	e100      	b.n	80004a4 <__aeabi_fmul+0x284>
 80002a2:	2188      	movs	r1, #136	@ 0x88
 80002a4:	4219      	tst	r1, r3
 80002a6:	d000      	beq.n	80002aa <__aeabi_fmul+0x8a>
 80002a8:	e0f5      	b.n	8000496 <__aeabi_fmul+0x276>
 80002aa:	4641      	mov	r1, r8
 80002ac:	0409      	lsls	r1, r1, #16
 80002ae:	0c09      	lsrs	r1, r1, #16
 80002b0:	4643      	mov	r3, r8
 80002b2:	0008      	movs	r0, r1
 80002b4:	0c35      	lsrs	r5, r6, #16
 80002b6:	0436      	lsls	r6, r6, #16
 80002b8:	0c1b      	lsrs	r3, r3, #16
 80002ba:	0c36      	lsrs	r6, r6, #16
 80002bc:	4370      	muls	r0, r6
 80002be:	4369      	muls	r1, r5
 80002c0:	435e      	muls	r6, r3
 80002c2:	435d      	muls	r5, r3
 80002c4:	1876      	adds	r6, r6, r1
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	199b      	adds	r3, r3, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d903      	bls.n	80002d6 <__aeabi_fmul+0xb6>
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	0249      	lsls	r1, r1, #9
 80002d2:	468c      	mov	ip, r1
 80002d4:	4465      	add	r5, ip
 80002d6:	0400      	lsls	r0, r0, #16
 80002d8:	0419      	lsls	r1, r3, #16
 80002da:	0c00      	lsrs	r0, r0, #16
 80002dc:	1809      	adds	r1, r1, r0
 80002de:	018e      	lsls	r6, r1, #6
 80002e0:	1e70      	subs	r0, r6, #1
 80002e2:	4186      	sbcs	r6, r0
 80002e4:	0c1b      	lsrs	r3, r3, #16
 80002e6:	0e89      	lsrs	r1, r1, #26
 80002e8:	195b      	adds	r3, r3, r5
 80002ea:	430e      	orrs	r6, r1
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	431e      	orrs	r6, r3
 80002f0:	011b      	lsls	r3, r3, #4
 80002f2:	d46c      	bmi.n	80003ce <__aeabi_fmul+0x1ae>
 80002f4:	0023      	movs	r3, r4
 80002f6:	337f      	adds	r3, #127	@ 0x7f
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fmul+0xde>
 80002fc:	e0b1      	b.n	8000462 <__aeabi_fmul+0x242>
 80002fe:	0015      	movs	r5, r2
 8000300:	0771      	lsls	r1, r6, #29
 8000302:	d00b      	beq.n	800031c <__aeabi_fmul+0xfc>
 8000304:	200f      	movs	r0, #15
 8000306:	0021      	movs	r1, r4
 8000308:	4030      	ands	r0, r6
 800030a:	2804      	cmp	r0, #4
 800030c:	d006      	beq.n	800031c <__aeabi_fmul+0xfc>
 800030e:	3604      	adds	r6, #4
 8000310:	0132      	lsls	r2, r6, #4
 8000312:	d503      	bpl.n	800031c <__aeabi_fmul+0xfc>
 8000314:	4b6e      	ldr	r3, [pc, #440]	@ (80004d0 <__aeabi_fmul+0x2b0>)
 8000316:	401e      	ands	r6, r3
 8000318:	000b      	movs	r3, r1
 800031a:	3380      	adds	r3, #128	@ 0x80
 800031c:	2bfe      	cmp	r3, #254	@ 0xfe
 800031e:	dd00      	ble.n	8000322 <__aeabi_fmul+0x102>
 8000320:	e0bd      	b.n	800049e <__aeabi_fmul+0x27e>
 8000322:	01b2      	lsls	r2, r6, #6
 8000324:	0a52      	lsrs	r2, r2, #9
 8000326:	b2db      	uxtb	r3, r3
 8000328:	e048      	b.n	80003bc <__aeabi_fmul+0x19c>
 800032a:	2e00      	cmp	r6, #0
 800032c:	d000      	beq.n	8000330 <__aeabi_fmul+0x110>
 800032e:	e092      	b.n	8000456 <__aeabi_fmul+0x236>
 8000330:	2308      	movs	r3, #8
 8000332:	4699      	mov	r9, r3
 8000334:	3b06      	subs	r3, #6
 8000336:	469a      	mov	sl, r3
 8000338:	027b      	lsls	r3, r7, #9
 800033a:	0a5b      	lsrs	r3, r3, #9
 800033c:	4698      	mov	r8, r3
 800033e:	007b      	lsls	r3, r7, #1
 8000340:	24ff      	movs	r4, #255	@ 0xff
 8000342:	0e1b      	lsrs	r3, r3, #24
 8000344:	0fff      	lsrs	r7, r7, #31
 8000346:	2b00      	cmp	r3, #0
 8000348:	d18a      	bne.n	8000260 <__aeabi_fmul+0x40>
 800034a:	4642      	mov	r2, r8
 800034c:	2a00      	cmp	r2, #0
 800034e:	d164      	bne.n	800041a <__aeabi_fmul+0x1fa>
 8000350:	4649      	mov	r1, r9
 8000352:	3201      	adds	r2, #1
 8000354:	4311      	orrs	r1, r2
 8000356:	4689      	mov	r9, r1
 8000358:	290a      	cmp	r1, #10
 800035a:	dc08      	bgt.n	800036e <__aeabi_fmul+0x14e>
 800035c:	407d      	eors	r5, r7
 800035e:	2001      	movs	r0, #1
 8000360:	b2ea      	uxtb	r2, r5
 8000362:	2902      	cmp	r1, #2
 8000364:	dc91      	bgt.n	800028a <__aeabi_fmul+0x6a>
 8000366:	0015      	movs	r5, r2
 8000368:	2200      	movs	r2, #0
 800036a:	e027      	b.n	80003bc <__aeabi_fmul+0x19c>
 800036c:	0015      	movs	r5, r2
 800036e:	4653      	mov	r3, sl
 8000370:	2b02      	cmp	r3, #2
 8000372:	d100      	bne.n	8000376 <__aeabi_fmul+0x156>
 8000374:	e093      	b.n	800049e <__aeabi_fmul+0x27e>
 8000376:	2b03      	cmp	r3, #3
 8000378:	d01a      	beq.n	80003b0 <__aeabi_fmul+0x190>
 800037a:	2b01      	cmp	r3, #1
 800037c:	d12c      	bne.n	80003d8 <__aeabi_fmul+0x1b8>
 800037e:	2300      	movs	r3, #0
 8000380:	2200      	movs	r2, #0
 8000382:	e01b      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000384:	4643      	mov	r3, r8
 8000386:	34ff      	adds	r4, #255	@ 0xff
 8000388:	2b00      	cmp	r3, #0
 800038a:	d055      	beq.n	8000438 <__aeabi_fmul+0x218>
 800038c:	2103      	movs	r1, #3
 800038e:	464b      	mov	r3, r9
 8000390:	430b      	orrs	r3, r1
 8000392:	0019      	movs	r1, r3
 8000394:	2b0a      	cmp	r3, #10
 8000396:	dc00      	bgt.n	800039a <__aeabi_fmul+0x17a>
 8000398:	e092      	b.n	80004c0 <__aeabi_fmul+0x2a0>
 800039a:	2b0f      	cmp	r3, #15
 800039c:	d000      	beq.n	80003a0 <__aeabi_fmul+0x180>
 800039e:	e08c      	b.n	80004ba <__aeabi_fmul+0x29a>
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	03d2      	lsls	r2, r2, #15
 80003a4:	4216      	tst	r6, r2
 80003a6:	d003      	beq.n	80003b0 <__aeabi_fmul+0x190>
 80003a8:	4643      	mov	r3, r8
 80003aa:	4213      	tst	r3, r2
 80003ac:	d100      	bne.n	80003b0 <__aeabi_fmul+0x190>
 80003ae:	e07d      	b.n	80004ac <__aeabi_fmul+0x28c>
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	4332      	orrs	r2, r6
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	0a52      	lsrs	r2, r2, #9
 80003ba:	23ff      	movs	r3, #255	@ 0xff
 80003bc:	05d8      	lsls	r0, r3, #23
 80003be:	07ed      	lsls	r5, r5, #31
 80003c0:	4310      	orrs	r0, r2
 80003c2:	4328      	orrs	r0, r5
 80003c4:	bce0      	pop	{r5, r6, r7}
 80003c6:	46ba      	mov	sl, r7
 80003c8:	46b1      	mov	r9, r6
 80003ca:	46a8      	mov	r8, r5
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ce:	2301      	movs	r3, #1
 80003d0:	0015      	movs	r5, r2
 80003d2:	0871      	lsrs	r1, r6, #1
 80003d4:	401e      	ands	r6, r3
 80003d6:	430e      	orrs	r6, r1
 80003d8:	0023      	movs	r3, r4
 80003da:	3380      	adds	r3, #128	@ 0x80
 80003dc:	1c61      	adds	r1, r4, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	dd41      	ble.n	8000466 <__aeabi_fmul+0x246>
 80003e2:	0772      	lsls	r2, r6, #29
 80003e4:	d094      	beq.n	8000310 <__aeabi_fmul+0xf0>
 80003e6:	220f      	movs	r2, #15
 80003e8:	4032      	ands	r2, r6
 80003ea:	2a04      	cmp	r2, #4
 80003ec:	d000      	beq.n	80003f0 <__aeabi_fmul+0x1d0>
 80003ee:	e78e      	b.n	800030e <__aeabi_fmul+0xee>
 80003f0:	e78e      	b.n	8000310 <__aeabi_fmul+0xf0>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d105      	bne.n	8000402 <__aeabi_fmul+0x1e2>
 80003f6:	2304      	movs	r3, #4
 80003f8:	4699      	mov	r9, r3
 80003fa:	3b03      	subs	r3, #3
 80003fc:	2400      	movs	r4, #0
 80003fe:	469a      	mov	sl, r3
 8000400:	e726      	b.n	8000250 <__aeabi_fmul+0x30>
 8000402:	0030      	movs	r0, r6
 8000404:	f001 fc56 	bl	8001cb4 <__clzsi2>
 8000408:	2476      	movs	r4, #118	@ 0x76
 800040a:	1f43      	subs	r3, r0, #5
 800040c:	409e      	lsls	r6, r3
 800040e:	2300      	movs	r3, #0
 8000410:	4264      	negs	r4, r4
 8000412:	4699      	mov	r9, r3
 8000414:	469a      	mov	sl, r3
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	e71a      	b.n	8000250 <__aeabi_fmul+0x30>
 800041a:	4640      	mov	r0, r8
 800041c:	f001 fc4a 	bl	8001cb4 <__clzsi2>
 8000420:	464b      	mov	r3, r9
 8000422:	1a24      	subs	r4, r4, r0
 8000424:	3c76      	subs	r4, #118	@ 0x76
 8000426:	2b0a      	cmp	r3, #10
 8000428:	dca1      	bgt.n	800036e <__aeabi_fmul+0x14e>
 800042a:	4643      	mov	r3, r8
 800042c:	3805      	subs	r0, #5
 800042e:	4083      	lsls	r3, r0
 8000430:	407d      	eors	r5, r7
 8000432:	4698      	mov	r8, r3
 8000434:	b2ea      	uxtb	r2, r5
 8000436:	e724      	b.n	8000282 <__aeabi_fmul+0x62>
 8000438:	464a      	mov	r2, r9
 800043a:	3302      	adds	r3, #2
 800043c:	4313      	orrs	r3, r2
 800043e:	002a      	movs	r2, r5
 8000440:	407a      	eors	r2, r7
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	2b0a      	cmp	r3, #10
 8000446:	dc92      	bgt.n	800036e <__aeabi_fmul+0x14e>
 8000448:	4649      	mov	r1, r9
 800044a:	0015      	movs	r5, r2
 800044c:	2900      	cmp	r1, #0
 800044e:	d026      	beq.n	800049e <__aeabi_fmul+0x27e>
 8000450:	4699      	mov	r9, r3
 8000452:	2002      	movs	r0, #2
 8000454:	e719      	b.n	800028a <__aeabi_fmul+0x6a>
 8000456:	230c      	movs	r3, #12
 8000458:	4699      	mov	r9, r3
 800045a:	3b09      	subs	r3, #9
 800045c:	24ff      	movs	r4, #255	@ 0xff
 800045e:	469a      	mov	sl, r3
 8000460:	e6f6      	b.n	8000250 <__aeabi_fmul+0x30>
 8000462:	0015      	movs	r5, r2
 8000464:	0021      	movs	r1, r4
 8000466:	2201      	movs	r2, #1
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	2b1b      	cmp	r3, #27
 800046c:	dd00      	ble.n	8000470 <__aeabi_fmul+0x250>
 800046e:	e786      	b.n	800037e <__aeabi_fmul+0x15e>
 8000470:	319e      	adds	r1, #158	@ 0x9e
 8000472:	0032      	movs	r2, r6
 8000474:	408e      	lsls	r6, r1
 8000476:	40da      	lsrs	r2, r3
 8000478:	1e73      	subs	r3, r6, #1
 800047a:	419e      	sbcs	r6, r3
 800047c:	4332      	orrs	r2, r6
 800047e:	0753      	lsls	r3, r2, #29
 8000480:	d004      	beq.n	800048c <__aeabi_fmul+0x26c>
 8000482:	230f      	movs	r3, #15
 8000484:	4013      	ands	r3, r2
 8000486:	2b04      	cmp	r3, #4
 8000488:	d000      	beq.n	800048c <__aeabi_fmul+0x26c>
 800048a:	3204      	adds	r2, #4
 800048c:	0153      	lsls	r3, r2, #5
 800048e:	d510      	bpl.n	80004b2 <__aeabi_fmul+0x292>
 8000490:	2301      	movs	r3, #1
 8000492:	2200      	movs	r2, #0
 8000494:	e792      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000496:	003d      	movs	r5, r7
 8000498:	4646      	mov	r6, r8
 800049a:	4682      	mov	sl, r0
 800049c:	e767      	b.n	800036e <__aeabi_fmul+0x14e>
 800049e:	23ff      	movs	r3, #255	@ 0xff
 80004a0:	2200      	movs	r2, #0
 80004a2:	e78b      	b.n	80003bc <__aeabi_fmul+0x19c>
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	2500      	movs	r5, #0
 80004a8:	03d2      	lsls	r2, r2, #15
 80004aa:	e786      	b.n	80003ba <__aeabi_fmul+0x19a>
 80004ac:	003d      	movs	r5, r7
 80004ae:	431a      	orrs	r2, r3
 80004b0:	e783      	b.n	80003ba <__aeabi_fmul+0x19a>
 80004b2:	0192      	lsls	r2, r2, #6
 80004b4:	2300      	movs	r3, #0
 80004b6:	0a52      	lsrs	r2, r2, #9
 80004b8:	e780      	b.n	80003bc <__aeabi_fmul+0x19c>
 80004ba:	003d      	movs	r5, r7
 80004bc:	4646      	mov	r6, r8
 80004be:	e777      	b.n	80003b0 <__aeabi_fmul+0x190>
 80004c0:	002a      	movs	r2, r5
 80004c2:	2301      	movs	r3, #1
 80004c4:	407a      	eors	r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	2003      	movs	r0, #3
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	e6e9      	b.n	80002a2 <__aeabi_fmul+0x82>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	f7ffffff 	.word	0xf7ffffff

080004d4 <__aeabi_f2iz>:
 80004d4:	0241      	lsls	r1, r0, #9
 80004d6:	0042      	lsls	r2, r0, #1
 80004d8:	0fc3      	lsrs	r3, r0, #31
 80004da:	0a49      	lsrs	r1, r1, #9
 80004dc:	2000      	movs	r0, #0
 80004de:	0e12      	lsrs	r2, r2, #24
 80004e0:	2a7e      	cmp	r2, #126	@ 0x7e
 80004e2:	dd03      	ble.n	80004ec <__aeabi_f2iz+0x18>
 80004e4:	2a9d      	cmp	r2, #157	@ 0x9d
 80004e6:	dd02      	ble.n	80004ee <__aeabi_f2iz+0x1a>
 80004e8:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <__aeabi_f2iz+0x3c>)
 80004ea:	1898      	adds	r0, r3, r2
 80004ec:	4770      	bx	lr
 80004ee:	2080      	movs	r0, #128	@ 0x80
 80004f0:	0400      	lsls	r0, r0, #16
 80004f2:	4301      	orrs	r1, r0
 80004f4:	2a95      	cmp	r2, #149	@ 0x95
 80004f6:	dc07      	bgt.n	8000508 <__aeabi_f2iz+0x34>
 80004f8:	2096      	movs	r0, #150	@ 0x96
 80004fa:	1a82      	subs	r2, r0, r2
 80004fc:	40d1      	lsrs	r1, r2
 80004fe:	4248      	negs	r0, r1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f3      	bne.n	80004ec <__aeabi_f2iz+0x18>
 8000504:	0008      	movs	r0, r1
 8000506:	e7f1      	b.n	80004ec <__aeabi_f2iz+0x18>
 8000508:	3a96      	subs	r2, #150	@ 0x96
 800050a:	4091      	lsls	r1, r2
 800050c:	e7f7      	b.n	80004fe <__aeabi_f2iz+0x2a>
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	7fffffff 	.word	0x7fffffff

08000514 <__aeabi_i2f>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2800      	cmp	r0, #0
 8000518:	d012      	beq.n	8000540 <__aeabi_i2f+0x2c>
 800051a:	17c3      	asrs	r3, r0, #31
 800051c:	18c5      	adds	r5, r0, r3
 800051e:	405d      	eors	r5, r3
 8000520:	0fc4      	lsrs	r4, r0, #31
 8000522:	0028      	movs	r0, r5
 8000524:	f001 fbc6 	bl	8001cb4 <__clzsi2>
 8000528:	239e      	movs	r3, #158	@ 0x9e
 800052a:	1a1b      	subs	r3, r3, r0
 800052c:	2b96      	cmp	r3, #150	@ 0x96
 800052e:	dc0f      	bgt.n	8000550 <__aeabi_i2f+0x3c>
 8000530:	2808      	cmp	r0, #8
 8000532:	d038      	beq.n	80005a6 <__aeabi_i2f+0x92>
 8000534:	3808      	subs	r0, #8
 8000536:	4085      	lsls	r5, r0
 8000538:	026d      	lsls	r5, r5, #9
 800053a:	0a6d      	lsrs	r5, r5, #9
 800053c:	b2d8      	uxtb	r0, r3
 800053e:	e002      	b.n	8000546 <__aeabi_i2f+0x32>
 8000540:	2400      	movs	r4, #0
 8000542:	2000      	movs	r0, #0
 8000544:	2500      	movs	r5, #0
 8000546:	05c0      	lsls	r0, r0, #23
 8000548:	4328      	orrs	r0, r5
 800054a:	07e4      	lsls	r4, r4, #31
 800054c:	4320      	orrs	r0, r4
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2b99      	cmp	r3, #153	@ 0x99
 8000552:	dc14      	bgt.n	800057e <__aeabi_i2f+0x6a>
 8000554:	1f42      	subs	r2, r0, #5
 8000556:	4095      	lsls	r5, r2
 8000558:	002a      	movs	r2, r5
 800055a:	4915      	ldr	r1, [pc, #84]	@ (80005b0 <__aeabi_i2f+0x9c>)
 800055c:	4011      	ands	r1, r2
 800055e:	0755      	lsls	r5, r2, #29
 8000560:	d01c      	beq.n	800059c <__aeabi_i2f+0x88>
 8000562:	250f      	movs	r5, #15
 8000564:	402a      	ands	r2, r5
 8000566:	2a04      	cmp	r2, #4
 8000568:	d018      	beq.n	800059c <__aeabi_i2f+0x88>
 800056a:	3104      	adds	r1, #4
 800056c:	08ca      	lsrs	r2, r1, #3
 800056e:	0149      	lsls	r1, r1, #5
 8000570:	d515      	bpl.n	800059e <__aeabi_i2f+0x8a>
 8000572:	239f      	movs	r3, #159	@ 0x9f
 8000574:	0252      	lsls	r2, r2, #9
 8000576:	1a18      	subs	r0, r3, r0
 8000578:	0a55      	lsrs	r5, r2, #9
 800057a:	b2c0      	uxtb	r0, r0
 800057c:	e7e3      	b.n	8000546 <__aeabi_i2f+0x32>
 800057e:	2205      	movs	r2, #5
 8000580:	0029      	movs	r1, r5
 8000582:	1a12      	subs	r2, r2, r0
 8000584:	40d1      	lsrs	r1, r2
 8000586:	0002      	movs	r2, r0
 8000588:	321b      	adds	r2, #27
 800058a:	4095      	lsls	r5, r2
 800058c:	002a      	movs	r2, r5
 800058e:	1e55      	subs	r5, r2, #1
 8000590:	41aa      	sbcs	r2, r5
 8000592:	430a      	orrs	r2, r1
 8000594:	4906      	ldr	r1, [pc, #24]	@ (80005b0 <__aeabi_i2f+0x9c>)
 8000596:	4011      	ands	r1, r2
 8000598:	0755      	lsls	r5, r2, #29
 800059a:	d1e2      	bne.n	8000562 <__aeabi_i2f+0x4e>
 800059c:	08ca      	lsrs	r2, r1, #3
 800059e:	0252      	lsls	r2, r2, #9
 80005a0:	0a55      	lsrs	r5, r2, #9
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	e7cf      	b.n	8000546 <__aeabi_i2f+0x32>
 80005a6:	026d      	lsls	r5, r5, #9
 80005a8:	0a6d      	lsrs	r5, r5, #9
 80005aa:	308e      	adds	r0, #142	@ 0x8e
 80005ac:	e7cb      	b.n	8000546 <__aeabi_i2f+0x32>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	fbffffff 	.word	0xfbffffff

080005b4 <__aeabi_dadd>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	464f      	mov	r7, r9
 80005b8:	4646      	mov	r6, r8
 80005ba:	46d6      	mov	lr, sl
 80005bc:	b5c0      	push	{r6, r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	030e      	lsls	r6, r1, #12
 80005c6:	004c      	lsls	r4, r1, #1
 80005c8:	0fcd      	lsrs	r5, r1, #31
 80005ca:	0a71      	lsrs	r1, r6, #9
 80005cc:	9e00      	ldr	r6, [sp, #0]
 80005ce:	005f      	lsls	r7, r3, #1
 80005d0:	0f76      	lsrs	r6, r6, #29
 80005d2:	430e      	orrs	r6, r1
 80005d4:	9900      	ldr	r1, [sp, #0]
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	00c9      	lsls	r1, r1, #3
 80005dc:	4689      	mov	r9, r1
 80005de:	0319      	lsls	r1, r3, #12
 80005e0:	0d7b      	lsrs	r3, r7, #21
 80005e2:	4698      	mov	r8, r3
 80005e4:	9b01      	ldr	r3, [sp, #4]
 80005e6:	0a49      	lsrs	r1, r1, #9
 80005e8:	0fdb      	lsrs	r3, r3, #31
 80005ea:	469c      	mov	ip, r3
 80005ec:	9b00      	ldr	r3, [sp, #0]
 80005ee:	9a00      	ldr	r2, [sp, #0]
 80005f0:	0f5b      	lsrs	r3, r3, #29
 80005f2:	430b      	orrs	r3, r1
 80005f4:	4641      	mov	r1, r8
 80005f6:	0d64      	lsrs	r4, r4, #21
 80005f8:	00d2      	lsls	r2, r2, #3
 80005fa:	1a61      	subs	r1, r4, r1
 80005fc:	4565      	cmp	r5, ip
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x4e>
 8000600:	e0a6      	b.n	8000750 <__aeabi_dadd+0x19c>
 8000602:	2900      	cmp	r1, #0
 8000604:	dd72      	ble.n	80006ec <__aeabi_dadd+0x138>
 8000606:	4647      	mov	r7, r8
 8000608:	2f00      	cmp	r7, #0
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x5a>
 800060c:	e0dd      	b.n	80007ca <__aeabi_dadd+0x216>
 800060e:	4fcc      	ldr	r7, [pc, #816]	@ (8000940 <__aeabi_dadd+0x38c>)
 8000610:	42bc      	cmp	r4, r7
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x62>
 8000614:	e19a      	b.n	800094c <__aeabi_dadd+0x398>
 8000616:	2701      	movs	r7, #1
 8000618:	2938      	cmp	r1, #56	@ 0x38
 800061a:	dc17      	bgt.n	800064c <__aeabi_dadd+0x98>
 800061c:	2780      	movs	r7, #128	@ 0x80
 800061e:	043f      	lsls	r7, r7, #16
 8000620:	433b      	orrs	r3, r7
 8000622:	291f      	cmp	r1, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x74>
 8000626:	e1dd      	b.n	80009e4 <__aeabi_dadd+0x430>
 8000628:	2720      	movs	r7, #32
 800062a:	1a78      	subs	r0, r7, r1
 800062c:	001f      	movs	r7, r3
 800062e:	4087      	lsls	r7, r0
 8000630:	46ba      	mov	sl, r7
 8000632:	0017      	movs	r7, r2
 8000634:	40cf      	lsrs	r7, r1
 8000636:	4684      	mov	ip, r0
 8000638:	0038      	movs	r0, r7
 800063a:	4657      	mov	r7, sl
 800063c:	4307      	orrs	r7, r0
 800063e:	4660      	mov	r0, ip
 8000640:	4082      	lsls	r2, r0
 8000642:	40cb      	lsrs	r3, r1
 8000644:	1e50      	subs	r0, r2, #1
 8000646:	4182      	sbcs	r2, r0
 8000648:	1af6      	subs	r6, r6, r3
 800064a:	4317      	orrs	r7, r2
 800064c:	464b      	mov	r3, r9
 800064e:	1bdf      	subs	r7, r3, r7
 8000650:	45b9      	cmp	r9, r7
 8000652:	4180      	sbcs	r0, r0
 8000654:	4240      	negs	r0, r0
 8000656:	1a36      	subs	r6, r6, r0
 8000658:	0233      	lsls	r3, r6, #8
 800065a:	d400      	bmi.n	800065e <__aeabi_dadd+0xaa>
 800065c:	e0ff      	b.n	800085e <__aeabi_dadd+0x2aa>
 800065e:	0276      	lsls	r6, r6, #9
 8000660:	0a76      	lsrs	r6, r6, #9
 8000662:	2e00      	cmp	r6, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0xb4>
 8000666:	e13c      	b.n	80008e2 <__aeabi_dadd+0x32e>
 8000668:	0030      	movs	r0, r6
 800066a:	f001 fb23 	bl	8001cb4 <__clzsi2>
 800066e:	0003      	movs	r3, r0
 8000670:	3b08      	subs	r3, #8
 8000672:	2120      	movs	r1, #32
 8000674:	0038      	movs	r0, r7
 8000676:	1aca      	subs	r2, r1, r3
 8000678:	40d0      	lsrs	r0, r2
 800067a:	409e      	lsls	r6, r3
 800067c:	0002      	movs	r2, r0
 800067e:	409f      	lsls	r7, r3
 8000680:	4332      	orrs	r2, r6
 8000682:	429c      	cmp	r4, r3
 8000684:	dd00      	ble.n	8000688 <__aeabi_dadd+0xd4>
 8000686:	e1a6      	b.n	80009d6 <__aeabi_dadd+0x422>
 8000688:	1b18      	subs	r0, r3, r4
 800068a:	3001      	adds	r0, #1
 800068c:	1a09      	subs	r1, r1, r0
 800068e:	003e      	movs	r6, r7
 8000690:	408f      	lsls	r7, r1
 8000692:	40c6      	lsrs	r6, r0
 8000694:	1e7b      	subs	r3, r7, #1
 8000696:	419f      	sbcs	r7, r3
 8000698:	0013      	movs	r3, r2
 800069a:	408b      	lsls	r3, r1
 800069c:	4337      	orrs	r7, r6
 800069e:	431f      	orrs	r7, r3
 80006a0:	40c2      	lsrs	r2, r0
 80006a2:	003b      	movs	r3, r7
 80006a4:	0016      	movs	r6, r2
 80006a6:	2400      	movs	r4, #0
 80006a8:	4313      	orrs	r3, r2
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0xfa>
 80006ac:	e1df      	b.n	8000a6e <__aeabi_dadd+0x4ba>
 80006ae:	077b      	lsls	r3, r7, #29
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x100>
 80006b2:	e332      	b.n	8000d1a <__aeabi_dadd+0x766>
 80006b4:	230f      	movs	r3, #15
 80006b6:	003a      	movs	r2, r7
 80006b8:	403b      	ands	r3, r7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d004      	beq.n	80006c8 <__aeabi_dadd+0x114>
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	42ba      	cmp	r2, r7
 80006c2:	41bf      	sbcs	r7, r7
 80006c4:	427f      	negs	r7, r7
 80006c6:	19f6      	adds	r6, r6, r7
 80006c8:	0233      	lsls	r3, r6, #8
 80006ca:	d400      	bmi.n	80006ce <__aeabi_dadd+0x11a>
 80006cc:	e323      	b.n	8000d16 <__aeabi_dadd+0x762>
 80006ce:	4b9c      	ldr	r3, [pc, #624]	@ (8000940 <__aeabi_dadd+0x38c>)
 80006d0:	3401      	adds	r4, #1
 80006d2:	429c      	cmp	r4, r3
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x124>
 80006d6:	e0b4      	b.n	8000842 <__aeabi_dadd+0x28e>
 80006d8:	4b9a      	ldr	r3, [pc, #616]	@ (8000944 <__aeabi_dadd+0x390>)
 80006da:	0564      	lsls	r4, r4, #21
 80006dc:	401e      	ands	r6, r3
 80006de:	0d64      	lsrs	r4, r4, #21
 80006e0:	0777      	lsls	r7, r6, #29
 80006e2:	08d2      	lsrs	r2, r2, #3
 80006e4:	0276      	lsls	r6, r6, #9
 80006e6:	4317      	orrs	r7, r2
 80006e8:	0b36      	lsrs	r6, r6, #12
 80006ea:	e0ac      	b.n	8000846 <__aeabi_dadd+0x292>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x13e>
 80006f0:	e07e      	b.n	80007f0 <__aeabi_dadd+0x23c>
 80006f2:	4641      	mov	r1, r8
 80006f4:	1b09      	subs	r1, r1, r4
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d000      	beq.n	80006fc <__aeabi_dadd+0x148>
 80006fa:	e160      	b.n	80009be <__aeabi_dadd+0x40a>
 80006fc:	0034      	movs	r4, r6
 80006fe:	4648      	mov	r0, r9
 8000700:	4304      	orrs	r4, r0
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x152>
 8000704:	e1c9      	b.n	8000a9a <__aeabi_dadd+0x4e6>
 8000706:	1e4c      	subs	r4, r1, #1
 8000708:	2901      	cmp	r1, #1
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x15a>
 800070c:	e22e      	b.n	8000b6c <__aeabi_dadd+0x5b8>
 800070e:	4d8c      	ldr	r5, [pc, #560]	@ (8000940 <__aeabi_dadd+0x38c>)
 8000710:	42a9      	cmp	r1, r5
 8000712:	d100      	bne.n	8000716 <__aeabi_dadd+0x162>
 8000714:	e224      	b.n	8000b60 <__aeabi_dadd+0x5ac>
 8000716:	2701      	movs	r7, #1
 8000718:	2c38      	cmp	r4, #56	@ 0x38
 800071a:	dc11      	bgt.n	8000740 <__aeabi_dadd+0x18c>
 800071c:	0021      	movs	r1, r4
 800071e:	291f      	cmp	r1, #31
 8000720:	dd00      	ble.n	8000724 <__aeabi_dadd+0x170>
 8000722:	e20b      	b.n	8000b3c <__aeabi_dadd+0x588>
 8000724:	2420      	movs	r4, #32
 8000726:	0037      	movs	r7, r6
 8000728:	4648      	mov	r0, r9
 800072a:	1a64      	subs	r4, r4, r1
 800072c:	40a7      	lsls	r7, r4
 800072e:	40c8      	lsrs	r0, r1
 8000730:	4307      	orrs	r7, r0
 8000732:	4648      	mov	r0, r9
 8000734:	40a0      	lsls	r0, r4
 8000736:	40ce      	lsrs	r6, r1
 8000738:	1e44      	subs	r4, r0, #1
 800073a:	41a0      	sbcs	r0, r4
 800073c:	1b9b      	subs	r3, r3, r6
 800073e:	4307      	orrs	r7, r0
 8000740:	1bd7      	subs	r7, r2, r7
 8000742:	42ba      	cmp	r2, r7
 8000744:	4192      	sbcs	r2, r2
 8000746:	4252      	negs	r2, r2
 8000748:	4665      	mov	r5, ip
 800074a:	4644      	mov	r4, r8
 800074c:	1a9e      	subs	r6, r3, r2
 800074e:	e783      	b.n	8000658 <__aeabi_dadd+0xa4>
 8000750:	2900      	cmp	r1, #0
 8000752:	dc00      	bgt.n	8000756 <__aeabi_dadd+0x1a2>
 8000754:	e09c      	b.n	8000890 <__aeabi_dadd+0x2dc>
 8000756:	4647      	mov	r7, r8
 8000758:	2f00      	cmp	r7, #0
 800075a:	d167      	bne.n	800082c <__aeabi_dadd+0x278>
 800075c:	001f      	movs	r7, r3
 800075e:	4317      	orrs	r7, r2
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x1b0>
 8000762:	e0e4      	b.n	800092e <__aeabi_dadd+0x37a>
 8000764:	1e48      	subs	r0, r1, #1
 8000766:	2901      	cmp	r1, #1
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x1b8>
 800076a:	e19b      	b.n	8000aa4 <__aeabi_dadd+0x4f0>
 800076c:	4f74      	ldr	r7, [pc, #464]	@ (8000940 <__aeabi_dadd+0x38c>)
 800076e:	42b9      	cmp	r1, r7
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x1c0>
 8000772:	e0eb      	b.n	800094c <__aeabi_dadd+0x398>
 8000774:	2701      	movs	r7, #1
 8000776:	0001      	movs	r1, r0
 8000778:	2838      	cmp	r0, #56	@ 0x38
 800077a:	dc11      	bgt.n	80007a0 <__aeabi_dadd+0x1ec>
 800077c:	291f      	cmp	r1, #31
 800077e:	dd00      	ble.n	8000782 <__aeabi_dadd+0x1ce>
 8000780:	e1c7      	b.n	8000b12 <__aeabi_dadd+0x55e>
 8000782:	2720      	movs	r7, #32
 8000784:	1a78      	subs	r0, r7, r1
 8000786:	001f      	movs	r7, r3
 8000788:	4684      	mov	ip, r0
 800078a:	4087      	lsls	r7, r0
 800078c:	0010      	movs	r0, r2
 800078e:	40c8      	lsrs	r0, r1
 8000790:	4307      	orrs	r7, r0
 8000792:	4660      	mov	r0, ip
 8000794:	4082      	lsls	r2, r0
 8000796:	40cb      	lsrs	r3, r1
 8000798:	1e50      	subs	r0, r2, #1
 800079a:	4182      	sbcs	r2, r0
 800079c:	18f6      	adds	r6, r6, r3
 800079e:	4317      	orrs	r7, r2
 80007a0:	444f      	add	r7, r9
 80007a2:	454f      	cmp	r7, r9
 80007a4:	4180      	sbcs	r0, r0
 80007a6:	4240      	negs	r0, r0
 80007a8:	1836      	adds	r6, r6, r0
 80007aa:	0233      	lsls	r3, r6, #8
 80007ac:	d557      	bpl.n	800085e <__aeabi_dadd+0x2aa>
 80007ae:	4b64      	ldr	r3, [pc, #400]	@ (8000940 <__aeabi_dadd+0x38c>)
 80007b0:	3401      	adds	r4, #1
 80007b2:	429c      	cmp	r4, r3
 80007b4:	d045      	beq.n	8000842 <__aeabi_dadd+0x28e>
 80007b6:	2101      	movs	r1, #1
 80007b8:	4b62      	ldr	r3, [pc, #392]	@ (8000944 <__aeabi_dadd+0x390>)
 80007ba:	087a      	lsrs	r2, r7, #1
 80007bc:	401e      	ands	r6, r3
 80007be:	4039      	ands	r1, r7
 80007c0:	430a      	orrs	r2, r1
 80007c2:	07f7      	lsls	r7, r6, #31
 80007c4:	4317      	orrs	r7, r2
 80007c6:	0876      	lsrs	r6, r6, #1
 80007c8:	e771      	b.n	80006ae <__aeabi_dadd+0xfa>
 80007ca:	001f      	movs	r7, r3
 80007cc:	4317      	orrs	r7, r2
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x21e>
 80007d0:	e0ad      	b.n	800092e <__aeabi_dadd+0x37a>
 80007d2:	1e4f      	subs	r7, r1, #1
 80007d4:	46bc      	mov	ip, r7
 80007d6:	2901      	cmp	r1, #1
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x228>
 80007da:	e182      	b.n	8000ae2 <__aeabi_dadd+0x52e>
 80007dc:	4f58      	ldr	r7, [pc, #352]	@ (8000940 <__aeabi_dadd+0x38c>)
 80007de:	42b9      	cmp	r1, r7
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0x230>
 80007e2:	e190      	b.n	8000b06 <__aeabi_dadd+0x552>
 80007e4:	4661      	mov	r1, ip
 80007e6:	2701      	movs	r7, #1
 80007e8:	2938      	cmp	r1, #56	@ 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x23a>
 80007ec:	e72e      	b.n	800064c <__aeabi_dadd+0x98>
 80007ee:	e718      	b.n	8000622 <__aeabi_dadd+0x6e>
 80007f0:	4f55      	ldr	r7, [pc, #340]	@ (8000948 <__aeabi_dadd+0x394>)
 80007f2:	1c61      	adds	r1, r4, #1
 80007f4:	4239      	tst	r1, r7
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x246>
 80007f8:	e0d0      	b.n	800099c <__aeabi_dadd+0x3e8>
 80007fa:	0031      	movs	r1, r6
 80007fc:	4648      	mov	r0, r9
 80007fe:	001f      	movs	r7, r3
 8000800:	4301      	orrs	r1, r0
 8000802:	4317      	orrs	r7, r2
 8000804:	2c00      	cmp	r4, #0
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x256>
 8000808:	e13d      	b.n	8000a86 <__aeabi_dadd+0x4d2>
 800080a:	2900      	cmp	r1, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x25c>
 800080e:	e1bc      	b.n	8000b8a <__aeabi_dadd+0x5d6>
 8000810:	2f00      	cmp	r7, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x262>
 8000814:	e1bf      	b.n	8000b96 <__aeabi_dadd+0x5e2>
 8000816:	464b      	mov	r3, r9
 8000818:	2100      	movs	r1, #0
 800081a:	08d8      	lsrs	r0, r3, #3
 800081c:	0777      	lsls	r7, r6, #29
 800081e:	4307      	orrs	r7, r0
 8000820:	08f0      	lsrs	r0, r6, #3
 8000822:	0306      	lsls	r6, r0, #12
 8000824:	054c      	lsls	r4, r1, #21
 8000826:	0b36      	lsrs	r6, r6, #12
 8000828:	0d64      	lsrs	r4, r4, #21
 800082a:	e00c      	b.n	8000846 <__aeabi_dadd+0x292>
 800082c:	4f44      	ldr	r7, [pc, #272]	@ (8000940 <__aeabi_dadd+0x38c>)
 800082e:	42bc      	cmp	r4, r7
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x280>
 8000832:	e08b      	b.n	800094c <__aeabi_dadd+0x398>
 8000834:	2701      	movs	r7, #1
 8000836:	2938      	cmp	r1, #56	@ 0x38
 8000838:	dcb2      	bgt.n	80007a0 <__aeabi_dadd+0x1ec>
 800083a:	2780      	movs	r7, #128	@ 0x80
 800083c:	043f      	lsls	r7, r7, #16
 800083e:	433b      	orrs	r3, r7
 8000840:	e79c      	b.n	800077c <__aeabi_dadd+0x1c8>
 8000842:	2600      	movs	r6, #0
 8000844:	2700      	movs	r7, #0
 8000846:	0524      	lsls	r4, r4, #20
 8000848:	4334      	orrs	r4, r6
 800084a:	07ed      	lsls	r5, r5, #31
 800084c:	432c      	orrs	r4, r5
 800084e:	0038      	movs	r0, r7
 8000850:	0021      	movs	r1, r4
 8000852:	b002      	add	sp, #8
 8000854:	bce0      	pop	{r5, r6, r7}
 8000856:	46ba      	mov	sl, r7
 8000858:	46b1      	mov	r9, r6
 800085a:	46a8      	mov	r8, r5
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	077b      	lsls	r3, r7, #29
 8000860:	d004      	beq.n	800086c <__aeabi_dadd+0x2b8>
 8000862:	230f      	movs	r3, #15
 8000864:	403b      	ands	r3, r7
 8000866:	2b04      	cmp	r3, #4
 8000868:	d000      	beq.n	800086c <__aeabi_dadd+0x2b8>
 800086a:	e728      	b.n	80006be <__aeabi_dadd+0x10a>
 800086c:	08f8      	lsrs	r0, r7, #3
 800086e:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <__aeabi_dadd+0x38c>)
 8000870:	0777      	lsls	r7, r6, #29
 8000872:	4307      	orrs	r7, r0
 8000874:	08f0      	lsrs	r0, r6, #3
 8000876:	429c      	cmp	r4, r3
 8000878:	d000      	beq.n	800087c <__aeabi_dadd+0x2c8>
 800087a:	e24a      	b.n	8000d12 <__aeabi_dadd+0x75e>
 800087c:	003b      	movs	r3, r7
 800087e:	4303      	orrs	r3, r0
 8000880:	d059      	beq.n	8000936 <__aeabi_dadd+0x382>
 8000882:	2680      	movs	r6, #128	@ 0x80
 8000884:	0336      	lsls	r6, r6, #12
 8000886:	4306      	orrs	r6, r0
 8000888:	0336      	lsls	r6, r6, #12
 800088a:	4c2d      	ldr	r4, [pc, #180]	@ (8000940 <__aeabi_dadd+0x38c>)
 800088c:	0b36      	lsrs	r6, r6, #12
 800088e:	e7da      	b.n	8000846 <__aeabi_dadd+0x292>
 8000890:	2900      	cmp	r1, #0
 8000892:	d061      	beq.n	8000958 <__aeabi_dadd+0x3a4>
 8000894:	4641      	mov	r1, r8
 8000896:	1b09      	subs	r1, r1, r4
 8000898:	2c00      	cmp	r4, #0
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x2ea>
 800089c:	e0b9      	b.n	8000a12 <__aeabi_dadd+0x45e>
 800089e:	4c28      	ldr	r4, [pc, #160]	@ (8000940 <__aeabi_dadd+0x38c>)
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x2f2>
 80008a4:	e1a5      	b.n	8000bf2 <__aeabi_dadd+0x63e>
 80008a6:	2701      	movs	r7, #1
 80008a8:	2938      	cmp	r1, #56	@ 0x38
 80008aa:	dc13      	bgt.n	80008d4 <__aeabi_dadd+0x320>
 80008ac:	2480      	movs	r4, #128	@ 0x80
 80008ae:	0424      	lsls	r4, r4, #16
 80008b0:	4326      	orrs	r6, r4
 80008b2:	291f      	cmp	r1, #31
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dadd+0x304>
 80008b6:	e1c8      	b.n	8000c4a <__aeabi_dadd+0x696>
 80008b8:	2420      	movs	r4, #32
 80008ba:	0037      	movs	r7, r6
 80008bc:	4648      	mov	r0, r9
 80008be:	1a64      	subs	r4, r4, r1
 80008c0:	40a7      	lsls	r7, r4
 80008c2:	40c8      	lsrs	r0, r1
 80008c4:	4307      	orrs	r7, r0
 80008c6:	4648      	mov	r0, r9
 80008c8:	40a0      	lsls	r0, r4
 80008ca:	40ce      	lsrs	r6, r1
 80008cc:	1e44      	subs	r4, r0, #1
 80008ce:	41a0      	sbcs	r0, r4
 80008d0:	199b      	adds	r3, r3, r6
 80008d2:	4307      	orrs	r7, r0
 80008d4:	18bf      	adds	r7, r7, r2
 80008d6:	4297      	cmp	r7, r2
 80008d8:	4192      	sbcs	r2, r2
 80008da:	4252      	negs	r2, r2
 80008dc:	4644      	mov	r4, r8
 80008de:	18d6      	adds	r6, r2, r3
 80008e0:	e763      	b.n	80007aa <__aeabi_dadd+0x1f6>
 80008e2:	0038      	movs	r0, r7
 80008e4:	f001 f9e6 	bl	8001cb4 <__clzsi2>
 80008e8:	0003      	movs	r3, r0
 80008ea:	3318      	adds	r3, #24
 80008ec:	2b1f      	cmp	r3, #31
 80008ee:	dc00      	bgt.n	80008f2 <__aeabi_dadd+0x33e>
 80008f0:	e6bf      	b.n	8000672 <__aeabi_dadd+0xbe>
 80008f2:	003a      	movs	r2, r7
 80008f4:	3808      	subs	r0, #8
 80008f6:	4082      	lsls	r2, r0
 80008f8:	429c      	cmp	r4, r3
 80008fa:	dd00      	ble.n	80008fe <__aeabi_dadd+0x34a>
 80008fc:	e083      	b.n	8000a06 <__aeabi_dadd+0x452>
 80008fe:	1b1b      	subs	r3, r3, r4
 8000900:	1c58      	adds	r0, r3, #1
 8000902:	281f      	cmp	r0, #31
 8000904:	dc00      	bgt.n	8000908 <__aeabi_dadd+0x354>
 8000906:	e1b4      	b.n	8000c72 <__aeabi_dadd+0x6be>
 8000908:	0017      	movs	r7, r2
 800090a:	3b1f      	subs	r3, #31
 800090c:	40df      	lsrs	r7, r3
 800090e:	2820      	cmp	r0, #32
 8000910:	d005      	beq.n	800091e <__aeabi_dadd+0x36a>
 8000912:	2340      	movs	r3, #64	@ 0x40
 8000914:	1a1b      	subs	r3, r3, r0
 8000916:	409a      	lsls	r2, r3
 8000918:	1e53      	subs	r3, r2, #1
 800091a:	419a      	sbcs	r2, r3
 800091c:	4317      	orrs	r7, r2
 800091e:	2400      	movs	r4, #0
 8000920:	2f00      	cmp	r7, #0
 8000922:	d00a      	beq.n	800093a <__aeabi_dadd+0x386>
 8000924:	077b      	lsls	r3, r7, #29
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x376>
 8000928:	e6c4      	b.n	80006b4 <__aeabi_dadd+0x100>
 800092a:	0026      	movs	r6, r4
 800092c:	e79e      	b.n	800086c <__aeabi_dadd+0x2b8>
 800092e:	464b      	mov	r3, r9
 8000930:	000c      	movs	r4, r1
 8000932:	08d8      	lsrs	r0, r3, #3
 8000934:	e79b      	b.n	800086e <__aeabi_dadd+0x2ba>
 8000936:	2700      	movs	r7, #0
 8000938:	4c01      	ldr	r4, [pc, #4]	@ (8000940 <__aeabi_dadd+0x38c>)
 800093a:	2600      	movs	r6, #0
 800093c:	e783      	b.n	8000846 <__aeabi_dadd+0x292>
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	000007ff 	.word	0x000007ff
 8000944:	ff7fffff 	.word	0xff7fffff
 8000948:	000007fe 	.word	0x000007fe
 800094c:	464b      	mov	r3, r9
 800094e:	0777      	lsls	r7, r6, #29
 8000950:	08d8      	lsrs	r0, r3, #3
 8000952:	4307      	orrs	r7, r0
 8000954:	08f0      	lsrs	r0, r6, #3
 8000956:	e791      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000958:	4fcd      	ldr	r7, [pc, #820]	@ (8000c90 <__aeabi_dadd+0x6dc>)
 800095a:	1c61      	adds	r1, r4, #1
 800095c:	4239      	tst	r1, r7
 800095e:	d16b      	bne.n	8000a38 <__aeabi_dadd+0x484>
 8000960:	0031      	movs	r1, r6
 8000962:	4648      	mov	r0, r9
 8000964:	4301      	orrs	r1, r0
 8000966:	2c00      	cmp	r4, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x3b8>
 800096a:	e14b      	b.n	8000c04 <__aeabi_dadd+0x650>
 800096c:	001f      	movs	r7, r3
 800096e:	4317      	orrs	r7, r2
 8000970:	2900      	cmp	r1, #0
 8000972:	d100      	bne.n	8000976 <__aeabi_dadd+0x3c2>
 8000974:	e181      	b.n	8000c7a <__aeabi_dadd+0x6c6>
 8000976:	2f00      	cmp	r7, #0
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x3c8>
 800097a:	e74c      	b.n	8000816 <__aeabi_dadd+0x262>
 800097c:	444a      	add	r2, r9
 800097e:	454a      	cmp	r2, r9
 8000980:	4180      	sbcs	r0, r0
 8000982:	18f6      	adds	r6, r6, r3
 8000984:	4240      	negs	r0, r0
 8000986:	1836      	adds	r6, r6, r0
 8000988:	0233      	lsls	r3, r6, #8
 800098a:	d500      	bpl.n	800098e <__aeabi_dadd+0x3da>
 800098c:	e1b0      	b.n	8000cf0 <__aeabi_dadd+0x73c>
 800098e:	0017      	movs	r7, r2
 8000990:	4691      	mov	r9, r2
 8000992:	4337      	orrs	r7, r6
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x3e4>
 8000996:	e73e      	b.n	8000816 <__aeabi_dadd+0x262>
 8000998:	2600      	movs	r6, #0
 800099a:	e754      	b.n	8000846 <__aeabi_dadd+0x292>
 800099c:	4649      	mov	r1, r9
 800099e:	1a89      	subs	r1, r1, r2
 80009a0:	4688      	mov	r8, r1
 80009a2:	45c1      	cmp	r9, r8
 80009a4:	41bf      	sbcs	r7, r7
 80009a6:	1af1      	subs	r1, r6, r3
 80009a8:	427f      	negs	r7, r7
 80009aa:	1bc9      	subs	r1, r1, r7
 80009ac:	020f      	lsls	r7, r1, #8
 80009ae:	d461      	bmi.n	8000a74 <__aeabi_dadd+0x4c0>
 80009b0:	4647      	mov	r7, r8
 80009b2:	430f      	orrs	r7, r1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x404>
 80009b6:	e0bd      	b.n	8000b34 <__aeabi_dadd+0x580>
 80009b8:	000e      	movs	r6, r1
 80009ba:	4647      	mov	r7, r8
 80009bc:	e651      	b.n	8000662 <__aeabi_dadd+0xae>
 80009be:	4cb5      	ldr	r4, [pc, #724]	@ (8000c94 <__aeabi_dadd+0x6e0>)
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x412>
 80009c4:	e100      	b.n	8000bc8 <__aeabi_dadd+0x614>
 80009c6:	2701      	movs	r7, #1
 80009c8:	2938      	cmp	r1, #56	@ 0x38
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dadd+0x41a>
 80009cc:	e6b8      	b.n	8000740 <__aeabi_dadd+0x18c>
 80009ce:	2480      	movs	r4, #128	@ 0x80
 80009d0:	0424      	lsls	r4, r4, #16
 80009d2:	4326      	orrs	r6, r4
 80009d4:	e6a3      	b.n	800071e <__aeabi_dadd+0x16a>
 80009d6:	4eb0      	ldr	r6, [pc, #704]	@ (8000c98 <__aeabi_dadd+0x6e4>)
 80009d8:	1ae4      	subs	r4, r4, r3
 80009da:	4016      	ands	r6, r2
 80009dc:	077b      	lsls	r3, r7, #29
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x42e>
 80009e0:	e73f      	b.n	8000862 <__aeabi_dadd+0x2ae>
 80009e2:	e743      	b.n	800086c <__aeabi_dadd+0x2b8>
 80009e4:	000f      	movs	r7, r1
 80009e6:	0018      	movs	r0, r3
 80009e8:	3f20      	subs	r7, #32
 80009ea:	40f8      	lsrs	r0, r7
 80009ec:	4684      	mov	ip, r0
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x446>
 80009f2:	2740      	movs	r7, #64	@ 0x40
 80009f4:	1a79      	subs	r1, r7, r1
 80009f6:	408b      	lsls	r3, r1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	1e53      	subs	r3, r2, #1
 80009fc:	419a      	sbcs	r2, r3
 80009fe:	4663      	mov	r3, ip
 8000a00:	0017      	movs	r7, r2
 8000a02:	431f      	orrs	r7, r3
 8000a04:	e622      	b.n	800064c <__aeabi_dadd+0x98>
 8000a06:	48a4      	ldr	r0, [pc, #656]	@ (8000c98 <__aeabi_dadd+0x6e4>)
 8000a08:	1ae1      	subs	r1, r4, r3
 8000a0a:	4010      	ands	r0, r2
 8000a0c:	0747      	lsls	r7, r0, #29
 8000a0e:	08c0      	lsrs	r0, r0, #3
 8000a10:	e707      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000a12:	0034      	movs	r4, r6
 8000a14:	4648      	mov	r0, r9
 8000a16:	4304      	orrs	r4, r0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x468>
 8000a1a:	e0fa      	b.n	8000c12 <__aeabi_dadd+0x65e>
 8000a1c:	1e4c      	subs	r4, r1, #1
 8000a1e:	2901      	cmp	r1, #1
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x470>
 8000a22:	e0d7      	b.n	8000bd4 <__aeabi_dadd+0x620>
 8000a24:	4f9b      	ldr	r7, [pc, #620]	@ (8000c94 <__aeabi_dadd+0x6e0>)
 8000a26:	42b9      	cmp	r1, r7
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dadd+0x478>
 8000a2a:	e0e2      	b.n	8000bf2 <__aeabi_dadd+0x63e>
 8000a2c:	2701      	movs	r7, #1
 8000a2e:	2c38      	cmp	r4, #56	@ 0x38
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x480>
 8000a32:	e74f      	b.n	80008d4 <__aeabi_dadd+0x320>
 8000a34:	0021      	movs	r1, r4
 8000a36:	e73c      	b.n	80008b2 <__aeabi_dadd+0x2fe>
 8000a38:	4c96      	ldr	r4, [pc, #600]	@ (8000c94 <__aeabi_dadd+0x6e0>)
 8000a3a:	42a1      	cmp	r1, r4
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x48c>
 8000a3e:	e0dd      	b.n	8000bfc <__aeabi_dadd+0x648>
 8000a40:	444a      	add	r2, r9
 8000a42:	454a      	cmp	r2, r9
 8000a44:	4180      	sbcs	r0, r0
 8000a46:	18f3      	adds	r3, r6, r3
 8000a48:	4240      	negs	r0, r0
 8000a4a:	1818      	adds	r0, r3, r0
 8000a4c:	07c7      	lsls	r7, r0, #31
 8000a4e:	0852      	lsrs	r2, r2, #1
 8000a50:	4317      	orrs	r7, r2
 8000a52:	0846      	lsrs	r6, r0, #1
 8000a54:	0752      	lsls	r2, r2, #29
 8000a56:	d005      	beq.n	8000a64 <__aeabi_dadd+0x4b0>
 8000a58:	220f      	movs	r2, #15
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	403a      	ands	r2, r7
 8000a5e:	2a04      	cmp	r2, #4
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dadd+0x4b0>
 8000a62:	e62c      	b.n	80006be <__aeabi_dadd+0x10a>
 8000a64:	0776      	lsls	r6, r6, #29
 8000a66:	08ff      	lsrs	r7, r7, #3
 8000a68:	4337      	orrs	r7, r6
 8000a6a:	0900      	lsrs	r0, r0, #4
 8000a6c:	e6d9      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000a6e:	2700      	movs	r7, #0
 8000a70:	2600      	movs	r6, #0
 8000a72:	e6e8      	b.n	8000846 <__aeabi_dadd+0x292>
 8000a74:	4649      	mov	r1, r9
 8000a76:	1a57      	subs	r7, r2, r1
 8000a78:	42ba      	cmp	r2, r7
 8000a7a:	4192      	sbcs	r2, r2
 8000a7c:	1b9e      	subs	r6, r3, r6
 8000a7e:	4252      	negs	r2, r2
 8000a80:	4665      	mov	r5, ip
 8000a82:	1ab6      	subs	r6, r6, r2
 8000a84:	e5ed      	b.n	8000662 <__aeabi_dadd+0xae>
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d000      	beq.n	8000a8c <__aeabi_dadd+0x4d8>
 8000a8a:	e0c6      	b.n	8000c1a <__aeabi_dadd+0x666>
 8000a8c:	2f00      	cmp	r7, #0
 8000a8e:	d167      	bne.n	8000b60 <__aeabi_dadd+0x5ac>
 8000a90:	2680      	movs	r6, #128	@ 0x80
 8000a92:	2500      	movs	r5, #0
 8000a94:	4c7f      	ldr	r4, [pc, #508]	@ (8000c94 <__aeabi_dadd+0x6e0>)
 8000a96:	0336      	lsls	r6, r6, #12
 8000a98:	e6d5      	b.n	8000846 <__aeabi_dadd+0x292>
 8000a9a:	4665      	mov	r5, ip
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	001e      	movs	r6, r3
 8000aa0:	08d0      	lsrs	r0, r2, #3
 8000aa2:	e6e4      	b.n	800086e <__aeabi_dadd+0x2ba>
 8000aa4:	444a      	add	r2, r9
 8000aa6:	454a      	cmp	r2, r9
 8000aa8:	4180      	sbcs	r0, r0
 8000aaa:	18f3      	adds	r3, r6, r3
 8000aac:	4240      	negs	r0, r0
 8000aae:	1818      	adds	r0, r3, r0
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0203      	lsls	r3, r0, #8
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_dadd+0x504>
 8000ab6:	e096      	b.n	8000be6 <__aeabi_dadd+0x632>
 8000ab8:	4b77      	ldr	r3, [pc, #476]	@ (8000c98 <__aeabi_dadd+0x6e4>)
 8000aba:	0849      	lsrs	r1, r1, #1
 8000abc:	4018      	ands	r0, r3
 8000abe:	07c3      	lsls	r3, r0, #31
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	0844      	lsrs	r4, r0, #1
 8000ac4:	0749      	lsls	r1, r1, #29
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x516>
 8000ac8:	e129      	b.n	8000d1e <__aeabi_dadd+0x76a>
 8000aca:	220f      	movs	r2, #15
 8000acc:	401a      	ands	r2, r3
 8000ace:	2a04      	cmp	r2, #4
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x520>
 8000ad2:	e0ea      	b.n	8000caa <__aeabi_dadd+0x6f6>
 8000ad4:	1d1f      	adds	r7, r3, #4
 8000ad6:	429f      	cmp	r7, r3
 8000ad8:	41b6      	sbcs	r6, r6
 8000ada:	4276      	negs	r6, r6
 8000adc:	1936      	adds	r6, r6, r4
 8000ade:	2402      	movs	r4, #2
 8000ae0:	e6c4      	b.n	800086c <__aeabi_dadd+0x2b8>
 8000ae2:	4649      	mov	r1, r9
 8000ae4:	1a8f      	subs	r7, r1, r2
 8000ae6:	45b9      	cmp	r9, r7
 8000ae8:	4180      	sbcs	r0, r0
 8000aea:	1af6      	subs	r6, r6, r3
 8000aec:	4240      	negs	r0, r0
 8000aee:	1a36      	subs	r6, r6, r0
 8000af0:	0233      	lsls	r3, r6, #8
 8000af2:	d406      	bmi.n	8000b02 <__aeabi_dadd+0x54e>
 8000af4:	0773      	lsls	r3, r6, #29
 8000af6:	08ff      	lsrs	r7, r7, #3
 8000af8:	2101      	movs	r1, #1
 8000afa:	431f      	orrs	r7, r3
 8000afc:	08f0      	lsrs	r0, r6, #3
 8000afe:	e690      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000b00:	4665      	mov	r5, ip
 8000b02:	2401      	movs	r4, #1
 8000b04:	e5ab      	b.n	800065e <__aeabi_dadd+0xaa>
 8000b06:	464b      	mov	r3, r9
 8000b08:	0777      	lsls	r7, r6, #29
 8000b0a:	08d8      	lsrs	r0, r3, #3
 8000b0c:	4307      	orrs	r7, r0
 8000b0e:	08f0      	lsrs	r0, r6, #3
 8000b10:	e6b4      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000b12:	000f      	movs	r7, r1
 8000b14:	0018      	movs	r0, r3
 8000b16:	3f20      	subs	r7, #32
 8000b18:	40f8      	lsrs	r0, r7
 8000b1a:	4684      	mov	ip, r0
 8000b1c:	2920      	cmp	r1, #32
 8000b1e:	d003      	beq.n	8000b28 <__aeabi_dadd+0x574>
 8000b20:	2740      	movs	r7, #64	@ 0x40
 8000b22:	1a79      	subs	r1, r7, r1
 8000b24:	408b      	lsls	r3, r1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	1e53      	subs	r3, r2, #1
 8000b2a:	419a      	sbcs	r2, r3
 8000b2c:	4663      	mov	r3, ip
 8000b2e:	0017      	movs	r7, r2
 8000b30:	431f      	orrs	r7, r3
 8000b32:	e635      	b.n	80007a0 <__aeabi_dadd+0x1ec>
 8000b34:	2500      	movs	r5, #0
 8000b36:	2400      	movs	r4, #0
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e684      	b.n	8000846 <__aeabi_dadd+0x292>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	0035      	movs	r5, r6
 8000b40:	3c20      	subs	r4, #32
 8000b42:	40e5      	lsrs	r5, r4
 8000b44:	2920      	cmp	r1, #32
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dadd+0x5a0>
 8000b48:	2440      	movs	r4, #64	@ 0x40
 8000b4a:	1a61      	subs	r1, r4, r1
 8000b4c:	408e      	lsls	r6, r1
 8000b4e:	4649      	mov	r1, r9
 8000b50:	4331      	orrs	r1, r6
 8000b52:	4689      	mov	r9, r1
 8000b54:	4648      	mov	r0, r9
 8000b56:	1e41      	subs	r1, r0, #1
 8000b58:	4188      	sbcs	r0, r1
 8000b5a:	0007      	movs	r7, r0
 8000b5c:	432f      	orrs	r7, r5
 8000b5e:	e5ef      	b.n	8000740 <__aeabi_dadd+0x18c>
 8000b60:	08d2      	lsrs	r2, r2, #3
 8000b62:	075f      	lsls	r7, r3, #29
 8000b64:	4665      	mov	r5, ip
 8000b66:	4317      	orrs	r7, r2
 8000b68:	08d8      	lsrs	r0, r3, #3
 8000b6a:	e687      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000b6c:	1a17      	subs	r7, r2, r0
 8000b6e:	42ba      	cmp	r2, r7
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	1b9e      	subs	r6, r3, r6
 8000b74:	4252      	negs	r2, r2
 8000b76:	1ab6      	subs	r6, r6, r2
 8000b78:	0233      	lsls	r3, r6, #8
 8000b7a:	d4c1      	bmi.n	8000b00 <__aeabi_dadd+0x54c>
 8000b7c:	0773      	lsls	r3, r6, #29
 8000b7e:	08ff      	lsrs	r7, r7, #3
 8000b80:	4665      	mov	r5, ip
 8000b82:	2101      	movs	r1, #1
 8000b84:	431f      	orrs	r7, r3
 8000b86:	08f0      	lsrs	r0, r6, #3
 8000b88:	e64b      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000b8a:	2f00      	cmp	r7, #0
 8000b8c:	d07b      	beq.n	8000c86 <__aeabi_dadd+0x6d2>
 8000b8e:	4665      	mov	r5, ip
 8000b90:	001e      	movs	r6, r3
 8000b92:	4691      	mov	r9, r2
 8000b94:	e63f      	b.n	8000816 <__aeabi_dadd+0x262>
 8000b96:	1a81      	subs	r1, r0, r2
 8000b98:	4688      	mov	r8, r1
 8000b9a:	45c1      	cmp	r9, r8
 8000b9c:	41a4      	sbcs	r4, r4
 8000b9e:	1af1      	subs	r1, r6, r3
 8000ba0:	4264      	negs	r4, r4
 8000ba2:	1b09      	subs	r1, r1, r4
 8000ba4:	2480      	movs	r4, #128	@ 0x80
 8000ba6:	0424      	lsls	r4, r4, #16
 8000ba8:	4221      	tst	r1, r4
 8000baa:	d077      	beq.n	8000c9c <__aeabi_dadd+0x6e8>
 8000bac:	1a10      	subs	r0, r2, r0
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	4192      	sbcs	r2, r2
 8000bb2:	0007      	movs	r7, r0
 8000bb4:	1b9e      	subs	r6, r3, r6
 8000bb6:	4252      	negs	r2, r2
 8000bb8:	1ab6      	subs	r6, r6, r2
 8000bba:	4337      	orrs	r7, r6
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dadd+0x60c>
 8000bbe:	e0a0      	b.n	8000d02 <__aeabi_dadd+0x74e>
 8000bc0:	4665      	mov	r5, ip
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	e63e      	b.n	8000846 <__aeabi_dadd+0x292>
 8000bc8:	075f      	lsls	r7, r3, #29
 8000bca:	08d2      	lsrs	r2, r2, #3
 8000bcc:	4665      	mov	r5, ip
 8000bce:	4317      	orrs	r7, r2
 8000bd0:	08d8      	lsrs	r0, r3, #3
 8000bd2:	e653      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000bd4:	1881      	adds	r1, r0, r2
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	4192      	sbcs	r2, r2
 8000bda:	18f0      	adds	r0, r6, r3
 8000bdc:	4252      	negs	r2, r2
 8000bde:	1880      	adds	r0, r0, r2
 8000be0:	0203      	lsls	r3, r0, #8
 8000be2:	d500      	bpl.n	8000be6 <__aeabi_dadd+0x632>
 8000be4:	e768      	b.n	8000ab8 <__aeabi_dadd+0x504>
 8000be6:	0747      	lsls	r7, r0, #29
 8000be8:	08c9      	lsrs	r1, r1, #3
 8000bea:	430f      	orrs	r7, r1
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	2101      	movs	r1, #1
 8000bf0:	e617      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000bf2:	08d2      	lsrs	r2, r2, #3
 8000bf4:	075f      	lsls	r7, r3, #29
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	08d8      	lsrs	r0, r3, #3
 8000bfa:	e63f      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	2600      	movs	r6, #0
 8000c00:	2700      	movs	r7, #0
 8000c02:	e620      	b.n	8000846 <__aeabi_dadd+0x292>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	d156      	bne.n	8000cb6 <__aeabi_dadd+0x702>
 8000c08:	075f      	lsls	r7, r3, #29
 8000c0a:	08d2      	lsrs	r2, r2, #3
 8000c0c:	4317      	orrs	r7, r2
 8000c0e:	08d8      	lsrs	r0, r3, #3
 8000c10:	e634      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000c12:	000c      	movs	r4, r1
 8000c14:	001e      	movs	r6, r3
 8000c16:	08d0      	lsrs	r0, r2, #3
 8000c18:	e629      	b.n	800086e <__aeabi_dadd+0x2ba>
 8000c1a:	08c1      	lsrs	r1, r0, #3
 8000c1c:	0770      	lsls	r0, r6, #29
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	08f0      	lsrs	r0, r6, #3
 8000c22:	2f00      	cmp	r7, #0
 8000c24:	d062      	beq.n	8000cec <__aeabi_dadd+0x738>
 8000c26:	2480      	movs	r4, #128	@ 0x80
 8000c28:	0324      	lsls	r4, r4, #12
 8000c2a:	4220      	tst	r0, r4
 8000c2c:	d007      	beq.n	8000c3e <__aeabi_dadd+0x68a>
 8000c2e:	08de      	lsrs	r6, r3, #3
 8000c30:	4226      	tst	r6, r4
 8000c32:	d104      	bne.n	8000c3e <__aeabi_dadd+0x68a>
 8000c34:	4665      	mov	r5, ip
 8000c36:	0030      	movs	r0, r6
 8000c38:	08d1      	lsrs	r1, r2, #3
 8000c3a:	075b      	lsls	r3, r3, #29
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0f4f      	lsrs	r7, r1, #29
 8000c40:	00c9      	lsls	r1, r1, #3
 8000c42:	08c9      	lsrs	r1, r1, #3
 8000c44:	077f      	lsls	r7, r7, #29
 8000c46:	430f      	orrs	r7, r1
 8000c48:	e618      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	0030      	movs	r0, r6
 8000c4e:	3c20      	subs	r4, #32
 8000c50:	40e0      	lsrs	r0, r4
 8000c52:	4684      	mov	ip, r0
 8000c54:	2920      	cmp	r1, #32
 8000c56:	d005      	beq.n	8000c64 <__aeabi_dadd+0x6b0>
 8000c58:	2440      	movs	r4, #64	@ 0x40
 8000c5a:	1a61      	subs	r1, r4, r1
 8000c5c:	408e      	lsls	r6, r1
 8000c5e:	4649      	mov	r1, r9
 8000c60:	4331      	orrs	r1, r6
 8000c62:	4689      	mov	r9, r1
 8000c64:	4648      	mov	r0, r9
 8000c66:	1e41      	subs	r1, r0, #1
 8000c68:	4188      	sbcs	r0, r1
 8000c6a:	4661      	mov	r1, ip
 8000c6c:	0007      	movs	r7, r0
 8000c6e:	430f      	orrs	r7, r1
 8000c70:	e630      	b.n	80008d4 <__aeabi_dadd+0x320>
 8000c72:	2120      	movs	r1, #32
 8000c74:	2700      	movs	r7, #0
 8000c76:	1a09      	subs	r1, r1, r0
 8000c78:	e50e      	b.n	8000698 <__aeabi_dadd+0xe4>
 8000c7a:	001e      	movs	r6, r3
 8000c7c:	2f00      	cmp	r7, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_dadd+0x6ce>
 8000c80:	e522      	b.n	80006c8 <__aeabi_dadd+0x114>
 8000c82:	2400      	movs	r4, #0
 8000c84:	e758      	b.n	8000b38 <__aeabi_dadd+0x584>
 8000c86:	2500      	movs	r5, #0
 8000c88:	2400      	movs	r4, #0
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	e5db      	b.n	8000846 <__aeabi_dadd+0x292>
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	000007fe 	.word	0x000007fe
 8000c94:	000007ff 	.word	0x000007ff
 8000c98:	ff7fffff 	.word	0xff7fffff
 8000c9c:	4647      	mov	r7, r8
 8000c9e:	430f      	orrs	r7, r1
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_dadd+0x6f0>
 8000ca2:	e747      	b.n	8000b34 <__aeabi_dadd+0x580>
 8000ca4:	000e      	movs	r6, r1
 8000ca6:	46c1      	mov	r9, r8
 8000ca8:	e5b5      	b.n	8000816 <__aeabi_dadd+0x262>
 8000caa:	08df      	lsrs	r7, r3, #3
 8000cac:	0764      	lsls	r4, r4, #29
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4327      	orrs	r7, r4
 8000cb2:	0900      	lsrs	r0, r0, #4
 8000cb4:	e5b5      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	08c0      	lsrs	r0, r0, #3
 8000cba:	0777      	lsls	r7, r6, #29
 8000cbc:	4307      	orrs	r7, r0
 8000cbe:	4311      	orrs	r1, r2
 8000cc0:	08f0      	lsrs	r0, r6, #3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x714>
 8000cc6:	e5d9      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	0309      	lsls	r1, r1, #12
 8000ccc:	4208      	tst	r0, r1
 8000cce:	d007      	beq.n	8000ce0 <__aeabi_dadd+0x72c>
 8000cd0:	08dc      	lsrs	r4, r3, #3
 8000cd2:	420c      	tst	r4, r1
 8000cd4:	d104      	bne.n	8000ce0 <__aeabi_dadd+0x72c>
 8000cd6:	08d2      	lsrs	r2, r2, #3
 8000cd8:	075b      	lsls	r3, r3, #29
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	0017      	movs	r7, r2
 8000cde:	0020      	movs	r0, r4
 8000ce0:	0f7b      	lsrs	r3, r7, #29
 8000ce2:	00ff      	lsls	r7, r7, #3
 8000ce4:	08ff      	lsrs	r7, r7, #3
 8000ce6:	075b      	lsls	r3, r3, #29
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e5c7      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000cec:	000f      	movs	r7, r1
 8000cee:	e5c5      	b.n	800087c <__aeabi_dadd+0x2c8>
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <__aeabi_dadd+0x788>)
 8000cf2:	08d2      	lsrs	r2, r2, #3
 8000cf4:	4033      	ands	r3, r6
 8000cf6:	075f      	lsls	r7, r3, #29
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	2401      	movs	r4, #1
 8000cfc:	4317      	orrs	r7, r2
 8000cfe:	0b1e      	lsrs	r6, r3, #12
 8000d00:	e5a1      	b.n	8000846 <__aeabi_dadd+0x292>
 8000d02:	4226      	tst	r6, r4
 8000d04:	d012      	beq.n	8000d2c <__aeabi_dadd+0x778>
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <__aeabi_dadd+0x788>)
 8000d08:	4665      	mov	r5, ip
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	2401      	movs	r4, #1
 8000d0e:	401e      	ands	r6, r3
 8000d10:	e4e6      	b.n	80006e0 <__aeabi_dadd+0x12c>
 8000d12:	0021      	movs	r1, r4
 8000d14:	e585      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000d16:	0017      	movs	r7, r2
 8000d18:	e5a8      	b.n	800086c <__aeabi_dadd+0x2b8>
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	e4d4      	b.n	80006c8 <__aeabi_dadd+0x114>
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	0764      	lsls	r4, r4, #29
 8000d22:	431c      	orrs	r4, r3
 8000d24:	0027      	movs	r7, r4
 8000d26:	2102      	movs	r1, #2
 8000d28:	0900      	lsrs	r0, r0, #4
 8000d2a:	e57a      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000d2c:	08c0      	lsrs	r0, r0, #3
 8000d2e:	0777      	lsls	r7, r6, #29
 8000d30:	4307      	orrs	r7, r0
 8000d32:	4665      	mov	r5, ip
 8000d34:	2100      	movs	r1, #0
 8000d36:	08f0      	lsrs	r0, r6, #3
 8000d38:	e573      	b.n	8000822 <__aeabi_dadd+0x26e>
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	ff7fffff 	.word	0xff7fffff

08000d40 <__aeabi_dmul>:
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	4657      	mov	r7, sl
 8000d44:	464e      	mov	r6, r9
 8000d46:	46de      	mov	lr, fp
 8000d48:	4645      	mov	r5, r8
 8000d4a:	b5e0      	push	{r5, r6, r7, lr}
 8000d4c:	001f      	movs	r7, r3
 8000d4e:	030b      	lsls	r3, r1, #12
 8000d50:	0b1b      	lsrs	r3, r3, #12
 8000d52:	0016      	movs	r6, r2
 8000d54:	469a      	mov	sl, r3
 8000d56:	0fca      	lsrs	r2, r1, #31
 8000d58:	004b      	lsls	r3, r1, #1
 8000d5a:	0004      	movs	r4, r0
 8000d5c:	4691      	mov	r9, r2
 8000d5e:	b085      	sub	sp, #20
 8000d60:	0d5b      	lsrs	r3, r3, #21
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dmul+0x26>
 8000d64:	e1cf      	b.n	8001106 <__aeabi_dmul+0x3c6>
 8000d66:	4acd      	ldr	r2, [pc, #820]	@ (800109c <__aeabi_dmul+0x35c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d055      	beq.n	8000e18 <__aeabi_dmul+0xd8>
 8000d6c:	4651      	mov	r1, sl
 8000d6e:	0f42      	lsrs	r2, r0, #29
 8000d70:	00c9      	lsls	r1, r1, #3
 8000d72:	430a      	orrs	r2, r1
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	0409      	lsls	r1, r1, #16
 8000d78:	4311      	orrs	r1, r2
 8000d7a:	00c2      	lsls	r2, r0, #3
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	4ac8      	ldr	r2, [pc, #800]	@ (80010a0 <__aeabi_dmul+0x360>)
 8000d80:	468a      	mov	sl, r1
 8000d82:	4693      	mov	fp, r2
 8000d84:	449b      	add	fp, r3
 8000d86:	2300      	movs	r3, #0
 8000d88:	2500      	movs	r5, #0
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	033c      	lsls	r4, r7, #12
 8000d8e:	007b      	lsls	r3, r7, #1
 8000d90:	0ffa      	lsrs	r2, r7, #31
 8000d92:	9601      	str	r6, [sp, #4]
 8000d94:	0b24      	lsrs	r4, r4, #12
 8000d96:	0d5b      	lsrs	r3, r3, #21
 8000d98:	9200      	str	r2, [sp, #0]
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dmul+0x5e>
 8000d9c:	e188      	b.n	80010b0 <__aeabi_dmul+0x370>
 8000d9e:	4abf      	ldr	r2, [pc, #764]	@ (800109c <__aeabi_dmul+0x35c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dmul+0x66>
 8000da4:	e092      	b.n	8000ecc <__aeabi_dmul+0x18c>
 8000da6:	4abe      	ldr	r2, [pc, #760]	@ (80010a0 <__aeabi_dmul+0x360>)
 8000da8:	4694      	mov	ip, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	449b      	add	fp, r3
 8000dae:	2d0a      	cmp	r5, #10
 8000db0:	dc42      	bgt.n	8000e38 <__aeabi_dmul+0xf8>
 8000db2:	00e4      	lsls	r4, r4, #3
 8000db4:	0f73      	lsrs	r3, r6, #29
 8000db6:	4323      	orrs	r3, r4
 8000db8:	2480      	movs	r4, #128	@ 0x80
 8000dba:	4649      	mov	r1, r9
 8000dbc:	0424      	lsls	r4, r4, #16
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	00f3      	lsls	r3, r6, #3
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	9b00      	ldr	r3, [sp, #0]
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	4059      	eors	r1, r3
 8000dca:	b2cb      	uxtb	r3, r1
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	2d02      	cmp	r5, #2
 8000dd0:	dc00      	bgt.n	8000dd4 <__aeabi_dmul+0x94>
 8000dd2:	e094      	b.n	8000efe <__aeabi_dmul+0x1be>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	40ab      	lsls	r3, r5
 8000dd8:	001d      	movs	r5, r3
 8000dda:	23a6      	movs	r3, #166	@ 0xa6
 8000ddc:	002a      	movs	r2, r5
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	401a      	ands	r2, r3
 8000de2:	421d      	tst	r5, r3
 8000de4:	d000      	beq.n	8000de8 <__aeabi_dmul+0xa8>
 8000de6:	e229      	b.n	800123c <__aeabi_dmul+0x4fc>
 8000de8:	2390      	movs	r3, #144	@ 0x90
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	421d      	tst	r5, r3
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dmul+0xb2>
 8000df0:	e24d      	b.n	800128e <__aeabi_dmul+0x54e>
 8000df2:	2300      	movs	r3, #0
 8000df4:	2480      	movs	r4, #128	@ 0x80
 8000df6:	4699      	mov	r9, r3
 8000df8:	0324      	lsls	r4, r4, #12
 8000dfa:	4ba8      	ldr	r3, [pc, #672]	@ (800109c <__aeabi_dmul+0x35c>)
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	464a      	mov	r2, r9
 8000e00:	051b      	lsls	r3, r3, #20
 8000e02:	4323      	orrs	r3, r4
 8000e04:	07d2      	lsls	r2, r2, #31
 8000e06:	4313      	orrs	r3, r2
 8000e08:	0019      	movs	r1, r3
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e0e:	46bb      	mov	fp, r7
 8000e10:	46b2      	mov	sl, r6
 8000e12:	46a9      	mov	r9, r5
 8000e14:	46a0      	mov	r8, r4
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	4652      	mov	r2, sl
 8000e1a:	4302      	orrs	r2, r0
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_dmul+0xe2>
 8000e20:	e1ac      	b.n	800117c <__aeabi_dmul+0x43c>
 8000e22:	469b      	mov	fp, r3
 8000e24:	2302      	movs	r3, #2
 8000e26:	4692      	mov	sl, r2
 8000e28:	2508      	movs	r5, #8
 8000e2a:	9302      	str	r3, [sp, #8]
 8000e2c:	e7ae      	b.n	8000d8c <__aeabi_dmul+0x4c>
 8000e2e:	9b00      	ldr	r3, [sp, #0]
 8000e30:	46a2      	mov	sl, r4
 8000e32:	4699      	mov	r9, r3
 8000e34:	9b01      	ldr	r3, [sp, #4]
 8000e36:	4698      	mov	r8, r3
 8000e38:	9b02      	ldr	r3, [sp, #8]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_dmul+0x100>
 8000e3e:	e1ca      	b.n	80011d6 <__aeabi_dmul+0x496>
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dmul+0x106>
 8000e44:	e192      	b.n	800116c <__aeabi_dmul+0x42c>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d110      	bne.n	8000e6c <__aeabi_dmul+0x12c>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	e7d4      	b.n	8000dfc <__aeabi_dmul+0xbc>
 8000e52:	2201      	movs	r2, #1
 8000e54:	087b      	lsrs	r3, r7, #1
 8000e56:	403a      	ands	r2, r7
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4652      	mov	r2, sl
 8000e5c:	07d2      	lsls	r2, r2, #31
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	4698      	mov	r8, r3
 8000e62:	4653      	mov	r3, sl
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	469a      	mov	sl, r3
 8000e68:	9b03      	ldr	r3, [sp, #12]
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	465b      	mov	r3, fp
 8000e6e:	1c58      	adds	r0, r3, #1
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	445b      	add	r3, fp
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dc00      	bgt.n	8000e7c <__aeabi_dmul+0x13c>
 8000e7a:	e1b1      	b.n	80011e0 <__aeabi_dmul+0x4a0>
 8000e7c:	4642      	mov	r2, r8
 8000e7e:	0752      	lsls	r2, r2, #29
 8000e80:	d00b      	beq.n	8000e9a <__aeabi_dmul+0x15a>
 8000e82:	220f      	movs	r2, #15
 8000e84:	4641      	mov	r1, r8
 8000e86:	400a      	ands	r2, r1
 8000e88:	2a04      	cmp	r2, #4
 8000e8a:	d006      	beq.n	8000e9a <__aeabi_dmul+0x15a>
 8000e8c:	4642      	mov	r2, r8
 8000e8e:	1d11      	adds	r1, r2, #4
 8000e90:	4541      	cmp	r1, r8
 8000e92:	4192      	sbcs	r2, r2
 8000e94:	4688      	mov	r8, r1
 8000e96:	4252      	negs	r2, r2
 8000e98:	4492      	add	sl, r2
 8000e9a:	4652      	mov	r2, sl
 8000e9c:	01d2      	lsls	r2, r2, #7
 8000e9e:	d506      	bpl.n	8000eae <__aeabi_dmul+0x16e>
 8000ea0:	4652      	mov	r2, sl
 8000ea2:	4b80      	ldr	r3, [pc, #512]	@ (80010a4 <__aeabi_dmul+0x364>)
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	4692      	mov	sl, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	18c3      	adds	r3, r0, r3
 8000eae:	4a7e      	ldr	r2, [pc, #504]	@ (80010a8 <__aeabi_dmul+0x368>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	dd00      	ble.n	8000eb6 <__aeabi_dmul+0x176>
 8000eb4:	e18f      	b.n	80011d6 <__aeabi_dmul+0x496>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	08d1      	lsrs	r1, r2, #3
 8000eba:	4652      	mov	r2, sl
 8000ebc:	0752      	lsls	r2, r2, #29
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	4651      	mov	r1, sl
 8000ec2:	055b      	lsls	r3, r3, #21
 8000ec4:	024c      	lsls	r4, r1, #9
 8000ec6:	0b24      	lsrs	r4, r4, #12
 8000ec8:	0d5b      	lsrs	r3, r3, #21
 8000eca:	e797      	b.n	8000dfc <__aeabi_dmul+0xbc>
 8000ecc:	4b73      	ldr	r3, [pc, #460]	@ (800109c <__aeabi_dmul+0x35c>)
 8000ece:	4326      	orrs	r6, r4
 8000ed0:	469c      	mov	ip, r3
 8000ed2:	44e3      	add	fp, ip
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dmul+0x19a>
 8000ed8:	e16f      	b.n	80011ba <__aeabi_dmul+0x47a>
 8000eda:	2303      	movs	r3, #3
 8000edc:	4649      	mov	r1, r9
 8000ede:	431d      	orrs	r5, r3
 8000ee0:	9b00      	ldr	r3, [sp, #0]
 8000ee2:	4059      	eors	r1, r3
 8000ee4:	b2cb      	uxtb	r3, r1
 8000ee6:	9303      	str	r3, [sp, #12]
 8000ee8:	2d0a      	cmp	r5, #10
 8000eea:	dd00      	ble.n	8000eee <__aeabi_dmul+0x1ae>
 8000eec:	e133      	b.n	8001156 <__aeabi_dmul+0x416>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	40ab      	lsls	r3, r5
 8000ef2:	001d      	movs	r5, r3
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2288      	movs	r2, #136	@ 0x88
 8000efa:	422a      	tst	r2, r5
 8000efc:	d197      	bne.n	8000e2e <__aeabi_dmul+0xee>
 8000efe:	4642      	mov	r2, r8
 8000f00:	4643      	mov	r3, r8
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	0c12      	lsrs	r2, r2, #16
 8000f06:	0016      	movs	r6, r2
 8000f08:	9801      	ldr	r0, [sp, #4]
 8000f0a:	0c1d      	lsrs	r5, r3, #16
 8000f0c:	0c03      	lsrs	r3, r0, #16
 8000f0e:	0400      	lsls	r0, r0, #16
 8000f10:	0c00      	lsrs	r0, r0, #16
 8000f12:	4346      	muls	r6, r0
 8000f14:	46b4      	mov	ip, r6
 8000f16:	001e      	movs	r6, r3
 8000f18:	436e      	muls	r6, r5
 8000f1a:	9600      	str	r6, [sp, #0]
 8000f1c:	0016      	movs	r6, r2
 8000f1e:	0007      	movs	r7, r0
 8000f20:	435e      	muls	r6, r3
 8000f22:	4661      	mov	r1, ip
 8000f24:	46b0      	mov	r8, r6
 8000f26:	436f      	muls	r7, r5
 8000f28:	0c0e      	lsrs	r6, r1, #16
 8000f2a:	44b8      	add	r8, r7
 8000f2c:	4446      	add	r6, r8
 8000f2e:	42b7      	cmp	r7, r6
 8000f30:	d905      	bls.n	8000f3e <__aeabi_dmul+0x1fe>
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	0249      	lsls	r1, r1, #9
 8000f36:	4688      	mov	r8, r1
 8000f38:	9f00      	ldr	r7, [sp, #0]
 8000f3a:	4447      	add	r7, r8
 8000f3c:	9700      	str	r7, [sp, #0]
 8000f3e:	4661      	mov	r1, ip
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	0c37      	lsrs	r7, r6, #16
 8000f46:	0436      	lsls	r6, r6, #16
 8000f48:	468c      	mov	ip, r1
 8000f4a:	0031      	movs	r1, r6
 8000f4c:	4461      	add	r1, ip
 8000f4e:	9101      	str	r1, [sp, #4]
 8000f50:	0011      	movs	r1, r2
 8000f52:	0c26      	lsrs	r6, r4, #16
 8000f54:	0424      	lsls	r4, r4, #16
 8000f56:	0c24      	lsrs	r4, r4, #16
 8000f58:	4361      	muls	r1, r4
 8000f5a:	468c      	mov	ip, r1
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	4369      	muls	r1, r5
 8000f60:	4689      	mov	r9, r1
 8000f62:	4661      	mov	r1, ip
 8000f64:	0c09      	lsrs	r1, r1, #16
 8000f66:	4688      	mov	r8, r1
 8000f68:	4372      	muls	r2, r6
 8000f6a:	444a      	add	r2, r9
 8000f6c:	4442      	add	r2, r8
 8000f6e:	4375      	muls	r5, r6
 8000f70:	4591      	cmp	r9, r2
 8000f72:	d903      	bls.n	8000f7c <__aeabi_dmul+0x23c>
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	0249      	lsls	r1, r1, #9
 8000f78:	4688      	mov	r8, r1
 8000f7a:	4445      	add	r5, r8
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4688      	mov	r8, r1
 8000f80:	4661      	mov	r1, ip
 8000f82:	0409      	lsls	r1, r1, #16
 8000f84:	0c09      	lsrs	r1, r1, #16
 8000f86:	468c      	mov	ip, r1
 8000f88:	0412      	lsls	r2, r2, #16
 8000f8a:	4462      	add	r2, ip
 8000f8c:	18b9      	adds	r1, r7, r2
 8000f8e:	9102      	str	r1, [sp, #8]
 8000f90:	4651      	mov	r1, sl
 8000f92:	0c09      	lsrs	r1, r1, #16
 8000f94:	468c      	mov	ip, r1
 8000f96:	4651      	mov	r1, sl
 8000f98:	040f      	lsls	r7, r1, #16
 8000f9a:	0c3f      	lsrs	r7, r7, #16
 8000f9c:	0039      	movs	r1, r7
 8000f9e:	4341      	muls	r1, r0
 8000fa0:	4445      	add	r5, r8
 8000fa2:	4688      	mov	r8, r1
 8000fa4:	4661      	mov	r1, ip
 8000fa6:	4341      	muls	r1, r0
 8000fa8:	468a      	mov	sl, r1
 8000faa:	4641      	mov	r1, r8
 8000fac:	4660      	mov	r0, ip
 8000fae:	0c09      	lsrs	r1, r1, #16
 8000fb0:	4689      	mov	r9, r1
 8000fb2:	4358      	muls	r0, r3
 8000fb4:	437b      	muls	r3, r7
 8000fb6:	4453      	add	r3, sl
 8000fb8:	444b      	add	r3, r9
 8000fba:	459a      	cmp	sl, r3
 8000fbc:	d903      	bls.n	8000fc6 <__aeabi_dmul+0x286>
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	4689      	mov	r9, r1
 8000fc4:	4448      	add	r0, r9
 8000fc6:	0c19      	lsrs	r1, r3, #16
 8000fc8:	4689      	mov	r9, r1
 8000fca:	4641      	mov	r1, r8
 8000fcc:	0409      	lsls	r1, r1, #16
 8000fce:	0c09      	lsrs	r1, r1, #16
 8000fd0:	4688      	mov	r8, r1
 8000fd2:	0039      	movs	r1, r7
 8000fd4:	4361      	muls	r1, r4
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	4443      	add	r3, r8
 8000fda:	4688      	mov	r8, r1
 8000fdc:	4661      	mov	r1, ip
 8000fde:	434c      	muls	r4, r1
 8000fe0:	4371      	muls	r1, r6
 8000fe2:	468c      	mov	ip, r1
 8000fe4:	4641      	mov	r1, r8
 8000fe6:	4377      	muls	r7, r6
 8000fe8:	0c0e      	lsrs	r6, r1, #16
 8000fea:	193f      	adds	r7, r7, r4
 8000fec:	19f6      	adds	r6, r6, r7
 8000fee:	4448      	add	r0, r9
 8000ff0:	42b4      	cmp	r4, r6
 8000ff2:	d903      	bls.n	8000ffc <__aeabi_dmul+0x2bc>
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	4689      	mov	r9, r1
 8000ffa:	44cc      	add	ip, r9
 8000ffc:	9902      	ldr	r1, [sp, #8]
 8000ffe:	9f00      	ldr	r7, [sp, #0]
 8001000:	4689      	mov	r9, r1
 8001002:	0431      	lsls	r1, r6, #16
 8001004:	444f      	add	r7, r9
 8001006:	4689      	mov	r9, r1
 8001008:	4641      	mov	r1, r8
 800100a:	4297      	cmp	r7, r2
 800100c:	4192      	sbcs	r2, r2
 800100e:	040c      	lsls	r4, r1, #16
 8001010:	0c24      	lsrs	r4, r4, #16
 8001012:	444c      	add	r4, r9
 8001014:	18ff      	adds	r7, r7, r3
 8001016:	4252      	negs	r2, r2
 8001018:	1964      	adds	r4, r4, r5
 800101a:	18a1      	adds	r1, r4, r2
 800101c:	429f      	cmp	r7, r3
 800101e:	419b      	sbcs	r3, r3
 8001020:	4688      	mov	r8, r1
 8001022:	4682      	mov	sl, r0
 8001024:	425b      	negs	r3, r3
 8001026:	4699      	mov	r9, r3
 8001028:	4590      	cmp	r8, r2
 800102a:	4192      	sbcs	r2, r2
 800102c:	42ac      	cmp	r4, r5
 800102e:	41a4      	sbcs	r4, r4
 8001030:	44c2      	add	sl, r8
 8001032:	44d1      	add	r9, sl
 8001034:	4252      	negs	r2, r2
 8001036:	4264      	negs	r4, r4
 8001038:	4314      	orrs	r4, r2
 800103a:	4599      	cmp	r9, r3
 800103c:	419b      	sbcs	r3, r3
 800103e:	4582      	cmp	sl, r0
 8001040:	4192      	sbcs	r2, r2
 8001042:	425b      	negs	r3, r3
 8001044:	4252      	negs	r2, r2
 8001046:	4313      	orrs	r3, r2
 8001048:	464a      	mov	r2, r9
 800104a:	0c36      	lsrs	r6, r6, #16
 800104c:	19a4      	adds	r4, r4, r6
 800104e:	18e3      	adds	r3, r4, r3
 8001050:	4463      	add	r3, ip
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	0dd2      	lsrs	r2, r2, #23
 8001056:	431a      	orrs	r2, r3
 8001058:	9901      	ldr	r1, [sp, #4]
 800105a:	4692      	mov	sl, r2
 800105c:	027a      	lsls	r2, r7, #9
 800105e:	430a      	orrs	r2, r1
 8001060:	1e50      	subs	r0, r2, #1
 8001062:	4182      	sbcs	r2, r0
 8001064:	0dff      	lsrs	r7, r7, #23
 8001066:	4317      	orrs	r7, r2
 8001068:	464a      	mov	r2, r9
 800106a:	0252      	lsls	r2, r2, #9
 800106c:	4317      	orrs	r7, r2
 800106e:	46b8      	mov	r8, r7
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	d500      	bpl.n	8001076 <__aeabi_dmul+0x336>
 8001074:	e6ed      	b.n	8000e52 <__aeabi_dmul+0x112>
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <__aeabi_dmul+0x36c>)
 8001078:	9a03      	ldr	r2, [sp, #12]
 800107a:	445b      	add	r3, fp
 800107c:	4691      	mov	r9, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	dc00      	bgt.n	8001084 <__aeabi_dmul+0x344>
 8001082:	e0ac      	b.n	80011de <__aeabi_dmul+0x49e>
 8001084:	003a      	movs	r2, r7
 8001086:	0752      	lsls	r2, r2, #29
 8001088:	d100      	bne.n	800108c <__aeabi_dmul+0x34c>
 800108a:	e710      	b.n	8000eae <__aeabi_dmul+0x16e>
 800108c:	220f      	movs	r2, #15
 800108e:	4658      	mov	r0, fp
 8001090:	403a      	ands	r2, r7
 8001092:	2a04      	cmp	r2, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_dmul+0x358>
 8001096:	e6f9      	b.n	8000e8c <__aeabi_dmul+0x14c>
 8001098:	e709      	b.n	8000eae <__aeabi_dmul+0x16e>
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	000007ff 	.word	0x000007ff
 80010a0:	fffffc01 	.word	0xfffffc01
 80010a4:	feffffff 	.word	0xfeffffff
 80010a8:	000007fe 	.word	0x000007fe
 80010ac:	000003ff 	.word	0x000003ff
 80010b0:	0022      	movs	r2, r4
 80010b2:	4332      	orrs	r2, r6
 80010b4:	d06f      	beq.n	8001196 <__aeabi_dmul+0x456>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_dmul+0x37c>
 80010ba:	e0c2      	b.n	8001242 <__aeabi_dmul+0x502>
 80010bc:	0020      	movs	r0, r4
 80010be:	f000 fdf9 	bl	8001cb4 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	0003      	movs	r3, r0
 80010c6:	3a0b      	subs	r2, #11
 80010c8:	201d      	movs	r0, #29
 80010ca:	1a82      	subs	r2, r0, r2
 80010cc:	0030      	movs	r0, r6
 80010ce:	0019      	movs	r1, r3
 80010d0:	40d0      	lsrs	r0, r2
 80010d2:	3908      	subs	r1, #8
 80010d4:	408c      	lsls	r4, r1
 80010d6:	0002      	movs	r2, r0
 80010d8:	4322      	orrs	r2, r4
 80010da:	0034      	movs	r4, r6
 80010dc:	408c      	lsls	r4, r1
 80010de:	4659      	mov	r1, fp
 80010e0:	1acb      	subs	r3, r1, r3
 80010e2:	4986      	ldr	r1, [pc, #536]	@ (80012fc <__aeabi_dmul+0x5bc>)
 80010e4:	468b      	mov	fp, r1
 80010e6:	449b      	add	fp, r3
 80010e8:	2d0a      	cmp	r5, #10
 80010ea:	dd00      	ble.n	80010ee <__aeabi_dmul+0x3ae>
 80010ec:	e6a4      	b.n	8000e38 <__aeabi_dmul+0xf8>
 80010ee:	4649      	mov	r1, r9
 80010f0:	9b00      	ldr	r3, [sp, #0]
 80010f2:	9401      	str	r4, [sp, #4]
 80010f4:	4059      	eors	r1, r3
 80010f6:	b2cb      	uxtb	r3, r1
 80010f8:	0014      	movs	r4, r2
 80010fa:	2000      	movs	r0, #0
 80010fc:	9303      	str	r3, [sp, #12]
 80010fe:	2d02      	cmp	r5, #2
 8001100:	dd00      	ble.n	8001104 <__aeabi_dmul+0x3c4>
 8001102:	e667      	b.n	8000dd4 <__aeabi_dmul+0x94>
 8001104:	e6fb      	b.n	8000efe <__aeabi_dmul+0x1be>
 8001106:	4653      	mov	r3, sl
 8001108:	4303      	orrs	r3, r0
 800110a:	4698      	mov	r8, r3
 800110c:	d03c      	beq.n	8001188 <__aeabi_dmul+0x448>
 800110e:	4653      	mov	r3, sl
 8001110:	2b00      	cmp	r3, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dmul+0x3d6>
 8001114:	e0a3      	b.n	800125e <__aeabi_dmul+0x51e>
 8001116:	4650      	mov	r0, sl
 8001118:	f000 fdcc 	bl	8001cb4 <__clzsi2>
 800111c:	230b      	movs	r3, #11
 800111e:	425b      	negs	r3, r3
 8001120:	469c      	mov	ip, r3
 8001122:	0002      	movs	r2, r0
 8001124:	4484      	add	ip, r0
 8001126:	0011      	movs	r1, r2
 8001128:	4650      	mov	r0, sl
 800112a:	3908      	subs	r1, #8
 800112c:	4088      	lsls	r0, r1
 800112e:	231d      	movs	r3, #29
 8001130:	4680      	mov	r8, r0
 8001132:	4660      	mov	r0, ip
 8001134:	1a1b      	subs	r3, r3, r0
 8001136:	0020      	movs	r0, r4
 8001138:	40d8      	lsrs	r0, r3
 800113a:	0003      	movs	r3, r0
 800113c:	4640      	mov	r0, r8
 800113e:	4303      	orrs	r3, r0
 8001140:	469a      	mov	sl, r3
 8001142:	0023      	movs	r3, r4
 8001144:	408b      	lsls	r3, r1
 8001146:	4698      	mov	r8, r3
 8001148:	4b6c      	ldr	r3, [pc, #432]	@ (80012fc <__aeabi_dmul+0x5bc>)
 800114a:	2500      	movs	r5, #0
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	469b      	mov	fp, r3
 8001150:	2300      	movs	r3, #0
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	e61a      	b.n	8000d8c <__aeabi_dmul+0x4c>
 8001156:	2d0f      	cmp	r5, #15
 8001158:	d000      	beq.n	800115c <__aeabi_dmul+0x41c>
 800115a:	e0c9      	b.n	80012f0 <__aeabi_dmul+0x5b0>
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	4652      	mov	r2, sl
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	421a      	tst	r2, r3
 8001164:	d002      	beq.n	800116c <__aeabi_dmul+0x42c>
 8001166:	421c      	tst	r4, r3
 8001168:	d100      	bne.n	800116c <__aeabi_dmul+0x42c>
 800116a:	e092      	b.n	8001292 <__aeabi_dmul+0x552>
 800116c:	2480      	movs	r4, #128	@ 0x80
 800116e:	4653      	mov	r3, sl
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	431c      	orrs	r4, r3
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	4642      	mov	r2, r8
 8001178:	0b24      	lsrs	r4, r4, #12
 800117a:	e63e      	b.n	8000dfa <__aeabi_dmul+0xba>
 800117c:	469b      	mov	fp, r3
 800117e:	2303      	movs	r3, #3
 8001180:	4680      	mov	r8, r0
 8001182:	250c      	movs	r5, #12
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	e601      	b.n	8000d8c <__aeabi_dmul+0x4c>
 8001188:	2300      	movs	r3, #0
 800118a:	469a      	mov	sl, r3
 800118c:	469b      	mov	fp, r3
 800118e:	3301      	adds	r3, #1
 8001190:	2504      	movs	r5, #4
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	e5fa      	b.n	8000d8c <__aeabi_dmul+0x4c>
 8001196:	2101      	movs	r1, #1
 8001198:	430d      	orrs	r5, r1
 800119a:	2d0a      	cmp	r5, #10
 800119c:	dd00      	ble.n	80011a0 <__aeabi_dmul+0x460>
 800119e:	e64b      	b.n	8000e38 <__aeabi_dmul+0xf8>
 80011a0:	4649      	mov	r1, r9
 80011a2:	9800      	ldr	r0, [sp, #0]
 80011a4:	4041      	eors	r1, r0
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	9103      	str	r1, [sp, #12]
 80011aa:	2d02      	cmp	r5, #2
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_dmul+0x470>
 80011ae:	e096      	b.n	80012de <__aeabi_dmul+0x59e>
 80011b0:	2300      	movs	r3, #0
 80011b2:	2400      	movs	r4, #0
 80011b4:	2001      	movs	r0, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	e60c      	b.n	8000dd4 <__aeabi_dmul+0x94>
 80011ba:	4649      	mov	r1, r9
 80011bc:	2302      	movs	r3, #2
 80011be:	9a00      	ldr	r2, [sp, #0]
 80011c0:	432b      	orrs	r3, r5
 80011c2:	4051      	eors	r1, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	9203      	str	r2, [sp, #12]
 80011c8:	2b0a      	cmp	r3, #10
 80011ca:	dd00      	ble.n	80011ce <__aeabi_dmul+0x48e>
 80011cc:	e634      	b.n	8000e38 <__aeabi_dmul+0xf8>
 80011ce:	2d00      	cmp	r5, #0
 80011d0:	d157      	bne.n	8001282 <__aeabi_dmul+0x542>
 80011d2:	9b03      	ldr	r3, [sp, #12]
 80011d4:	4699      	mov	r9, r3
 80011d6:	2400      	movs	r4, #0
 80011d8:	2200      	movs	r2, #0
 80011da:	4b49      	ldr	r3, [pc, #292]	@ (8001300 <__aeabi_dmul+0x5c0>)
 80011dc:	e60e      	b.n	8000dfc <__aeabi_dmul+0xbc>
 80011de:	4658      	mov	r0, fp
 80011e0:	2101      	movs	r1, #1
 80011e2:	1ac9      	subs	r1, r1, r3
 80011e4:	2938      	cmp	r1, #56	@ 0x38
 80011e6:	dd00      	ble.n	80011ea <__aeabi_dmul+0x4aa>
 80011e8:	e62f      	b.n	8000e4a <__aeabi_dmul+0x10a>
 80011ea:	291f      	cmp	r1, #31
 80011ec:	dd56      	ble.n	800129c <__aeabi_dmul+0x55c>
 80011ee:	221f      	movs	r2, #31
 80011f0:	4654      	mov	r4, sl
 80011f2:	4252      	negs	r2, r2
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	40dc      	lsrs	r4, r3
 80011f8:	2920      	cmp	r1, #32
 80011fa:	d007      	beq.n	800120c <__aeabi_dmul+0x4cc>
 80011fc:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <__aeabi_dmul+0x5c4>)
 80011fe:	4642      	mov	r2, r8
 8001200:	469c      	mov	ip, r3
 8001202:	4653      	mov	r3, sl
 8001204:	4460      	add	r0, ip
 8001206:	4083      	lsls	r3, r0
 8001208:	431a      	orrs	r2, r3
 800120a:	4690      	mov	r8, r2
 800120c:	4642      	mov	r2, r8
 800120e:	2107      	movs	r1, #7
 8001210:	1e53      	subs	r3, r2, #1
 8001212:	419a      	sbcs	r2, r3
 8001214:	000b      	movs	r3, r1
 8001216:	4322      	orrs	r2, r4
 8001218:	4013      	ands	r3, r2
 800121a:	2400      	movs	r4, #0
 800121c:	4211      	tst	r1, r2
 800121e:	d009      	beq.n	8001234 <__aeabi_dmul+0x4f4>
 8001220:	230f      	movs	r3, #15
 8001222:	4013      	ands	r3, r2
 8001224:	2b04      	cmp	r3, #4
 8001226:	d05d      	beq.n	80012e4 <__aeabi_dmul+0x5a4>
 8001228:	1d11      	adds	r1, r2, #4
 800122a:	4291      	cmp	r1, r2
 800122c:	419b      	sbcs	r3, r3
 800122e:	000a      	movs	r2, r1
 8001230:	425b      	negs	r3, r3
 8001232:	075b      	lsls	r3, r3, #29
 8001234:	08d2      	lsrs	r2, r2, #3
 8001236:	431a      	orrs	r2, r3
 8001238:	2300      	movs	r3, #0
 800123a:	e5df      	b.n	8000dfc <__aeabi_dmul+0xbc>
 800123c:	9b03      	ldr	r3, [sp, #12]
 800123e:	4699      	mov	r9, r3
 8001240:	e5fa      	b.n	8000e38 <__aeabi_dmul+0xf8>
 8001242:	9801      	ldr	r0, [sp, #4]
 8001244:	f000 fd36 	bl	8001cb4 <__clzsi2>
 8001248:	0002      	movs	r2, r0
 800124a:	0003      	movs	r3, r0
 800124c:	3215      	adds	r2, #21
 800124e:	3320      	adds	r3, #32
 8001250:	2a1c      	cmp	r2, #28
 8001252:	dc00      	bgt.n	8001256 <__aeabi_dmul+0x516>
 8001254:	e738      	b.n	80010c8 <__aeabi_dmul+0x388>
 8001256:	9a01      	ldr	r2, [sp, #4]
 8001258:	3808      	subs	r0, #8
 800125a:	4082      	lsls	r2, r0
 800125c:	e73f      	b.n	80010de <__aeabi_dmul+0x39e>
 800125e:	f000 fd29 	bl	8001cb4 <__clzsi2>
 8001262:	2315      	movs	r3, #21
 8001264:	469c      	mov	ip, r3
 8001266:	4484      	add	ip, r0
 8001268:	0002      	movs	r2, r0
 800126a:	4663      	mov	r3, ip
 800126c:	3220      	adds	r2, #32
 800126e:	2b1c      	cmp	r3, #28
 8001270:	dc00      	bgt.n	8001274 <__aeabi_dmul+0x534>
 8001272:	e758      	b.n	8001126 <__aeabi_dmul+0x3e6>
 8001274:	2300      	movs	r3, #0
 8001276:	4698      	mov	r8, r3
 8001278:	0023      	movs	r3, r4
 800127a:	3808      	subs	r0, #8
 800127c:	4083      	lsls	r3, r0
 800127e:	469a      	mov	sl, r3
 8001280:	e762      	b.n	8001148 <__aeabi_dmul+0x408>
 8001282:	001d      	movs	r5, r3
 8001284:	2300      	movs	r3, #0
 8001286:	2400      	movs	r4, #0
 8001288:	2002      	movs	r0, #2
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	e5a2      	b.n	8000dd4 <__aeabi_dmul+0x94>
 800128e:	9002      	str	r0, [sp, #8]
 8001290:	e632      	b.n	8000ef8 <__aeabi_dmul+0x1b8>
 8001292:	431c      	orrs	r4, r3
 8001294:	9b00      	ldr	r3, [sp, #0]
 8001296:	9a01      	ldr	r2, [sp, #4]
 8001298:	4699      	mov	r9, r3
 800129a:	e5ae      	b.n	8000dfa <__aeabi_dmul+0xba>
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <__aeabi_dmul+0x5c8>)
 800129e:	4652      	mov	r2, sl
 80012a0:	18c3      	adds	r3, r0, r3
 80012a2:	4640      	mov	r0, r8
 80012a4:	409a      	lsls	r2, r3
 80012a6:	40c8      	lsrs	r0, r1
 80012a8:	4302      	orrs	r2, r0
 80012aa:	4640      	mov	r0, r8
 80012ac:	4098      	lsls	r0, r3
 80012ae:	0003      	movs	r3, r0
 80012b0:	1e58      	subs	r0, r3, #1
 80012b2:	4183      	sbcs	r3, r0
 80012b4:	4654      	mov	r4, sl
 80012b6:	431a      	orrs	r2, r3
 80012b8:	40cc      	lsrs	r4, r1
 80012ba:	0753      	lsls	r3, r2, #29
 80012bc:	d009      	beq.n	80012d2 <__aeabi_dmul+0x592>
 80012be:	230f      	movs	r3, #15
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d005      	beq.n	80012d2 <__aeabi_dmul+0x592>
 80012c6:	1d13      	adds	r3, r2, #4
 80012c8:	4293      	cmp	r3, r2
 80012ca:	4192      	sbcs	r2, r2
 80012cc:	4252      	negs	r2, r2
 80012ce:	18a4      	adds	r4, r4, r2
 80012d0:	001a      	movs	r2, r3
 80012d2:	0223      	lsls	r3, r4, #8
 80012d4:	d508      	bpl.n	80012e8 <__aeabi_dmul+0x5a8>
 80012d6:	2301      	movs	r3, #1
 80012d8:	2400      	movs	r4, #0
 80012da:	2200      	movs	r2, #0
 80012dc:	e58e      	b.n	8000dfc <__aeabi_dmul+0xbc>
 80012de:	4689      	mov	r9, r1
 80012e0:	2400      	movs	r4, #0
 80012e2:	e58b      	b.n	8000dfc <__aeabi_dmul+0xbc>
 80012e4:	2300      	movs	r3, #0
 80012e6:	e7a5      	b.n	8001234 <__aeabi_dmul+0x4f4>
 80012e8:	0763      	lsls	r3, r4, #29
 80012ea:	0264      	lsls	r4, r4, #9
 80012ec:	0b24      	lsrs	r4, r4, #12
 80012ee:	e7a1      	b.n	8001234 <__aeabi_dmul+0x4f4>
 80012f0:	9b00      	ldr	r3, [sp, #0]
 80012f2:	46a2      	mov	sl, r4
 80012f4:	4699      	mov	r9, r3
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	4698      	mov	r8, r3
 80012fa:	e737      	b.n	800116c <__aeabi_dmul+0x42c>
 80012fc:	fffffc0d 	.word	0xfffffc0d
 8001300:	000007ff 	.word	0x000007ff
 8001304:	0000043e 	.word	0x0000043e
 8001308:	0000041e 	.word	0x0000041e

0800130c <__aeabi_dsub>:
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	4657      	mov	r7, sl
 8001310:	464e      	mov	r6, r9
 8001312:	4645      	mov	r5, r8
 8001314:	46de      	mov	lr, fp
 8001316:	b5e0      	push	{r5, r6, r7, lr}
 8001318:	b083      	sub	sp, #12
 800131a:	9000      	str	r0, [sp, #0]
 800131c:	9101      	str	r1, [sp, #4]
 800131e:	030c      	lsls	r4, r1, #12
 8001320:	004d      	lsls	r5, r1, #1
 8001322:	0fce      	lsrs	r6, r1, #31
 8001324:	0a61      	lsrs	r1, r4, #9
 8001326:	9c00      	ldr	r4, [sp, #0]
 8001328:	005f      	lsls	r7, r3, #1
 800132a:	0f64      	lsrs	r4, r4, #29
 800132c:	430c      	orrs	r4, r1
 800132e:	9900      	ldr	r1, [sp, #0]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	00c8      	lsls	r0, r1, #3
 8001336:	0319      	lsls	r1, r3, #12
 8001338:	0d7b      	lsrs	r3, r7, #21
 800133a:	4699      	mov	r9, r3
 800133c:	9b01      	ldr	r3, [sp, #4]
 800133e:	4fcc      	ldr	r7, [pc, #816]	@ (8001670 <__aeabi_dsub+0x364>)
 8001340:	0fdb      	lsrs	r3, r3, #31
 8001342:	469c      	mov	ip, r3
 8001344:	0a4b      	lsrs	r3, r1, #9
 8001346:	9900      	ldr	r1, [sp, #0]
 8001348:	4680      	mov	r8, r0
 800134a:	0f49      	lsrs	r1, r1, #29
 800134c:	4319      	orrs	r1, r3
 800134e:	9b00      	ldr	r3, [sp, #0]
 8001350:	468b      	mov	fp, r1
 8001352:	00da      	lsls	r2, r3, #3
 8001354:	4692      	mov	sl, r2
 8001356:	0d6d      	lsrs	r5, r5, #21
 8001358:	45b9      	cmp	r9, r7
 800135a:	d100      	bne.n	800135e <__aeabi_dsub+0x52>
 800135c:	e0bf      	b.n	80014de <__aeabi_dsub+0x1d2>
 800135e:	2301      	movs	r3, #1
 8001360:	4661      	mov	r1, ip
 8001362:	4059      	eors	r1, r3
 8001364:	464b      	mov	r3, r9
 8001366:	468c      	mov	ip, r1
 8001368:	1aeb      	subs	r3, r5, r3
 800136a:	428e      	cmp	r6, r1
 800136c:	d075      	beq.n	800145a <__aeabi_dsub+0x14e>
 800136e:	2b00      	cmp	r3, #0
 8001370:	dc00      	bgt.n	8001374 <__aeabi_dsub+0x68>
 8001372:	e2a3      	b.n	80018bc <__aeabi_dsub+0x5b0>
 8001374:	4649      	mov	r1, r9
 8001376:	2900      	cmp	r1, #0
 8001378:	d100      	bne.n	800137c <__aeabi_dsub+0x70>
 800137a:	e0ce      	b.n	800151a <__aeabi_dsub+0x20e>
 800137c:	42bd      	cmp	r5, r7
 800137e:	d100      	bne.n	8001382 <__aeabi_dsub+0x76>
 8001380:	e200      	b.n	8001784 <__aeabi_dsub+0x478>
 8001382:	2701      	movs	r7, #1
 8001384:	2b38      	cmp	r3, #56	@ 0x38
 8001386:	dc19      	bgt.n	80013bc <__aeabi_dsub+0xb0>
 8001388:	2780      	movs	r7, #128	@ 0x80
 800138a:	4659      	mov	r1, fp
 800138c:	043f      	lsls	r7, r7, #16
 800138e:	4339      	orrs	r1, r7
 8001390:	468b      	mov	fp, r1
 8001392:	2b1f      	cmp	r3, #31
 8001394:	dd00      	ble.n	8001398 <__aeabi_dsub+0x8c>
 8001396:	e1fa      	b.n	800178e <__aeabi_dsub+0x482>
 8001398:	2720      	movs	r7, #32
 800139a:	1af9      	subs	r1, r7, r3
 800139c:	468c      	mov	ip, r1
 800139e:	4659      	mov	r1, fp
 80013a0:	4667      	mov	r7, ip
 80013a2:	40b9      	lsls	r1, r7
 80013a4:	000f      	movs	r7, r1
 80013a6:	0011      	movs	r1, r2
 80013a8:	40d9      	lsrs	r1, r3
 80013aa:	430f      	orrs	r7, r1
 80013ac:	4661      	mov	r1, ip
 80013ae:	408a      	lsls	r2, r1
 80013b0:	1e51      	subs	r1, r2, #1
 80013b2:	418a      	sbcs	r2, r1
 80013b4:	4659      	mov	r1, fp
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	4317      	orrs	r7, r2
 80013ba:	1a64      	subs	r4, r4, r1
 80013bc:	1bc7      	subs	r7, r0, r7
 80013be:	42b8      	cmp	r0, r7
 80013c0:	4180      	sbcs	r0, r0
 80013c2:	4240      	negs	r0, r0
 80013c4:	1a24      	subs	r4, r4, r0
 80013c6:	0223      	lsls	r3, r4, #8
 80013c8:	d400      	bmi.n	80013cc <__aeabi_dsub+0xc0>
 80013ca:	e140      	b.n	800164e <__aeabi_dsub+0x342>
 80013cc:	0264      	lsls	r4, r4, #9
 80013ce:	0a64      	lsrs	r4, r4, #9
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dsub+0xca>
 80013d4:	e154      	b.n	8001680 <__aeabi_dsub+0x374>
 80013d6:	0020      	movs	r0, r4
 80013d8:	f000 fc6c 	bl	8001cb4 <__clzsi2>
 80013dc:	0003      	movs	r3, r0
 80013de:	3b08      	subs	r3, #8
 80013e0:	2120      	movs	r1, #32
 80013e2:	0038      	movs	r0, r7
 80013e4:	1aca      	subs	r2, r1, r3
 80013e6:	40d0      	lsrs	r0, r2
 80013e8:	409c      	lsls	r4, r3
 80013ea:	0002      	movs	r2, r0
 80013ec:	409f      	lsls	r7, r3
 80013ee:	4322      	orrs	r2, r4
 80013f0:	429d      	cmp	r5, r3
 80013f2:	dd00      	ble.n	80013f6 <__aeabi_dsub+0xea>
 80013f4:	e1a6      	b.n	8001744 <__aeabi_dsub+0x438>
 80013f6:	1b58      	subs	r0, r3, r5
 80013f8:	3001      	adds	r0, #1
 80013fa:	1a09      	subs	r1, r1, r0
 80013fc:	003c      	movs	r4, r7
 80013fe:	408f      	lsls	r7, r1
 8001400:	40c4      	lsrs	r4, r0
 8001402:	1e7b      	subs	r3, r7, #1
 8001404:	419f      	sbcs	r7, r3
 8001406:	0013      	movs	r3, r2
 8001408:	408b      	lsls	r3, r1
 800140a:	4327      	orrs	r7, r4
 800140c:	431f      	orrs	r7, r3
 800140e:	40c2      	lsrs	r2, r0
 8001410:	003b      	movs	r3, r7
 8001412:	0014      	movs	r4, r2
 8001414:	2500      	movs	r5, #0
 8001416:	4313      	orrs	r3, r2
 8001418:	d100      	bne.n	800141c <__aeabi_dsub+0x110>
 800141a:	e1f7      	b.n	800180c <__aeabi_dsub+0x500>
 800141c:	077b      	lsls	r3, r7, #29
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x116>
 8001420:	e377      	b.n	8001b12 <__aeabi_dsub+0x806>
 8001422:	230f      	movs	r3, #15
 8001424:	0038      	movs	r0, r7
 8001426:	403b      	ands	r3, r7
 8001428:	2b04      	cmp	r3, #4
 800142a:	d004      	beq.n	8001436 <__aeabi_dsub+0x12a>
 800142c:	1d38      	adds	r0, r7, #4
 800142e:	42b8      	cmp	r0, r7
 8001430:	41bf      	sbcs	r7, r7
 8001432:	427f      	negs	r7, r7
 8001434:	19e4      	adds	r4, r4, r7
 8001436:	0223      	lsls	r3, r4, #8
 8001438:	d400      	bmi.n	800143c <__aeabi_dsub+0x130>
 800143a:	e368      	b.n	8001b0e <__aeabi_dsub+0x802>
 800143c:	4b8c      	ldr	r3, [pc, #560]	@ (8001670 <__aeabi_dsub+0x364>)
 800143e:	3501      	adds	r5, #1
 8001440:	429d      	cmp	r5, r3
 8001442:	d100      	bne.n	8001446 <__aeabi_dsub+0x13a>
 8001444:	e0f4      	b.n	8001630 <__aeabi_dsub+0x324>
 8001446:	4b8b      	ldr	r3, [pc, #556]	@ (8001674 <__aeabi_dsub+0x368>)
 8001448:	056d      	lsls	r5, r5, #21
 800144a:	401c      	ands	r4, r3
 800144c:	0d6d      	lsrs	r5, r5, #21
 800144e:	0767      	lsls	r7, r4, #29
 8001450:	08c0      	lsrs	r0, r0, #3
 8001452:	0264      	lsls	r4, r4, #9
 8001454:	4307      	orrs	r7, r0
 8001456:	0b24      	lsrs	r4, r4, #12
 8001458:	e0ec      	b.n	8001634 <__aeabi_dsub+0x328>
 800145a:	2b00      	cmp	r3, #0
 800145c:	dc00      	bgt.n	8001460 <__aeabi_dsub+0x154>
 800145e:	e329      	b.n	8001ab4 <__aeabi_dsub+0x7a8>
 8001460:	4649      	mov	r1, r9
 8001462:	2900      	cmp	r1, #0
 8001464:	d000      	beq.n	8001468 <__aeabi_dsub+0x15c>
 8001466:	e0d6      	b.n	8001616 <__aeabi_dsub+0x30a>
 8001468:	4659      	mov	r1, fp
 800146a:	4311      	orrs	r1, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dsub+0x164>
 800146e:	e12e      	b.n	80016ce <__aeabi_dsub+0x3c2>
 8001470:	1e59      	subs	r1, r3, #1
 8001472:	2b01      	cmp	r3, #1
 8001474:	d100      	bne.n	8001478 <__aeabi_dsub+0x16c>
 8001476:	e1e6      	b.n	8001846 <__aeabi_dsub+0x53a>
 8001478:	42bb      	cmp	r3, r7
 800147a:	d100      	bne.n	800147e <__aeabi_dsub+0x172>
 800147c:	e182      	b.n	8001784 <__aeabi_dsub+0x478>
 800147e:	2701      	movs	r7, #1
 8001480:	000b      	movs	r3, r1
 8001482:	2938      	cmp	r1, #56	@ 0x38
 8001484:	dc14      	bgt.n	80014b0 <__aeabi_dsub+0x1a4>
 8001486:	2b1f      	cmp	r3, #31
 8001488:	dd00      	ble.n	800148c <__aeabi_dsub+0x180>
 800148a:	e23c      	b.n	8001906 <__aeabi_dsub+0x5fa>
 800148c:	2720      	movs	r7, #32
 800148e:	1af9      	subs	r1, r7, r3
 8001490:	468c      	mov	ip, r1
 8001492:	4659      	mov	r1, fp
 8001494:	4667      	mov	r7, ip
 8001496:	40b9      	lsls	r1, r7
 8001498:	000f      	movs	r7, r1
 800149a:	0011      	movs	r1, r2
 800149c:	40d9      	lsrs	r1, r3
 800149e:	430f      	orrs	r7, r1
 80014a0:	4661      	mov	r1, ip
 80014a2:	408a      	lsls	r2, r1
 80014a4:	1e51      	subs	r1, r2, #1
 80014a6:	418a      	sbcs	r2, r1
 80014a8:	4659      	mov	r1, fp
 80014aa:	40d9      	lsrs	r1, r3
 80014ac:	4317      	orrs	r7, r2
 80014ae:	1864      	adds	r4, r4, r1
 80014b0:	183f      	adds	r7, r7, r0
 80014b2:	4287      	cmp	r7, r0
 80014b4:	4180      	sbcs	r0, r0
 80014b6:	4240      	negs	r0, r0
 80014b8:	1824      	adds	r4, r4, r0
 80014ba:	0223      	lsls	r3, r4, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dsub+0x1b4>
 80014be:	e0c6      	b.n	800164e <__aeabi_dsub+0x342>
 80014c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <__aeabi_dsub+0x364>)
 80014c2:	3501      	adds	r5, #1
 80014c4:	429d      	cmp	r5, r3
 80014c6:	d100      	bne.n	80014ca <__aeabi_dsub+0x1be>
 80014c8:	e0b2      	b.n	8001630 <__aeabi_dsub+0x324>
 80014ca:	2101      	movs	r1, #1
 80014cc:	4b69      	ldr	r3, [pc, #420]	@ (8001674 <__aeabi_dsub+0x368>)
 80014ce:	087a      	lsrs	r2, r7, #1
 80014d0:	401c      	ands	r4, r3
 80014d2:	4039      	ands	r1, r7
 80014d4:	430a      	orrs	r2, r1
 80014d6:	07e7      	lsls	r7, r4, #31
 80014d8:	4317      	orrs	r7, r2
 80014da:	0864      	lsrs	r4, r4, #1
 80014dc:	e79e      	b.n	800141c <__aeabi_dsub+0x110>
 80014de:	4b66      	ldr	r3, [pc, #408]	@ (8001678 <__aeabi_dsub+0x36c>)
 80014e0:	4311      	orrs	r1, r2
 80014e2:	468a      	mov	sl, r1
 80014e4:	18eb      	adds	r3, r5, r3
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d028      	beq.n	800153c <__aeabi_dsub+0x230>
 80014ea:	4566      	cmp	r6, ip
 80014ec:	d02c      	beq.n	8001548 <__aeabi_dsub+0x23c>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d05b      	beq.n	80015aa <__aeabi_dsub+0x29e>
 80014f2:	2d00      	cmp	r5, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dsub+0x1ec>
 80014f6:	e12c      	b.n	8001752 <__aeabi_dsub+0x446>
 80014f8:	465b      	mov	r3, fp
 80014fa:	4666      	mov	r6, ip
 80014fc:	075f      	lsls	r7, r3, #29
 80014fe:	08d2      	lsrs	r2, r2, #3
 8001500:	4317      	orrs	r7, r2
 8001502:	08dd      	lsrs	r5, r3, #3
 8001504:	003b      	movs	r3, r7
 8001506:	432b      	orrs	r3, r5
 8001508:	d100      	bne.n	800150c <__aeabi_dsub+0x200>
 800150a:	e0e2      	b.n	80016d2 <__aeabi_dsub+0x3c6>
 800150c:	2480      	movs	r4, #128	@ 0x80
 800150e:	0324      	lsls	r4, r4, #12
 8001510:	432c      	orrs	r4, r5
 8001512:	0324      	lsls	r4, r4, #12
 8001514:	4d56      	ldr	r5, [pc, #344]	@ (8001670 <__aeabi_dsub+0x364>)
 8001516:	0b24      	lsrs	r4, r4, #12
 8001518:	e08c      	b.n	8001634 <__aeabi_dsub+0x328>
 800151a:	4659      	mov	r1, fp
 800151c:	4311      	orrs	r1, r2
 800151e:	d100      	bne.n	8001522 <__aeabi_dsub+0x216>
 8001520:	e0d5      	b.n	80016ce <__aeabi_dsub+0x3c2>
 8001522:	1e59      	subs	r1, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d100      	bne.n	800152a <__aeabi_dsub+0x21e>
 8001528:	e1b9      	b.n	800189e <__aeabi_dsub+0x592>
 800152a:	42bb      	cmp	r3, r7
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x224>
 800152e:	e1b1      	b.n	8001894 <__aeabi_dsub+0x588>
 8001530:	2701      	movs	r7, #1
 8001532:	000b      	movs	r3, r1
 8001534:	2938      	cmp	r1, #56	@ 0x38
 8001536:	dd00      	ble.n	800153a <__aeabi_dsub+0x22e>
 8001538:	e740      	b.n	80013bc <__aeabi_dsub+0xb0>
 800153a:	e72a      	b.n	8001392 <__aeabi_dsub+0x86>
 800153c:	4661      	mov	r1, ip
 800153e:	2701      	movs	r7, #1
 8001540:	4079      	eors	r1, r7
 8001542:	468c      	mov	ip, r1
 8001544:	4566      	cmp	r6, ip
 8001546:	d1d2      	bne.n	80014ee <__aeabi_dsub+0x1e2>
 8001548:	2b00      	cmp	r3, #0
 800154a:	d100      	bne.n	800154e <__aeabi_dsub+0x242>
 800154c:	e0c5      	b.n	80016da <__aeabi_dsub+0x3ce>
 800154e:	2d00      	cmp	r5, #0
 8001550:	d000      	beq.n	8001554 <__aeabi_dsub+0x248>
 8001552:	e155      	b.n	8001800 <__aeabi_dsub+0x4f4>
 8001554:	464b      	mov	r3, r9
 8001556:	0025      	movs	r5, r4
 8001558:	4305      	orrs	r5, r0
 800155a:	d100      	bne.n	800155e <__aeabi_dsub+0x252>
 800155c:	e212      	b.n	8001984 <__aeabi_dsub+0x678>
 800155e:	1e59      	subs	r1, r3, #1
 8001560:	468c      	mov	ip, r1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d100      	bne.n	8001568 <__aeabi_dsub+0x25c>
 8001566:	e249      	b.n	80019fc <__aeabi_dsub+0x6f0>
 8001568:	4d41      	ldr	r5, [pc, #260]	@ (8001670 <__aeabi_dsub+0x364>)
 800156a:	42ab      	cmp	r3, r5
 800156c:	d100      	bne.n	8001570 <__aeabi_dsub+0x264>
 800156e:	e28f      	b.n	8001a90 <__aeabi_dsub+0x784>
 8001570:	2701      	movs	r7, #1
 8001572:	2938      	cmp	r1, #56	@ 0x38
 8001574:	dc11      	bgt.n	800159a <__aeabi_dsub+0x28e>
 8001576:	4663      	mov	r3, ip
 8001578:	2b1f      	cmp	r3, #31
 800157a:	dd00      	ble.n	800157e <__aeabi_dsub+0x272>
 800157c:	e25b      	b.n	8001a36 <__aeabi_dsub+0x72a>
 800157e:	4661      	mov	r1, ip
 8001580:	2320      	movs	r3, #32
 8001582:	0027      	movs	r7, r4
 8001584:	1a5b      	subs	r3, r3, r1
 8001586:	0005      	movs	r5, r0
 8001588:	4098      	lsls	r0, r3
 800158a:	409f      	lsls	r7, r3
 800158c:	40cd      	lsrs	r5, r1
 800158e:	1e43      	subs	r3, r0, #1
 8001590:	4198      	sbcs	r0, r3
 8001592:	40cc      	lsrs	r4, r1
 8001594:	432f      	orrs	r7, r5
 8001596:	4307      	orrs	r7, r0
 8001598:	44a3      	add	fp, r4
 800159a:	18bf      	adds	r7, r7, r2
 800159c:	4297      	cmp	r7, r2
 800159e:	4192      	sbcs	r2, r2
 80015a0:	4252      	negs	r2, r2
 80015a2:	445a      	add	r2, fp
 80015a4:	0014      	movs	r4, r2
 80015a6:	464d      	mov	r5, r9
 80015a8:	e787      	b.n	80014ba <__aeabi_dsub+0x1ae>
 80015aa:	4f34      	ldr	r7, [pc, #208]	@ (800167c <__aeabi_dsub+0x370>)
 80015ac:	1c6b      	adds	r3, r5, #1
 80015ae:	423b      	tst	r3, r7
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dsub+0x2a8>
 80015b2:	e0b6      	b.n	8001722 <__aeabi_dsub+0x416>
 80015b4:	4659      	mov	r1, fp
 80015b6:	0023      	movs	r3, r4
 80015b8:	4311      	orrs	r1, r2
 80015ba:	000f      	movs	r7, r1
 80015bc:	4303      	orrs	r3, r0
 80015be:	2d00      	cmp	r5, #0
 80015c0:	d000      	beq.n	80015c4 <__aeabi_dsub+0x2b8>
 80015c2:	e126      	b.n	8001812 <__aeabi_dsub+0x506>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d100      	bne.n	80015ca <__aeabi_dsub+0x2be>
 80015c8:	e1c0      	b.n	800194c <__aeabi_dsub+0x640>
 80015ca:	2900      	cmp	r1, #0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dsub+0x2c4>
 80015ce:	e0a1      	b.n	8001714 <__aeabi_dsub+0x408>
 80015d0:	1a83      	subs	r3, r0, r2
 80015d2:	4698      	mov	r8, r3
 80015d4:	465b      	mov	r3, fp
 80015d6:	4540      	cmp	r0, r8
 80015d8:	41ad      	sbcs	r5, r5
 80015da:	1ae3      	subs	r3, r4, r3
 80015dc:	426d      	negs	r5, r5
 80015de:	1b5b      	subs	r3, r3, r5
 80015e0:	2580      	movs	r5, #128	@ 0x80
 80015e2:	042d      	lsls	r5, r5, #16
 80015e4:	422b      	tst	r3, r5
 80015e6:	d100      	bne.n	80015ea <__aeabi_dsub+0x2de>
 80015e8:	e14b      	b.n	8001882 <__aeabi_dsub+0x576>
 80015ea:	465b      	mov	r3, fp
 80015ec:	1a10      	subs	r0, r2, r0
 80015ee:	4282      	cmp	r2, r0
 80015f0:	4192      	sbcs	r2, r2
 80015f2:	1b1c      	subs	r4, r3, r4
 80015f4:	0007      	movs	r7, r0
 80015f6:	2601      	movs	r6, #1
 80015f8:	4663      	mov	r3, ip
 80015fa:	4252      	negs	r2, r2
 80015fc:	1aa4      	subs	r4, r4, r2
 80015fe:	4327      	orrs	r7, r4
 8001600:	401e      	ands	r6, r3
 8001602:	2f00      	cmp	r7, #0
 8001604:	d100      	bne.n	8001608 <__aeabi_dsub+0x2fc>
 8001606:	e142      	b.n	800188e <__aeabi_dsub+0x582>
 8001608:	422c      	tst	r4, r5
 800160a:	d100      	bne.n	800160e <__aeabi_dsub+0x302>
 800160c:	e26d      	b.n	8001aea <__aeabi_dsub+0x7de>
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <__aeabi_dsub+0x368>)
 8001610:	2501      	movs	r5, #1
 8001612:	401c      	ands	r4, r3
 8001614:	e71b      	b.n	800144e <__aeabi_dsub+0x142>
 8001616:	42bd      	cmp	r5, r7
 8001618:	d100      	bne.n	800161c <__aeabi_dsub+0x310>
 800161a:	e13b      	b.n	8001894 <__aeabi_dsub+0x588>
 800161c:	2701      	movs	r7, #1
 800161e:	2b38      	cmp	r3, #56	@ 0x38
 8001620:	dd00      	ble.n	8001624 <__aeabi_dsub+0x318>
 8001622:	e745      	b.n	80014b0 <__aeabi_dsub+0x1a4>
 8001624:	2780      	movs	r7, #128	@ 0x80
 8001626:	4659      	mov	r1, fp
 8001628:	043f      	lsls	r7, r7, #16
 800162a:	4339      	orrs	r1, r7
 800162c:	468b      	mov	fp, r1
 800162e:	e72a      	b.n	8001486 <__aeabi_dsub+0x17a>
 8001630:	2400      	movs	r4, #0
 8001632:	2700      	movs	r7, #0
 8001634:	052d      	lsls	r5, r5, #20
 8001636:	4325      	orrs	r5, r4
 8001638:	07f6      	lsls	r6, r6, #31
 800163a:	4335      	orrs	r5, r6
 800163c:	0038      	movs	r0, r7
 800163e:	0029      	movs	r1, r5
 8001640:	b003      	add	sp, #12
 8001642:	bcf0      	pop	{r4, r5, r6, r7}
 8001644:	46bb      	mov	fp, r7
 8001646:	46b2      	mov	sl, r6
 8001648:	46a9      	mov	r9, r5
 800164a:	46a0      	mov	r8, r4
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164e:	077b      	lsls	r3, r7, #29
 8001650:	d004      	beq.n	800165c <__aeabi_dsub+0x350>
 8001652:	230f      	movs	r3, #15
 8001654:	403b      	ands	r3, r7
 8001656:	2b04      	cmp	r3, #4
 8001658:	d000      	beq.n	800165c <__aeabi_dsub+0x350>
 800165a:	e6e7      	b.n	800142c <__aeabi_dsub+0x120>
 800165c:	002b      	movs	r3, r5
 800165e:	08f8      	lsrs	r0, r7, #3
 8001660:	4a03      	ldr	r2, [pc, #12]	@ (8001670 <__aeabi_dsub+0x364>)
 8001662:	0767      	lsls	r7, r4, #29
 8001664:	4307      	orrs	r7, r0
 8001666:	08e5      	lsrs	r5, r4, #3
 8001668:	4293      	cmp	r3, r2
 800166a:	d100      	bne.n	800166e <__aeabi_dsub+0x362>
 800166c:	e74a      	b.n	8001504 <__aeabi_dsub+0x1f8>
 800166e:	e0a5      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001670:	000007ff 	.word	0x000007ff
 8001674:	ff7fffff 	.word	0xff7fffff
 8001678:	fffff801 	.word	0xfffff801
 800167c:	000007fe 	.word	0x000007fe
 8001680:	0038      	movs	r0, r7
 8001682:	f000 fb17 	bl	8001cb4 <__clzsi2>
 8001686:	0003      	movs	r3, r0
 8001688:	3318      	adds	r3, #24
 800168a:	2b1f      	cmp	r3, #31
 800168c:	dc00      	bgt.n	8001690 <__aeabi_dsub+0x384>
 800168e:	e6a7      	b.n	80013e0 <__aeabi_dsub+0xd4>
 8001690:	003a      	movs	r2, r7
 8001692:	3808      	subs	r0, #8
 8001694:	4082      	lsls	r2, r0
 8001696:	429d      	cmp	r5, r3
 8001698:	dd00      	ble.n	800169c <__aeabi_dsub+0x390>
 800169a:	e08a      	b.n	80017b2 <__aeabi_dsub+0x4a6>
 800169c:	1b5b      	subs	r3, r3, r5
 800169e:	1c58      	adds	r0, r3, #1
 80016a0:	281f      	cmp	r0, #31
 80016a2:	dc00      	bgt.n	80016a6 <__aeabi_dsub+0x39a>
 80016a4:	e1d8      	b.n	8001a58 <__aeabi_dsub+0x74c>
 80016a6:	0017      	movs	r7, r2
 80016a8:	3b1f      	subs	r3, #31
 80016aa:	40df      	lsrs	r7, r3
 80016ac:	2820      	cmp	r0, #32
 80016ae:	d005      	beq.n	80016bc <__aeabi_dsub+0x3b0>
 80016b0:	2340      	movs	r3, #64	@ 0x40
 80016b2:	1a1b      	subs	r3, r3, r0
 80016b4:	409a      	lsls	r2, r3
 80016b6:	1e53      	subs	r3, r2, #1
 80016b8:	419a      	sbcs	r2, r3
 80016ba:	4317      	orrs	r7, r2
 80016bc:	2500      	movs	r5, #0
 80016be:	2f00      	cmp	r7, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x3b8>
 80016c2:	e0e5      	b.n	8001890 <__aeabi_dsub+0x584>
 80016c4:	077b      	lsls	r3, r7, #29
 80016c6:	d000      	beq.n	80016ca <__aeabi_dsub+0x3be>
 80016c8:	e6ab      	b.n	8001422 <__aeabi_dsub+0x116>
 80016ca:	002c      	movs	r4, r5
 80016cc:	e7c6      	b.n	800165c <__aeabi_dsub+0x350>
 80016ce:	08c0      	lsrs	r0, r0, #3
 80016d0:	e7c6      	b.n	8001660 <__aeabi_dsub+0x354>
 80016d2:	2700      	movs	r7, #0
 80016d4:	2400      	movs	r4, #0
 80016d6:	4dd1      	ldr	r5, [pc, #836]	@ (8001a1c <__aeabi_dsub+0x710>)
 80016d8:	e7ac      	b.n	8001634 <__aeabi_dsub+0x328>
 80016da:	4fd1      	ldr	r7, [pc, #836]	@ (8001a20 <__aeabi_dsub+0x714>)
 80016dc:	1c6b      	adds	r3, r5, #1
 80016de:	423b      	tst	r3, r7
 80016e0:	d171      	bne.n	80017c6 <__aeabi_dsub+0x4ba>
 80016e2:	0023      	movs	r3, r4
 80016e4:	4303      	orrs	r3, r0
 80016e6:	2d00      	cmp	r5, #0
 80016e8:	d000      	beq.n	80016ec <__aeabi_dsub+0x3e0>
 80016ea:	e14e      	b.n	800198a <__aeabi_dsub+0x67e>
 80016ec:	4657      	mov	r7, sl
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dsub+0x3e8>
 80016f2:	e1b5      	b.n	8001a60 <__aeabi_dsub+0x754>
 80016f4:	2f00      	cmp	r7, #0
 80016f6:	d00d      	beq.n	8001714 <__aeabi_dsub+0x408>
 80016f8:	1883      	adds	r3, r0, r2
 80016fa:	4283      	cmp	r3, r0
 80016fc:	4180      	sbcs	r0, r0
 80016fe:	445c      	add	r4, fp
 8001700:	4240      	negs	r0, r0
 8001702:	1824      	adds	r4, r4, r0
 8001704:	0222      	lsls	r2, r4, #8
 8001706:	d500      	bpl.n	800170a <__aeabi_dsub+0x3fe>
 8001708:	e1c8      	b.n	8001a9c <__aeabi_dsub+0x790>
 800170a:	001f      	movs	r7, r3
 800170c:	4698      	mov	r8, r3
 800170e:	4327      	orrs	r7, r4
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x408>
 8001712:	e0bc      	b.n	800188e <__aeabi_dsub+0x582>
 8001714:	4643      	mov	r3, r8
 8001716:	0767      	lsls	r7, r4, #29
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	431f      	orrs	r7, r3
 800171c:	08e5      	lsrs	r5, r4, #3
 800171e:	2300      	movs	r3, #0
 8001720:	e04c      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001722:	1a83      	subs	r3, r0, r2
 8001724:	4698      	mov	r8, r3
 8001726:	465b      	mov	r3, fp
 8001728:	4540      	cmp	r0, r8
 800172a:	41bf      	sbcs	r7, r7
 800172c:	1ae3      	subs	r3, r4, r3
 800172e:	427f      	negs	r7, r7
 8001730:	1bdb      	subs	r3, r3, r7
 8001732:	021f      	lsls	r7, r3, #8
 8001734:	d47c      	bmi.n	8001830 <__aeabi_dsub+0x524>
 8001736:	4647      	mov	r7, r8
 8001738:	431f      	orrs	r7, r3
 800173a:	d100      	bne.n	800173e <__aeabi_dsub+0x432>
 800173c:	e0a6      	b.n	800188c <__aeabi_dsub+0x580>
 800173e:	001c      	movs	r4, r3
 8001740:	4647      	mov	r7, r8
 8001742:	e645      	b.n	80013d0 <__aeabi_dsub+0xc4>
 8001744:	4cb7      	ldr	r4, [pc, #732]	@ (8001a24 <__aeabi_dsub+0x718>)
 8001746:	1aed      	subs	r5, r5, r3
 8001748:	4014      	ands	r4, r2
 800174a:	077b      	lsls	r3, r7, #29
 800174c:	d000      	beq.n	8001750 <__aeabi_dsub+0x444>
 800174e:	e780      	b.n	8001652 <__aeabi_dsub+0x346>
 8001750:	e784      	b.n	800165c <__aeabi_dsub+0x350>
 8001752:	464b      	mov	r3, r9
 8001754:	0025      	movs	r5, r4
 8001756:	4305      	orrs	r5, r0
 8001758:	d066      	beq.n	8001828 <__aeabi_dsub+0x51c>
 800175a:	1e5f      	subs	r7, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d100      	bne.n	8001762 <__aeabi_dsub+0x456>
 8001760:	e0fc      	b.n	800195c <__aeabi_dsub+0x650>
 8001762:	4dae      	ldr	r5, [pc, #696]	@ (8001a1c <__aeabi_dsub+0x710>)
 8001764:	42ab      	cmp	r3, r5
 8001766:	d100      	bne.n	800176a <__aeabi_dsub+0x45e>
 8001768:	e15e      	b.n	8001a28 <__aeabi_dsub+0x71c>
 800176a:	4666      	mov	r6, ip
 800176c:	2f38      	cmp	r7, #56	@ 0x38
 800176e:	dc00      	bgt.n	8001772 <__aeabi_dsub+0x466>
 8001770:	e0b4      	b.n	80018dc <__aeabi_dsub+0x5d0>
 8001772:	2001      	movs	r0, #1
 8001774:	1a17      	subs	r7, r2, r0
 8001776:	42ba      	cmp	r2, r7
 8001778:	4192      	sbcs	r2, r2
 800177a:	465b      	mov	r3, fp
 800177c:	4252      	negs	r2, r2
 800177e:	464d      	mov	r5, r9
 8001780:	1a9c      	subs	r4, r3, r2
 8001782:	e620      	b.n	80013c6 <__aeabi_dsub+0xba>
 8001784:	0767      	lsls	r7, r4, #29
 8001786:	08c0      	lsrs	r0, r0, #3
 8001788:	4307      	orrs	r7, r0
 800178a:	08e5      	lsrs	r5, r4, #3
 800178c:	e6ba      	b.n	8001504 <__aeabi_dsub+0x1f8>
 800178e:	001f      	movs	r7, r3
 8001790:	4659      	mov	r1, fp
 8001792:	3f20      	subs	r7, #32
 8001794:	40f9      	lsrs	r1, r7
 8001796:	000f      	movs	r7, r1
 8001798:	2b20      	cmp	r3, #32
 800179a:	d005      	beq.n	80017a8 <__aeabi_dsub+0x49c>
 800179c:	2140      	movs	r1, #64	@ 0x40
 800179e:	1acb      	subs	r3, r1, r3
 80017a0:	4659      	mov	r1, fp
 80017a2:	4099      	lsls	r1, r3
 80017a4:	430a      	orrs	r2, r1
 80017a6:	4692      	mov	sl, r2
 80017a8:	4653      	mov	r3, sl
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	4193      	sbcs	r3, r2
 80017ae:	431f      	orrs	r7, r3
 80017b0:	e604      	b.n	80013bc <__aeabi_dsub+0xb0>
 80017b2:	1aeb      	subs	r3, r5, r3
 80017b4:	4d9b      	ldr	r5, [pc, #620]	@ (8001a24 <__aeabi_dsub+0x718>)
 80017b6:	4015      	ands	r5, r2
 80017b8:	076f      	lsls	r7, r5, #29
 80017ba:	08ed      	lsrs	r5, r5, #3
 80017bc:	032c      	lsls	r4, r5, #12
 80017be:	055d      	lsls	r5, r3, #21
 80017c0:	0b24      	lsrs	r4, r4, #12
 80017c2:	0d6d      	lsrs	r5, r5, #21
 80017c4:	e736      	b.n	8001634 <__aeabi_dsub+0x328>
 80017c6:	4d95      	ldr	r5, [pc, #596]	@ (8001a1c <__aeabi_dsub+0x710>)
 80017c8:	42ab      	cmp	r3, r5
 80017ca:	d100      	bne.n	80017ce <__aeabi_dsub+0x4c2>
 80017cc:	e0d6      	b.n	800197c <__aeabi_dsub+0x670>
 80017ce:	1882      	adds	r2, r0, r2
 80017d0:	0021      	movs	r1, r4
 80017d2:	4282      	cmp	r2, r0
 80017d4:	4180      	sbcs	r0, r0
 80017d6:	4459      	add	r1, fp
 80017d8:	4240      	negs	r0, r0
 80017da:	1808      	adds	r0, r1, r0
 80017dc:	07c7      	lsls	r7, r0, #31
 80017de:	0852      	lsrs	r2, r2, #1
 80017e0:	4317      	orrs	r7, r2
 80017e2:	0844      	lsrs	r4, r0, #1
 80017e4:	0752      	lsls	r2, r2, #29
 80017e6:	d400      	bmi.n	80017ea <__aeabi_dsub+0x4de>
 80017e8:	e185      	b.n	8001af6 <__aeabi_dsub+0x7ea>
 80017ea:	220f      	movs	r2, #15
 80017ec:	001d      	movs	r5, r3
 80017ee:	403a      	ands	r2, r7
 80017f0:	2a04      	cmp	r2, #4
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dsub+0x4ea>
 80017f4:	e61a      	b.n	800142c <__aeabi_dsub+0x120>
 80017f6:	08ff      	lsrs	r7, r7, #3
 80017f8:	0764      	lsls	r4, r4, #29
 80017fa:	4327      	orrs	r7, r4
 80017fc:	0905      	lsrs	r5, r0, #4
 80017fe:	e7dd      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001800:	465b      	mov	r3, fp
 8001802:	08d2      	lsrs	r2, r2, #3
 8001804:	075f      	lsls	r7, r3, #29
 8001806:	4317      	orrs	r7, r2
 8001808:	08dd      	lsrs	r5, r3, #3
 800180a:	e67b      	b.n	8001504 <__aeabi_dsub+0x1f8>
 800180c:	2700      	movs	r7, #0
 800180e:	2400      	movs	r4, #0
 8001810:	e710      	b.n	8001634 <__aeabi_dsub+0x328>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d000      	beq.n	8001818 <__aeabi_dsub+0x50c>
 8001816:	e0d6      	b.n	80019c6 <__aeabi_dsub+0x6ba>
 8001818:	2900      	cmp	r1, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x512>
 800181c:	e12f      	b.n	8001a7e <__aeabi_dsub+0x772>
 800181e:	2480      	movs	r4, #128	@ 0x80
 8001820:	2600      	movs	r6, #0
 8001822:	4d7e      	ldr	r5, [pc, #504]	@ (8001a1c <__aeabi_dsub+0x710>)
 8001824:	0324      	lsls	r4, r4, #12
 8001826:	e705      	b.n	8001634 <__aeabi_dsub+0x328>
 8001828:	4666      	mov	r6, ip
 800182a:	465c      	mov	r4, fp
 800182c:	08d0      	lsrs	r0, r2, #3
 800182e:	e717      	b.n	8001660 <__aeabi_dsub+0x354>
 8001830:	465b      	mov	r3, fp
 8001832:	1a17      	subs	r7, r2, r0
 8001834:	42ba      	cmp	r2, r7
 8001836:	4192      	sbcs	r2, r2
 8001838:	1b1c      	subs	r4, r3, r4
 800183a:	2601      	movs	r6, #1
 800183c:	4663      	mov	r3, ip
 800183e:	4252      	negs	r2, r2
 8001840:	1aa4      	subs	r4, r4, r2
 8001842:	401e      	ands	r6, r3
 8001844:	e5c4      	b.n	80013d0 <__aeabi_dsub+0xc4>
 8001846:	1883      	adds	r3, r0, r2
 8001848:	4283      	cmp	r3, r0
 800184a:	4180      	sbcs	r0, r0
 800184c:	445c      	add	r4, fp
 800184e:	4240      	negs	r0, r0
 8001850:	1825      	adds	r5, r4, r0
 8001852:	022a      	lsls	r2, r5, #8
 8001854:	d400      	bmi.n	8001858 <__aeabi_dsub+0x54c>
 8001856:	e0da      	b.n	8001a0e <__aeabi_dsub+0x702>
 8001858:	4a72      	ldr	r2, [pc, #456]	@ (8001a24 <__aeabi_dsub+0x718>)
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	4015      	ands	r5, r2
 800185e:	07ea      	lsls	r2, r5, #31
 8001860:	431a      	orrs	r2, r3
 8001862:	0869      	lsrs	r1, r5, #1
 8001864:	075b      	lsls	r3, r3, #29
 8001866:	d400      	bmi.n	800186a <__aeabi_dsub+0x55e>
 8001868:	e14a      	b.n	8001b00 <__aeabi_dsub+0x7f4>
 800186a:	230f      	movs	r3, #15
 800186c:	4013      	ands	r3, r2
 800186e:	2b04      	cmp	r3, #4
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x568>
 8001872:	e0fc      	b.n	8001a6e <__aeabi_dsub+0x762>
 8001874:	1d17      	adds	r7, r2, #4
 8001876:	4297      	cmp	r7, r2
 8001878:	41a4      	sbcs	r4, r4
 800187a:	4264      	negs	r4, r4
 800187c:	2502      	movs	r5, #2
 800187e:	1864      	adds	r4, r4, r1
 8001880:	e6ec      	b.n	800165c <__aeabi_dsub+0x350>
 8001882:	4647      	mov	r7, r8
 8001884:	001c      	movs	r4, r3
 8001886:	431f      	orrs	r7, r3
 8001888:	d000      	beq.n	800188c <__aeabi_dsub+0x580>
 800188a:	e743      	b.n	8001714 <__aeabi_dsub+0x408>
 800188c:	2600      	movs	r6, #0
 800188e:	2500      	movs	r5, #0
 8001890:	2400      	movs	r4, #0
 8001892:	e6cf      	b.n	8001634 <__aeabi_dsub+0x328>
 8001894:	08c0      	lsrs	r0, r0, #3
 8001896:	0767      	lsls	r7, r4, #29
 8001898:	4307      	orrs	r7, r0
 800189a:	08e5      	lsrs	r5, r4, #3
 800189c:	e632      	b.n	8001504 <__aeabi_dsub+0x1f8>
 800189e:	1a87      	subs	r7, r0, r2
 80018a0:	465b      	mov	r3, fp
 80018a2:	42b8      	cmp	r0, r7
 80018a4:	4180      	sbcs	r0, r0
 80018a6:	1ae4      	subs	r4, r4, r3
 80018a8:	4240      	negs	r0, r0
 80018aa:	1a24      	subs	r4, r4, r0
 80018ac:	0223      	lsls	r3, r4, #8
 80018ae:	d428      	bmi.n	8001902 <__aeabi_dsub+0x5f6>
 80018b0:	0763      	lsls	r3, r4, #29
 80018b2:	08ff      	lsrs	r7, r7, #3
 80018b4:	431f      	orrs	r7, r3
 80018b6:	08e5      	lsrs	r5, r4, #3
 80018b8:	2301      	movs	r3, #1
 80018ba:	e77f      	b.n	80017bc <__aeabi_dsub+0x4b0>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dsub+0x5b6>
 80018c0:	e673      	b.n	80015aa <__aeabi_dsub+0x29e>
 80018c2:	464b      	mov	r3, r9
 80018c4:	1b5f      	subs	r7, r3, r5
 80018c6:	003b      	movs	r3, r7
 80018c8:	2d00      	cmp	r5, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dsub+0x5c2>
 80018cc:	e742      	b.n	8001754 <__aeabi_dsub+0x448>
 80018ce:	2f38      	cmp	r7, #56	@ 0x38
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dsub+0x5c8>
 80018d2:	e0ec      	b.n	8001aae <__aeabi_dsub+0x7a2>
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	000e      	movs	r6, r1
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431c      	orrs	r4, r3
 80018dc:	2f1f      	cmp	r7, #31
 80018de:	dc25      	bgt.n	800192c <__aeabi_dsub+0x620>
 80018e0:	2520      	movs	r5, #32
 80018e2:	0023      	movs	r3, r4
 80018e4:	1bed      	subs	r5, r5, r7
 80018e6:	0001      	movs	r1, r0
 80018e8:	40a8      	lsls	r0, r5
 80018ea:	40ab      	lsls	r3, r5
 80018ec:	40f9      	lsrs	r1, r7
 80018ee:	1e45      	subs	r5, r0, #1
 80018f0:	41a8      	sbcs	r0, r5
 80018f2:	430b      	orrs	r3, r1
 80018f4:	40fc      	lsrs	r4, r7
 80018f6:	4318      	orrs	r0, r3
 80018f8:	465b      	mov	r3, fp
 80018fa:	1b1b      	subs	r3, r3, r4
 80018fc:	469b      	mov	fp, r3
 80018fe:	e739      	b.n	8001774 <__aeabi_dsub+0x468>
 8001900:	4666      	mov	r6, ip
 8001902:	2501      	movs	r5, #1
 8001904:	e562      	b.n	80013cc <__aeabi_dsub+0xc0>
 8001906:	001f      	movs	r7, r3
 8001908:	4659      	mov	r1, fp
 800190a:	3f20      	subs	r7, #32
 800190c:	40f9      	lsrs	r1, r7
 800190e:	468c      	mov	ip, r1
 8001910:	2b20      	cmp	r3, #32
 8001912:	d005      	beq.n	8001920 <__aeabi_dsub+0x614>
 8001914:	2740      	movs	r7, #64	@ 0x40
 8001916:	4659      	mov	r1, fp
 8001918:	1afb      	subs	r3, r7, r3
 800191a:	4099      	lsls	r1, r3
 800191c:	430a      	orrs	r2, r1
 800191e:	4692      	mov	sl, r2
 8001920:	4657      	mov	r7, sl
 8001922:	1e7b      	subs	r3, r7, #1
 8001924:	419f      	sbcs	r7, r3
 8001926:	4663      	mov	r3, ip
 8001928:	431f      	orrs	r7, r3
 800192a:	e5c1      	b.n	80014b0 <__aeabi_dsub+0x1a4>
 800192c:	003b      	movs	r3, r7
 800192e:	0025      	movs	r5, r4
 8001930:	3b20      	subs	r3, #32
 8001932:	40dd      	lsrs	r5, r3
 8001934:	2f20      	cmp	r7, #32
 8001936:	d004      	beq.n	8001942 <__aeabi_dsub+0x636>
 8001938:	2340      	movs	r3, #64	@ 0x40
 800193a:	1bdb      	subs	r3, r3, r7
 800193c:	409c      	lsls	r4, r3
 800193e:	4320      	orrs	r0, r4
 8001940:	4680      	mov	r8, r0
 8001942:	4640      	mov	r0, r8
 8001944:	1e43      	subs	r3, r0, #1
 8001946:	4198      	sbcs	r0, r3
 8001948:	4328      	orrs	r0, r5
 800194a:	e713      	b.n	8001774 <__aeabi_dsub+0x468>
 800194c:	2900      	cmp	r1, #0
 800194e:	d09d      	beq.n	800188c <__aeabi_dsub+0x580>
 8001950:	2601      	movs	r6, #1
 8001952:	4663      	mov	r3, ip
 8001954:	465c      	mov	r4, fp
 8001956:	4690      	mov	r8, r2
 8001958:	401e      	ands	r6, r3
 800195a:	e6db      	b.n	8001714 <__aeabi_dsub+0x408>
 800195c:	1a17      	subs	r7, r2, r0
 800195e:	465b      	mov	r3, fp
 8001960:	42ba      	cmp	r2, r7
 8001962:	4192      	sbcs	r2, r2
 8001964:	1b1c      	subs	r4, r3, r4
 8001966:	4252      	negs	r2, r2
 8001968:	1aa4      	subs	r4, r4, r2
 800196a:	0223      	lsls	r3, r4, #8
 800196c:	d4c8      	bmi.n	8001900 <__aeabi_dsub+0x5f4>
 800196e:	0763      	lsls	r3, r4, #29
 8001970:	08ff      	lsrs	r7, r7, #3
 8001972:	431f      	orrs	r7, r3
 8001974:	4666      	mov	r6, ip
 8001976:	2301      	movs	r3, #1
 8001978:	08e5      	lsrs	r5, r4, #3
 800197a:	e71f      	b.n	80017bc <__aeabi_dsub+0x4b0>
 800197c:	001d      	movs	r5, r3
 800197e:	2400      	movs	r4, #0
 8001980:	2700      	movs	r7, #0
 8001982:	e657      	b.n	8001634 <__aeabi_dsub+0x328>
 8001984:	465c      	mov	r4, fp
 8001986:	08d0      	lsrs	r0, r2, #3
 8001988:	e66a      	b.n	8001660 <__aeabi_dsub+0x354>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x684>
 800198e:	e737      	b.n	8001800 <__aeabi_dsub+0x4f4>
 8001990:	4653      	mov	r3, sl
 8001992:	08c0      	lsrs	r0, r0, #3
 8001994:	0767      	lsls	r7, r4, #29
 8001996:	4307      	orrs	r7, r0
 8001998:	08e5      	lsrs	r5, r4, #3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x694>
 800199e:	e5b1      	b.n	8001504 <__aeabi_dsub+0x1f8>
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	031b      	lsls	r3, r3, #12
 80019a4:	421d      	tst	r5, r3
 80019a6:	d008      	beq.n	80019ba <__aeabi_dsub+0x6ae>
 80019a8:	4659      	mov	r1, fp
 80019aa:	08c8      	lsrs	r0, r1, #3
 80019ac:	4218      	tst	r0, r3
 80019ae:	d104      	bne.n	80019ba <__aeabi_dsub+0x6ae>
 80019b0:	08d2      	lsrs	r2, r2, #3
 80019b2:	0749      	lsls	r1, r1, #29
 80019b4:	430a      	orrs	r2, r1
 80019b6:	0017      	movs	r7, r2
 80019b8:	0005      	movs	r5, r0
 80019ba:	0f7b      	lsrs	r3, r7, #29
 80019bc:	00ff      	lsls	r7, r7, #3
 80019be:	08ff      	lsrs	r7, r7, #3
 80019c0:	075b      	lsls	r3, r3, #29
 80019c2:	431f      	orrs	r7, r3
 80019c4:	e59e      	b.n	8001504 <__aeabi_dsub+0x1f8>
 80019c6:	08c0      	lsrs	r0, r0, #3
 80019c8:	0763      	lsls	r3, r4, #29
 80019ca:	4318      	orrs	r0, r3
 80019cc:	08e5      	lsrs	r5, r4, #3
 80019ce:	2900      	cmp	r1, #0
 80019d0:	d053      	beq.n	8001a7a <__aeabi_dsub+0x76e>
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	031b      	lsls	r3, r3, #12
 80019d6:	421d      	tst	r5, r3
 80019d8:	d00a      	beq.n	80019f0 <__aeabi_dsub+0x6e4>
 80019da:	4659      	mov	r1, fp
 80019dc:	08cc      	lsrs	r4, r1, #3
 80019de:	421c      	tst	r4, r3
 80019e0:	d106      	bne.n	80019f0 <__aeabi_dsub+0x6e4>
 80019e2:	2601      	movs	r6, #1
 80019e4:	4663      	mov	r3, ip
 80019e6:	0025      	movs	r5, r4
 80019e8:	08d0      	lsrs	r0, r2, #3
 80019ea:	0749      	lsls	r1, r1, #29
 80019ec:	4308      	orrs	r0, r1
 80019ee:	401e      	ands	r6, r3
 80019f0:	0f47      	lsrs	r7, r0, #29
 80019f2:	00c0      	lsls	r0, r0, #3
 80019f4:	08c0      	lsrs	r0, r0, #3
 80019f6:	077f      	lsls	r7, r7, #29
 80019f8:	4307      	orrs	r7, r0
 80019fa:	e583      	b.n	8001504 <__aeabi_dsub+0x1f8>
 80019fc:	1883      	adds	r3, r0, r2
 80019fe:	4293      	cmp	r3, r2
 8001a00:	4192      	sbcs	r2, r2
 8001a02:	445c      	add	r4, fp
 8001a04:	4252      	negs	r2, r2
 8001a06:	18a5      	adds	r5, r4, r2
 8001a08:	022a      	lsls	r2, r5, #8
 8001a0a:	d500      	bpl.n	8001a0e <__aeabi_dsub+0x702>
 8001a0c:	e724      	b.n	8001858 <__aeabi_dsub+0x54c>
 8001a0e:	076f      	lsls	r7, r5, #29
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	431f      	orrs	r7, r3
 8001a14:	08ed      	lsrs	r5, r5, #3
 8001a16:	2301      	movs	r3, #1
 8001a18:	e6d0      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	000007ff 	.word	0x000007ff
 8001a20:	000007fe 	.word	0x000007fe
 8001a24:	ff7fffff 	.word	0xff7fffff
 8001a28:	465b      	mov	r3, fp
 8001a2a:	08d2      	lsrs	r2, r2, #3
 8001a2c:	075f      	lsls	r7, r3, #29
 8001a2e:	4666      	mov	r6, ip
 8001a30:	4317      	orrs	r7, r2
 8001a32:	08dd      	lsrs	r5, r3, #3
 8001a34:	e566      	b.n	8001504 <__aeabi_dsub+0x1f8>
 8001a36:	0025      	movs	r5, r4
 8001a38:	3b20      	subs	r3, #32
 8001a3a:	40dd      	lsrs	r5, r3
 8001a3c:	4663      	mov	r3, ip
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d005      	beq.n	8001a4e <__aeabi_dsub+0x742>
 8001a42:	2340      	movs	r3, #64	@ 0x40
 8001a44:	4661      	mov	r1, ip
 8001a46:	1a5b      	subs	r3, r3, r1
 8001a48:	409c      	lsls	r4, r3
 8001a4a:	4320      	orrs	r0, r4
 8001a4c:	4680      	mov	r8, r0
 8001a4e:	4647      	mov	r7, r8
 8001a50:	1e7b      	subs	r3, r7, #1
 8001a52:	419f      	sbcs	r7, r3
 8001a54:	432f      	orrs	r7, r5
 8001a56:	e5a0      	b.n	800159a <__aeabi_dsub+0x28e>
 8001a58:	2120      	movs	r1, #32
 8001a5a:	2700      	movs	r7, #0
 8001a5c:	1a09      	subs	r1, r1, r0
 8001a5e:	e4d2      	b.n	8001406 <__aeabi_dsub+0xfa>
 8001a60:	2f00      	cmp	r7, #0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x75a>
 8001a64:	e713      	b.n	800188e <__aeabi_dsub+0x582>
 8001a66:	465c      	mov	r4, fp
 8001a68:	0017      	movs	r7, r2
 8001a6a:	2500      	movs	r5, #0
 8001a6c:	e5f6      	b.n	800165c <__aeabi_dsub+0x350>
 8001a6e:	08d7      	lsrs	r7, r2, #3
 8001a70:	0749      	lsls	r1, r1, #29
 8001a72:	2302      	movs	r3, #2
 8001a74:	430f      	orrs	r7, r1
 8001a76:	092d      	lsrs	r5, r5, #4
 8001a78:	e6a0      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001a7a:	0007      	movs	r7, r0
 8001a7c:	e542      	b.n	8001504 <__aeabi_dsub+0x1f8>
 8001a7e:	465b      	mov	r3, fp
 8001a80:	2601      	movs	r6, #1
 8001a82:	075f      	lsls	r7, r3, #29
 8001a84:	08dd      	lsrs	r5, r3, #3
 8001a86:	4663      	mov	r3, ip
 8001a88:	08d2      	lsrs	r2, r2, #3
 8001a8a:	4317      	orrs	r7, r2
 8001a8c:	401e      	ands	r6, r3
 8001a8e:	e539      	b.n	8001504 <__aeabi_dsub+0x1f8>
 8001a90:	465b      	mov	r3, fp
 8001a92:	08d2      	lsrs	r2, r2, #3
 8001a94:	075f      	lsls	r7, r3, #29
 8001a96:	4317      	orrs	r7, r2
 8001a98:	08dd      	lsrs	r5, r3, #3
 8001a9a:	e533      	b.n	8001504 <__aeabi_dsub+0x1f8>
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <__aeabi_dsub+0x80c>)
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	4022      	ands	r2, r4
 8001aa2:	0757      	lsls	r7, r2, #29
 8001aa4:	0252      	lsls	r2, r2, #9
 8001aa6:	2501      	movs	r5, #1
 8001aa8:	431f      	orrs	r7, r3
 8001aaa:	0b14      	lsrs	r4, r2, #12
 8001aac:	e5c2      	b.n	8001634 <__aeabi_dsub+0x328>
 8001aae:	000e      	movs	r6, r1
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	e65f      	b.n	8001774 <__aeabi_dsub+0x468>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00d      	beq.n	8001ad4 <__aeabi_dsub+0x7c8>
 8001ab8:	464b      	mov	r3, r9
 8001aba:	1b5b      	subs	r3, r3, r5
 8001abc:	469c      	mov	ip, r3
 8001abe:	2d00      	cmp	r5, #0
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x7b8>
 8001ac2:	e548      	b.n	8001556 <__aeabi_dsub+0x24a>
 8001ac4:	2701      	movs	r7, #1
 8001ac6:	2b38      	cmp	r3, #56	@ 0x38
 8001ac8:	dd00      	ble.n	8001acc <__aeabi_dsub+0x7c0>
 8001aca:	e566      	b.n	800159a <__aeabi_dsub+0x28e>
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	431c      	orrs	r4, r3
 8001ad2:	e550      	b.n	8001576 <__aeabi_dsub+0x26a>
 8001ad4:	1c6b      	adds	r3, r5, #1
 8001ad6:	4d11      	ldr	r5, [pc, #68]	@ (8001b1c <__aeabi_dsub+0x810>)
 8001ad8:	422b      	tst	r3, r5
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x7d2>
 8001adc:	e673      	b.n	80017c6 <__aeabi_dsub+0x4ba>
 8001ade:	4659      	mov	r1, fp
 8001ae0:	0023      	movs	r3, r4
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	468a      	mov	sl, r1
 8001ae6:	4303      	orrs	r3, r0
 8001ae8:	e600      	b.n	80016ec <__aeabi_dsub+0x3e0>
 8001aea:	0767      	lsls	r7, r4, #29
 8001aec:	08c0      	lsrs	r0, r0, #3
 8001aee:	2300      	movs	r3, #0
 8001af0:	4307      	orrs	r7, r0
 8001af2:	08e5      	lsrs	r5, r4, #3
 8001af4:	e662      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001af6:	0764      	lsls	r4, r4, #29
 8001af8:	08ff      	lsrs	r7, r7, #3
 8001afa:	4327      	orrs	r7, r4
 8001afc:	0905      	lsrs	r5, r0, #4
 8001afe:	e65d      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001b00:	08d2      	lsrs	r2, r2, #3
 8001b02:	0749      	lsls	r1, r1, #29
 8001b04:	4311      	orrs	r1, r2
 8001b06:	000f      	movs	r7, r1
 8001b08:	2302      	movs	r3, #2
 8001b0a:	092d      	lsrs	r5, r5, #4
 8001b0c:	e656      	b.n	80017bc <__aeabi_dsub+0x4b0>
 8001b0e:	0007      	movs	r7, r0
 8001b10:	e5a4      	b.n	800165c <__aeabi_dsub+0x350>
 8001b12:	0038      	movs	r0, r7
 8001b14:	e48f      	b.n	8001436 <__aeabi_dsub+0x12a>
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	ff7fffff 	.word	0xff7fffff
 8001b1c:	000007fe 	.word	0x000007fe

08001b20 <__aeabi_f2d>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	0242      	lsls	r2, r0, #9
 8001b24:	0043      	lsls	r3, r0, #1
 8001b26:	0fc4      	lsrs	r4, r0, #31
 8001b28:	20fe      	movs	r0, #254	@ 0xfe
 8001b2a:	0e1b      	lsrs	r3, r3, #24
 8001b2c:	1c59      	adds	r1, r3, #1
 8001b2e:	0a55      	lsrs	r5, r2, #9
 8001b30:	4208      	tst	r0, r1
 8001b32:	d00c      	beq.n	8001b4e <__aeabi_f2d+0x2e>
 8001b34:	21e0      	movs	r1, #224	@ 0xe0
 8001b36:	0089      	lsls	r1, r1, #2
 8001b38:	468c      	mov	ip, r1
 8001b3a:	076d      	lsls	r5, r5, #29
 8001b3c:	0b12      	lsrs	r2, r2, #12
 8001b3e:	4463      	add	r3, ip
 8001b40:	051b      	lsls	r3, r3, #20
 8001b42:	4313      	orrs	r3, r2
 8001b44:	07e4      	lsls	r4, r4, #31
 8001b46:	4323      	orrs	r3, r4
 8001b48:	0028      	movs	r0, r5
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d114      	bne.n	8001b7c <__aeabi_f2d+0x5c>
 8001b52:	2d00      	cmp	r5, #0
 8001b54:	d01b      	beq.n	8001b8e <__aeabi_f2d+0x6e>
 8001b56:	0028      	movs	r0, r5
 8001b58:	f000 f8ac 	bl	8001cb4 <__clzsi2>
 8001b5c:	280a      	cmp	r0, #10
 8001b5e:	dc1c      	bgt.n	8001b9a <__aeabi_f2d+0x7a>
 8001b60:	230b      	movs	r3, #11
 8001b62:	002a      	movs	r2, r5
 8001b64:	1a1b      	subs	r3, r3, r0
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	0003      	movs	r3, r0
 8001b6a:	3315      	adds	r3, #21
 8001b6c:	409d      	lsls	r5, r3
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <__aeabi_f2d+0x88>)
 8001b70:	0312      	lsls	r2, r2, #12
 8001b72:	1a1b      	subs	r3, r3, r0
 8001b74:	055b      	lsls	r3, r3, #21
 8001b76:	0b12      	lsrs	r2, r2, #12
 8001b78:	0d5b      	lsrs	r3, r3, #21
 8001b7a:	e7e1      	b.n	8001b40 <__aeabi_f2d+0x20>
 8001b7c:	2d00      	cmp	r5, #0
 8001b7e:	d009      	beq.n	8001b94 <__aeabi_f2d+0x74>
 8001b80:	0b13      	lsrs	r3, r2, #12
 8001b82:	2280      	movs	r2, #128	@ 0x80
 8001b84:	0312      	lsls	r2, r2, #12
 8001b86:	431a      	orrs	r2, r3
 8001b88:	076d      	lsls	r5, r5, #29
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <__aeabi_f2d+0x8c>)
 8001b8c:	e7d8      	b.n	8001b40 <__aeabi_f2d+0x20>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2200      	movs	r2, #0
 8001b92:	e7d5      	b.n	8001b40 <__aeabi_f2d+0x20>
 8001b94:	2200      	movs	r2, #0
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <__aeabi_f2d+0x8c>)
 8001b98:	e7d2      	b.n	8001b40 <__aeabi_f2d+0x20>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	002a      	movs	r2, r5
 8001b9e:	3b0b      	subs	r3, #11
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	e7e3      	b.n	8001b6e <__aeabi_f2d+0x4e>
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	00000389 	.word	0x00000389
 8001bac:	000007ff 	.word	0x000007ff

08001bb0 <__aeabi_d2f>:
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	004b      	lsls	r3, r1, #1
 8001bb4:	030f      	lsls	r7, r1, #12
 8001bb6:	0d5b      	lsrs	r3, r3, #21
 8001bb8:	4c3a      	ldr	r4, [pc, #232]	@ (8001ca4 <__aeabi_d2f+0xf4>)
 8001bba:	0f45      	lsrs	r5, r0, #29
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	0a7f      	lsrs	r7, r7, #9
 8001bc0:	1c5e      	adds	r6, r3, #1
 8001bc2:	432f      	orrs	r7, r5
 8001bc4:	9000      	str	r0, [sp, #0]
 8001bc6:	9101      	str	r1, [sp, #4]
 8001bc8:	0fca      	lsrs	r2, r1, #31
 8001bca:	00c5      	lsls	r5, r0, #3
 8001bcc:	4226      	tst	r6, r4
 8001bce:	d00b      	beq.n	8001be8 <__aeabi_d2f+0x38>
 8001bd0:	4935      	ldr	r1, [pc, #212]	@ (8001ca8 <__aeabi_d2f+0xf8>)
 8001bd2:	185c      	adds	r4, r3, r1
 8001bd4:	2cfe      	cmp	r4, #254	@ 0xfe
 8001bd6:	dd13      	ble.n	8001c00 <__aeabi_d2f+0x50>
 8001bd8:	20ff      	movs	r0, #255	@ 0xff
 8001bda:	2300      	movs	r3, #0
 8001bdc:	05c0      	lsls	r0, r0, #23
 8001bde:	4318      	orrs	r0, r3
 8001be0:	07d2      	lsls	r2, r2, #31
 8001be2:	4310      	orrs	r0, r2
 8001be4:	b003      	add	sp, #12
 8001be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be8:	433d      	orrs	r5, r7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <__aeabi_d2f+0x42>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e7f4      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001bf2:	2d00      	cmp	r5, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <__aeabi_d2f+0x28>
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	03db      	lsls	r3, r3, #15
 8001bfa:	20ff      	movs	r0, #255	@ 0xff
 8001bfc:	433b      	orrs	r3, r7
 8001bfe:	e7ed      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	dd0c      	ble.n	8001c1e <__aeabi_d2f+0x6e>
 8001c04:	9b00      	ldr	r3, [sp, #0]
 8001c06:	00ff      	lsls	r7, r7, #3
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	4183      	sbcs	r3, r0
 8001c0e:	0f69      	lsrs	r1, r5, #29
 8001c10:	433b      	orrs	r3, r7
 8001c12:	430b      	orrs	r3, r1
 8001c14:	0759      	lsls	r1, r3, #29
 8001c16:	d127      	bne.n	8001c68 <__aeabi_d2f+0xb8>
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	b2e0      	uxtb	r0, r4
 8001c1c:	e7de      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001c1e:	0021      	movs	r1, r4
 8001c20:	3117      	adds	r1, #23
 8001c22:	db31      	blt.n	8001c88 <__aeabi_d2f+0xd8>
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	201e      	movs	r0, #30
 8001c28:	0409      	lsls	r1, r1, #16
 8001c2a:	4339      	orrs	r1, r7
 8001c2c:	1b00      	subs	r0, r0, r4
 8001c2e:	281f      	cmp	r0, #31
 8001c30:	dd2d      	ble.n	8001c8e <__aeabi_d2f+0xde>
 8001c32:	2602      	movs	r6, #2
 8001c34:	4276      	negs	r6, r6
 8001c36:	1b34      	subs	r4, r6, r4
 8001c38:	000e      	movs	r6, r1
 8001c3a:	40e6      	lsrs	r6, r4
 8001c3c:	0034      	movs	r4, r6
 8001c3e:	2820      	cmp	r0, #32
 8001c40:	d004      	beq.n	8001c4c <__aeabi_d2f+0x9c>
 8001c42:	481a      	ldr	r0, [pc, #104]	@ (8001cac <__aeabi_d2f+0xfc>)
 8001c44:	4684      	mov	ip, r0
 8001c46:	4463      	add	r3, ip
 8001c48:	4099      	lsls	r1, r3
 8001c4a:	430d      	orrs	r5, r1
 8001c4c:	002b      	movs	r3, r5
 8001c4e:	1e59      	subs	r1, r3, #1
 8001c50:	418b      	sbcs	r3, r1
 8001c52:	4323      	orrs	r3, r4
 8001c54:	0759      	lsls	r1, r3, #29
 8001c56:	d003      	beq.n	8001c60 <__aeabi_d2f+0xb0>
 8001c58:	210f      	movs	r1, #15
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	2904      	cmp	r1, #4
 8001c5e:	d10b      	bne.n	8001c78 <__aeabi_d2f+0xc8>
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	2000      	movs	r0, #0
 8001c64:	0a5b      	lsrs	r3, r3, #9
 8001c66:	e7b9      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001c68:	210f      	movs	r1, #15
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	2904      	cmp	r1, #4
 8001c6e:	d104      	bne.n	8001c7a <__aeabi_d2f+0xca>
 8001c70:	019b      	lsls	r3, r3, #6
 8001c72:	0a5b      	lsrs	r3, r3, #9
 8001c74:	b2e0      	uxtb	r0, r4
 8001c76:	e7b1      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001c78:	2400      	movs	r4, #0
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	0159      	lsls	r1, r3, #5
 8001c7e:	d5f7      	bpl.n	8001c70 <__aeabi_d2f+0xc0>
 8001c80:	3401      	adds	r4, #1
 8001c82:	2300      	movs	r3, #0
 8001c84:	b2e0      	uxtb	r0, r4
 8001c86:	e7a9      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001c88:	2000      	movs	r0, #0
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e7a6      	b.n	8001bdc <__aeabi_d2f+0x2c>
 8001c8e:	4c08      	ldr	r4, [pc, #32]	@ (8001cb0 <__aeabi_d2f+0x100>)
 8001c90:	191c      	adds	r4, r3, r4
 8001c92:	002b      	movs	r3, r5
 8001c94:	40a5      	lsls	r5, r4
 8001c96:	40c3      	lsrs	r3, r0
 8001c98:	40a1      	lsls	r1, r4
 8001c9a:	1e68      	subs	r0, r5, #1
 8001c9c:	4185      	sbcs	r5, r0
 8001c9e:	4329      	orrs	r1, r5
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	e7d7      	b.n	8001c54 <__aeabi_d2f+0xa4>
 8001ca4:	000007fe 	.word	0x000007fe
 8001ca8:	fffffc80 	.word	0xfffffc80
 8001cac:	fffffca2 	.word	0xfffffca2
 8001cb0:	fffffc82 	.word	0xfffffc82

08001cb4 <__clzsi2>:
 8001cb4:	211c      	movs	r1, #28
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	4298      	cmp	r0, r3
 8001cbc:	d301      	bcc.n	8001cc2 <__clzsi2+0xe>
 8001cbe:	0c00      	lsrs	r0, r0, #16
 8001cc0:	3910      	subs	r1, #16
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	4298      	cmp	r0, r3
 8001cc6:	d301      	bcc.n	8001ccc <__clzsi2+0x18>
 8001cc8:	0a00      	lsrs	r0, r0, #8
 8001cca:	3908      	subs	r1, #8
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	4298      	cmp	r0, r3
 8001cd0:	d301      	bcc.n	8001cd6 <__clzsi2+0x22>
 8001cd2:	0900      	lsrs	r0, r0, #4
 8001cd4:	3904      	subs	r1, #4
 8001cd6:	a202      	add	r2, pc, #8	@ (adr r2, 8001ce0 <__clzsi2+0x2c>)
 8001cd8:	5c10      	ldrb	r0, [r2, r0]
 8001cda:	1840      	adds	r0, r0, r1
 8001cdc:	4770      	bx	lr
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	02020304 	.word	0x02020304
 8001ce4:	01010101 	.word	0x01010101
	...

08001cf0 <LL_ADC_SetCommonClock>:
  *             is set to clock source asynchronous.
  *             (refer to function @ref LL_ADC_SetClock() ).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <LL_ADC_SetCommonClock+0x24>)
 8001d00:	401a      	ands	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	ffc3ffff 	.word	0xffc3ffff

08001d18 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <LL_ADC_SetCommonFrequencyMode+0x24>)
 8001d28:	401a      	ands	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	fdffffff 	.word	0xfdffffff

08001d40 <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	fe3fffff 	.word	0xfe3fffff

08001d68 <LL_ADC_SetClock>:
  *             cycle).
  *             Refer to reference manual.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	089a      	lsrs	r2, r3, #2
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	615a      	str	r2, [r3, #20]
}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}

08001dae <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4393      	bics	r3, r2
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60da      	str	r2, [r3, #12]
}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	035b      	lsls	r3, r3, #13
 8001de4:	0b5b      	lsrs	r3, r3, #13
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dec:	46c0      	nop			@ (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4393      	bics	r3, r2
 8001e06:	001a      	movs	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <LL_ADC_EnableInternalRegulator+0x24>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	2280      	movs	r2, #128	@ 0x80
 8001e2a:	0552      	lsls	r2, r2, #21
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	6fffffe8 	.word	0x6fffffe8

08001e40 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4393      	bics	r3, r2
 8001e50:	001a      	movs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	605a      	str	r2, [r3, #4]
}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	001a      	movs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	605a      	str	r2, [r3, #4]
}
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <LL_APB2_GRP1_EnableClock+0x28>)
 8001e86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <LL_APB2_GRP1_EnableClock+0x28>)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <LL_APB2_GRP1_EnableClock+0x28>)
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	46c0      	nop			@ (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001eb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b090      	sub	sp, #64	@ 0x40
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001eda:	2428      	movs	r4, #40	@ 0x28
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	0018      	movs	r0, r3
 8001ee0:	2314      	movs	r3, #20
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f003 f853 	bl	8004f90 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001eea:	2518      	movs	r5, #24
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	0018      	movs	r0, r3
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f003 f84b 	bl	8004f90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	003b      	movs	r3, r7
 8001efc:	0018      	movs	r0, r3
 8001efe:	2318      	movs	r3, #24
 8001f00:	001a      	movs	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	f003 f844 	bl	8004f90 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ffb5 	bl	8001e7c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff ffc8 	bl	8001ea8 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = Vpot_Pin;
 8001f18:	003b      	movs	r3, r7
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001f1e:	003b      	movs	r3, r7
 8001f20:	2203      	movs	r2, #3
 8001f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f24:	003b      	movs	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Vpot_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	003a      	movs	r2, r7
 8001f2c:	23a0      	movs	r3, #160	@ 0xa0
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f002 f8ce 	bl	80040d4 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8001f38:	4a41      	ldr	r2, [pc, #260]	@ (8002040 <MX_ADC_Init+0x16c>)
 8001f3a:	4b42      	ldr	r3, [pc, #264]	@ (8002044 <MX_ADC_Init+0x170>)
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ff47 	bl	8001dd2 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8001f44:	4a40      	ldr	r2, [pc, #256]	@ (8002048 <MX_ADC_Init+0x174>)
 8001f46:	4b3f      	ldr	r3, [pc, #252]	@ (8002044 <MX_ADC_Init+0x170>)
 8001f48:	0011      	movs	r1, r2
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff ff41 	bl	8001dd2 <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	03db      	lsls	r3, r3, #15
 8001f54:	4a3d      	ldr	r2, [pc, #244]	@ (800204c <MX_ADC_Init+0x178>)
 8001f56:	0019      	movs	r1, r3
 8001f58:	0010      	movs	r0, r2
 8001f5a:	f7ff fef1 	bl	8001d40 <LL_ADC_SetCommonPathInternalCh>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001f5e:	0021      	movs	r1, r4
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	4a30      	ldr	r2, [pc, #192]	@ (8002044 <MX_ADC_Init+0x170>)
 8001f82:	0019      	movs	r1, r3
 8001f84:	0010      	movs	r0, r2
 8001f86:	f001 feab 	bl	8003ce0 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_39CYCLES_5);
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <MX_ADC_Init+0x170>)
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff fefb 	bl	8001d8a <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	@ (8002044 <MX_ADC_Init+0x170>)
 8001f96:	2100      	movs	r1, #0
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff ff2b 	bl	8001df4 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001f9e:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <MX_ADC_Init+0x170>)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff ff03 	bl	8001dae <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	049b      	lsls	r3, r3, #18
 8001fac:	4a27      	ldr	r2, [pc, #156]	@ (800204c <MX_ADC_Init+0x178>)
 8001fae:	0019      	movs	r1, r3
 8001fb0:	0010      	movs	r0, r2
 8001fb2:	f7ff feb1 	bl	8001d18 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8001fb6:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <MX_ADC_Init+0x170>)
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff ff41 	bl	8001e40 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001fbe:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <MX_ADC_Init+0x170>)
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff ff4c 	bl	8001e5e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001fc6:	197b      	adds	r3, r7, r5
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001fcc:	197b      	adds	r3, r7, r5
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001fd2:	197b      	adds	r3, r7, r5
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001fd8:	197b      	adds	r3, r7, r5
 8001fda:	4a1a      	ldr	r2, [pc, #104]	@ (8002044 <MX_ADC_Init+0x170>)
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0010      	movs	r0, r2
 8001fe0:	f001 fe48 	bl	8003c74 <LL_ADC_Init>
  LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_ASYNC);
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <MX_ADC_Init+0x170>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff febd 	bl	8001d68 <LL_ADC_SetClock>
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_ASYNC_DIV16);
 8001fee:	23e0      	movs	r3, #224	@ 0xe0
 8001ff0:	035b      	lsls	r3, r3, #13
 8001ff2:	4a16      	ldr	r2, [pc, #88]	@ (800204c <MX_ADC_Init+0x178>)
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	f7ff fe7a 	bl	8001cf0 <LL_ADC_SetCommonClock>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <MX_ADC_Init+0x170>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff ff0a 	bl	8001e18 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <MX_ADC_Init+0x17c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4912      	ldr	r1, [pc, #72]	@ (8002054 <MX_ADC_Init+0x180>)
 800200a:	0018      	movs	r0, r3
 800200c:	f7fe f87c 	bl	8000108 <__udivsi3>
 8002010:	0003      	movs	r3, r0
 8002012:	001a      	movs	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	189b      	adds	r3, r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	210a      	movs	r1, #10
 800201e:	0018      	movs	r0, r3
 8002020:	f7fe f872 	bl	8000108 <__udivsi3>
 8002024:	0003      	movs	r3, r0
 8002026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 8002028:	e002      	b.n	8002030 <MX_ADC_Init+0x15c>
  {
    wait_loop_index--;
 800202a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800202c:	3b01      	subs	r3, #1
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 8002030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <MX_ADC_Init+0x156>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b010      	add	sp, #64	@ 0x40
 800203e:	bdb0      	pop	{r4, r5, r7, pc}
 8002040:	04000002 	.word	0x04000002
 8002044:	40012400 	.word	0x40012400
 8002048:	c4020000 	.word	0xc4020000
 800204c:	40012708 	.word	0x40012708
 8002050:	20000008 	.word	0x20000008
 8002054:	00030d40 	.word	0x00030d40

08002058 <LL_IOP_GRP1_EnableClock>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <LL_IOP_GRP1_EnableClock+0x28>)
 8002062:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <LL_IOP_GRP1_EnableClock+0x28>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <LL_IOP_GRP1_EnableClock+0x28>)
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000

08002084 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800208e:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <LL_SYSCFG_SetEXTISource+0x48>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	21ff      	movs	r1, #255	@ 0xff
 8002094:	400b      	ands	r3, r1
 8002096:	3302      	adds	r3, #2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	589b      	ldr	r3, [r3, r2]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	0c12      	lsrs	r2, r2, #16
 80020a0:	210f      	movs	r1, #15
 80020a2:	4091      	lsls	r1, r2
 80020a4:	000a      	movs	r2, r1
 80020a6:	43d2      	mvns	r2, r2
 80020a8:	401a      	ands	r2, r3
 80020aa:	0011      	movs	r1, r2
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	409a      	lsls	r2, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <LL_SYSCFG_SetEXTISource+0x48>)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	24ff      	movs	r4, #255	@ 0xff
 80020ba:	4023      	ands	r3, r4
 80020bc:	430a      	orrs	r2, r1
 80020be:	3302      	adds	r3, #2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	501a      	str	r2, [r3, r0]
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b003      	add	sp, #12
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	40010000 	.word	0x40010000

080020d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	435b      	muls	r3, r3
 80020e4:	001a      	movs	r2, r3
 80020e6:	0013      	movs	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	189b      	adds	r3, r3, r2
 80020ec:	43db      	mvns	r3, r3
 80020ee:	400b      	ands	r3, r1
 80020f0:	001a      	movs	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	435b      	muls	r3, r3
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	434b      	muls	r3, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	46c0      	nop			@ (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}

08002108 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68d9      	ldr	r1, [r3, #12]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	435b      	muls	r3, r3
 800211c:	001a      	movs	r2, r3
 800211e:	0013      	movs	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	189b      	adds	r3, r3, r2
 8002124:	43db      	mvns	r3, r3
 8002126:	400b      	ands	r3, r1
 8002128:	001a      	movs	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	435b      	muls	r3, r3
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	434b      	muls	r3, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}

08002140 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800215e:	2418      	movs	r4, #24
 8002160:	193b      	adds	r3, r7, r4
 8002162:	0018      	movs	r0, r3
 8002164:	2308      	movs	r3, #8
 8002166:	001a      	movs	r2, r3
 8002168:	2100      	movs	r1, #0
 800216a:	f002 ff11 	bl	8004f90 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	003b      	movs	r3, r7
 8002170:	0018      	movs	r0, r3
 8002172:	2318      	movs	r3, #24
 8002174:	001a      	movs	r2, r3
 8002176:	2100      	movs	r1, #0
 8002178:	f002 ff0a 	bl	8004f90 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 800217c:	2004      	movs	r0, #4
 800217e:	f7ff ff6b 	bl	8002058 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 8002182:	2080      	movs	r0, #128	@ 0x80
 8002184:	f7ff ff68 	bl	8002058 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff ff65 	bl	8002058 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800218e:	2002      	movs	r0, #2
 8002190:	f7ff ff62 	bl	8002058 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002194:	23a0      	movs	r3, #160	@ 0xa0
 8002196:	05db      	lsls	r3, r3, #23
 8002198:	2120      	movs	r1, #32
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff ffd0 	bl	8002140 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80021a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <MX_GPIO_Init+0xc8>)
 80021a2:	0019      	movs	r1, r3
 80021a4:	2002      	movs	r0, #2
 80021a6:	f7ff ff6d 	bl	8002084 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	481d      	ldr	r0, [pc, #116]	@ (8002224 <MX_GPIO_Init+0xcc>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	0019      	movs	r1, r3
 80021b4:	f7ff ffa8 	bl	8002108 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	019b      	lsls	r3, r3, #6
 80021bc:	4819      	ldr	r0, [pc, #100]	@ (8002224 <MX_GPIO_Init+0xcc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	0019      	movs	r1, r3
 80021c2:	f7ff ff85 	bl	80020d0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80021c6:	0021      	movs	r1, r4
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	2280      	movs	r2, #128	@ 0x80
 80021cc:	0192      	lsls	r2, r2, #6
 80021ce:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2201      	movs	r2, #1
 80021d4:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2200      	movs	r2, #0
 80021da:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	2202      	movs	r2, #2
 80021e0:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	0018      	movs	r0, r3
 80021e6:	f001 fe35 	bl	8003e54 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80021ea:	003b      	movs	r3, r7
 80021ec:	2220      	movs	r2, #32
 80021ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021f0:	003b      	movs	r3, r7
 80021f2:	2201      	movs	r2, #1
 80021f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021f6:	003b      	movs	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021fc:	003b      	movs	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002202:	003b      	movs	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002208:	003a      	movs	r2, r7
 800220a:	23a0      	movs	r3, #160	@ 0xa0
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f001 ff5f 	bl	80040d4 <LL_GPIO_Init>

}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b009      	add	sp, #36	@ 0x24
 800221c:	bd90      	pop	{r4, r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	00040003 	.word	0x00040003
 8002224:	50000800 	.word	0x50000800

08002228 <LL_ADC_Enable>:
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <LL_ADC_Enable+0x20>)
 8002236:	4013      	ands	r3, r2
 8002238:	2201      	movs	r2, #1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	7fffffe8 	.word	0x7fffffe8

0800224c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <LL_RCC_HSE_EnableBypass+0x18>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <LL_RCC_HSE_EnableBypass+0x18>)
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	02c9      	lsls	r1, r1, #11
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000

08002268 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <LL_RCC_HSE_Enable+0x18>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <LL_RCC_HSE_Enable+0x18>)
 8002272:	2180      	movs	r1, #128	@ 0x80
 8002274:	0249      	lsls	r1, r1, #9
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8002288:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <LL_RCC_HSE_IsReady+0x24>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	401a      	ands	r2, r3
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	429a      	cmp	r2, r3
 8002298:	d101      	bne.n	800229e <LL_RCC_HSE_IsReady+0x1a>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_RCC_HSE_IsReady+0x1c>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	40021000 	.word	0x40021000

080022ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <LL_RCC_HSI_Enable+0x18>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <LL_RCC_HSI_Enable+0x18>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	46c0      	nop			@ (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	40021000 	.word	0x40021000

080022c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <LL_RCC_HSI_IsReady+0x1c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2204      	movs	r2, #4
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d101      	bne.n	80022dc <LL_RCC_HSI_IsReady+0x14>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_RCC_HSI_IsReady+0x16>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a06      	ldr	r2, [pc, #24]	@ (8002310 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	021a      	lsls	r2, r3, #8
 80022fe:	4b03      	ldr	r3, [pc, #12]	@ (800230c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	ffffe0ff 	.word	0xffffe0ff

08002314 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <LL_RCC_SetSysClkSource+0x24>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2203      	movs	r2, #3
 8002322:	4393      	bics	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <LL_RCC_SetSysClkSource+0x24>)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	430a      	orrs	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	40021000 	.word	0x40021000

0800233c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <LL_RCC_GetSysClkSource+0x14>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	220c      	movs	r2, #12
 8002346:	4013      	ands	r3, r2
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	40021000 	.word	0x40021000

08002354 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <LL_RCC_SetAHBPrescaler+0x24>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	22f0      	movs	r2, #240	@ 0xf0
 8002362:	4393      	bics	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <LL_RCC_SetAHBPrescaler+0x24>)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	430a      	orrs	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <LL_RCC_SetAPB1Prescaler+0x28>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	430a      	orrs	r2, r1
 8002394:	60da      	str	r2, [r3, #12]
}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	fffff8ff 	.word	0xfffff8ff

080023a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a06      	ldr	r2, [pc, #24]	@ (80023d0 <LL_RCC_SetAPB2Prescaler+0x28>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	430a      	orrs	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	40021000 	.word	0x40021000
 80023d0:	ffffc7ff 	.word	0xffffc7ff

080023d4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <LL_RCC_SetUSARTClockSource+0x2c>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	0c12      	lsrs	r2, r2, #16
 80023e4:	43d2      	mvns	r2, r2
 80023e6:	401a      	ands	r2, r3
 80023e8:	0011      	movs	r1, r2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	0c1a      	lsrs	r2, r3, #16
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <LL_RCC_SetUSARTClockSource+0x2c>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	40021000 	.word	0x40021000

08002404 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <LL_RCC_PLL_Enable+0x18>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <LL_RCC_PLL_Enable+0x18>)
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	0449      	lsls	r1, r1, #17
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000

08002420 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8002424:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <LL_RCC_PLL_IsReady+0x24>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	049b      	lsls	r3, r3, #18
 800242c:	401a      	ands	r2, r3
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	049b      	lsls	r3, r3, #18
 8002432:	429a      	cmp	r2, r3
 8002434:	d101      	bne.n	800243a <LL_RCC_PLL_IsReady+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_RCC_PLL_IsReady+0x1c>
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	40021000 	.word	0x40021000

08002448 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a08      	ldr	r2, [pc, #32]	@ (800247c <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	431a      	orrs	r2, r3
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 800246a:	430a      	orrs	r2, r1
 800246c:	60da      	str	r2, [r3, #12]
}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	40021000 	.word	0x40021000
 800247c:	ff02ffff 	.word	0xff02ffff

08002480 <LL_APB1_GRP1_EnableClock>:
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <LL_APB1_GRP1_EnableClock+0x28>)
 800248a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <LL_APB1_GRP1_EnableClock+0x28>)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	430a      	orrs	r2, r1
 8002492:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002494:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <LL_APB1_GRP1_EnableClock+0x28>)
 8002496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	46c0      	nop			@ (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b004      	add	sp, #16
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <LL_APB2_GRP1_EnableClock>:
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80024b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	430a      	orrs	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80024c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	46c0      	nop			@ (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b004      	add	sp, #16
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <LL_FLASH_SetLatency+0x24>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4393      	bics	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <LL_FLASH_SetLatency+0x24>)
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	40022000 	.word	0x40022000

08002500 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <LL_FLASH_GetLatency+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	40022000 	.word	0x40022000

08002518 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <LL_SYSTICK_EnableIT+0x18>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b03      	ldr	r3, [pc, #12]	@ (8002530 <LL_SYSTICK_EnableIT+0x18>)
 8002522:	2102      	movs	r1, #2
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	46c0      	nop			@ (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	e000e010 	.word	0xe000e010

08002534 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a06      	ldr	r2, [pc, #24]	@ (800255c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40007000 	.word	0x40007000
 800255c:	ffffe7ff 	.word	0xffffe7ff

08002560 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	621a      	str	r2, [r3, #32]
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}

0800259a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}

080025ca <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d2:	f3ef 8310 	mrs	r3, PRIMASK
 80025d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80025d8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	2301      	movs	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2220      	movs	r2, #32
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f383 8810 	msr	PRIMASK, r3
}
 80025fe:	46c0      	nop			@ (mov r8, r8)
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b006      	add	sp, #24
 8002606:	bd80      	pop	{r7, pc}

08002608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  long nextTimeMs = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff ff4a 	bl	80024ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	055b      	lsls	r3, r3, #21
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff2f 	bl	8002480 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002622:	f000 f847 	bl	80026b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002626:	f7ff fd97 	bl	8002158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800262a:	f001 fa6b 	bl	8003b04 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800262e:	f7ff fc51 	bl	8001ed4 <MX_ADC_Init>
  MX_TIM22_Init();
 8002632:	f001 f8e3 	bl	80037fc <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  rxFifoInit();
 8002636:	f000 ff3b 	bl	80034b0 <rxFifoInit>
  RetargetInit(USART2);
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <main+0x9c>)
 800263c:	0018      	movs	r0, r3
 800263e:	f000 fdf3 	bl	8003228 <RetargetInit>
  getchInit();
 8002642:	f000 ff9d 	bl	8003580 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 8002646:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <main+0x9c>)
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff ffbe 	bl	80025ca <LL_USART_EnableIT_RXNE>
  LL_ADC_Enable(ADC1);
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <main+0xa0>)
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff fde9 	bl	8002228 <LL_ADC_Enable>
//Configuration : 32kHz
// Compteur ==> 0 à 1000
  LL_TIM_OC_SetCompareCH1(TIM22, 0);
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <main+0xa4>)
 8002658:	2100      	movs	r1, #0
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff ff9d 	bl	800259a <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM22, 0);
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <main+0xa4>)
 8002662:	2100      	movs	r1, #0
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ffa4 	bl	80025b2 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_CC_EnableChannel(TIM22, LL_TIM_CHANNEL_CH1); /* Enable output on channel 1*/
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <main+0xa4>)
 800266c:	2101      	movs	r1, #1
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff ff84 	bl	800257c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM22, LL_TIM_CHANNEL_CH2); /* Enable output on channel 2*/
 8002674:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <main+0xa4>)
 8002676:	2110      	movs	r1, #16
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff ff7f 	bl	800257c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM22);
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <main+0xa4>)
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff ff6d 	bl	8002560 <LL_TIM_EnableCounter>

  LL_SYSTICK_EnableIT();
 8002686:	f7ff ff47 	bl	8002518 <LL_SYSTICK_EnableIT>
  while (1)
  {
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!! NOT TO BE DELETED   !!!!!!!!!!!!!!!!!
//!!*///Protocol management	//!!!!!!!!!!!!!!!!
    protocolMain();
 800268a:	f000 fac5 	bl	8002c18 <protocolMain>
// !!!!!!!!!! NOT TO BE DELETED (END) !!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    // Application main
    //Every 10 ms
    if (nextTimeMs <= timeMs)
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <main+0xa8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dcf8      	bgt.n	800268a <main+0x82>
    {
      nextTimeMs += 10;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	330a      	adds	r3, #10
 800269c:	607b      	str	r3, [r7, #4]
      mainApp10ms();
 800269e:	f000 f957 	bl	8002950 <mainApp10ms>
    protocolMain();
 80026a2:	e7f2      	b.n	800268a <main+0x82>
 80026a4:	40004400 	.word	0x40004400
 80026a8:	40012400 	.word	0x40012400
 80026ac:	40011400 	.word	0x40011400
 80026b0:	20000284 	.word	0x20000284

080026b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7ff ff0d 	bl	80024d8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	f7ff ff1e 	bl	8002500 <LL_FLASH_GetLatency>
 80026c4:	0003      	movs	r3, r0
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d1fa      	bne.n	80026c0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff ff30 	bl	8002534 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 80026d4:	f7ff fdba 	bl	800224c <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80026d8:	f7ff fdc6 	bl	8002268 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	f7ff fdd1 	bl	8002284 <LL_RCC_HSE_IsReady>
 80026e2:	0003      	movs	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d1fa      	bne.n	80026de <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_HSI_Enable();
 80026e8:	f7ff fde0 	bl	80022ac <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	f7ff fdeb 	bl	80022c8 <LL_RCC_HSI_IsReady>
 80026f2:	0003      	movs	r3, r0
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d1fa      	bne.n	80026ee <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80026f8:	2010      	movs	r0, #16
 80026fa:	f7ff fdf5 	bl	80022e8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLL_MUL_8, LL_RCC_PLL_DIV_2);
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	03da      	lsls	r2, r3, #15
 8002702:	23c0      	movs	r3, #192	@ 0xc0
 8002704:	0319      	lsls	r1, r3, #12
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	025b      	lsls	r3, r3, #9
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff fe9c 	bl	8002448 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002710:	f7ff fe78 	bl	8002404 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002714:	46c0      	nop			@ (mov r8, r8)
 8002716:	f7ff fe83 	bl	8002420 <LL_RCC_PLL_IsReady>
 800271a:	0003      	movs	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d1fa      	bne.n	8002716 <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002720:	2000      	movs	r0, #0
 8002722:	f7ff fe17 	bl	8002354 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fe28 	bl	800237c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800272c:	2000      	movs	r0, #0
 800272e:	f7ff fe3b 	bl	80023a8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002732:	2003      	movs	r0, #3
 8002734:	f7ff fdee 	bl	8002314 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002738:	46c0      	nop			@ (mov r8, r8)
 800273a:	f7ff fdff 	bl	800233c <LL_RCC_GetSysClkSource>
 800273e:	0003      	movs	r3, r0
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d1fa      	bne.n	800273a <SystemClock_Config+0x86>
  {

  }

  LL_Init1msTick(32000000);
 8002744:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <SystemClock_Config+0xb0>)
 8002746:	0018      	movs	r0, r3
 8002748:	f002 fa3e 	bl	8004bc8 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <SystemClock_Config+0xb0>)
 800274e:	0018      	movs	r0, r3
 8002750:	f002 fa4a 	bl	8004be8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8002754:	23c0      	movs	r3, #192	@ 0xc0
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff fe3b 	bl	80023d4 <LL_RCC_SetUSARTClockSource>
}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	01e84800 	.word	0x01e84800

08002768 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4013      	ands	r3, r2
 800277e:	041a      	lsls	r2, r3, #16
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	400b      	ands	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <controlLoop>:

//============================================================
//            PID controller
//============================================================
int controlLoop(int p_refValueIn,int p_motorOut)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	// Soustracteur
	float l_epsilon = (p_refValueIn - p_motorOut * Ab);
 80027a2:	4b30      	ldr	r3, [pc, #192]	@ (8002864 <controlLoop+0xcc>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	001a      	movs	r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	4353      	muls	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fd feae 	bl	8000514 <__aeabi_i2f>
 80027b8:	1c03      	adds	r3, r0, #0
 80027ba:	61fb      	str	r3, [r7, #28]

	// Gain proportionnel
	float l_ADe = l_epsilon;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	61bb      	str	r3, [r7, #24]
	float l_ADs = l_ADe * Ad;
 80027c0:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <controlLoop+0xd0>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7fd fea4 	bl	8000514 <__aeabi_i2f>
 80027cc:	1c03      	adds	r3, r0, #0
 80027ce:	1c19      	adds	r1, r3, #0
 80027d0:	69b8      	ldr	r0, [r7, #24]
 80027d2:	f7fd fd25 	bl	8000220 <__aeabi_fmul>
 80027d6:	1c03      	adds	r3, r0, #0
 80027d8:	617b      	str	r3, [r7, #20]

	// Correcteur ventrale
	float l_Ce = l_ADs;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	613b      	str	r3, [r7, #16]
	float l_Cs = 3.07 * l_Ce - 2.853 * l_CeMoins1 + 0.7826 * l_CsMoins1;
 80027de:	6938      	ldr	r0, [r7, #16]
 80027e0:	f7ff f99e 	bl	8001b20 <__aeabi_f2d>
 80027e4:	4a21      	ldr	r2, [pc, #132]	@ (800286c <controlLoop+0xd4>)
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <controlLoop+0xd8>)
 80027e8:	f7fe faaa 	bl	8000d40 <__aeabi_dmul>
 80027ec:	0002      	movs	r2, r0
 80027ee:	000b      	movs	r3, r1
 80027f0:	0014      	movs	r4, r2
 80027f2:	001d      	movs	r5, r3
 80027f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <controlLoop+0xdc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c18      	adds	r0, r3, #0
 80027fa:	f7ff f991 	bl	8001b20 <__aeabi_f2d>
 80027fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002878 <controlLoop+0xe0>)
 8002800:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <controlLoop+0xe4>)
 8002802:	f7fe fa9d 	bl	8000d40 <__aeabi_dmul>
 8002806:	0002      	movs	r2, r0
 8002808:	000b      	movs	r3, r1
 800280a:	0020      	movs	r0, r4
 800280c:	0029      	movs	r1, r5
 800280e:	f7fe fd7d 	bl	800130c <__aeabi_dsub>
 8002812:	0002      	movs	r2, r0
 8002814:	000b      	movs	r3, r1
 8002816:	0014      	movs	r4, r2
 8002818:	001d      	movs	r5, r3
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <controlLoop+0xe8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	1c18      	adds	r0, r3, #0
 8002820:	f7ff f97e 	bl	8001b20 <__aeabi_f2d>
 8002824:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <controlLoop+0xec>)
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <controlLoop+0xf0>)
 8002828:	f7fe fa8a 	bl	8000d40 <__aeabi_dmul>
 800282c:	0002      	movs	r2, r0
 800282e:	000b      	movs	r3, r1
 8002830:	0020      	movs	r0, r4
 8002832:	0029      	movs	r1, r5
 8002834:	f7fd febe 	bl	80005b4 <__aeabi_dadd>
 8002838:	0002      	movs	r2, r0
 800283a:	000b      	movs	r3, r1
 800283c:	0010      	movs	r0, r2
 800283e:	0019      	movs	r1, r3
 8002840:	f7ff f9b6 	bl	8001bb0 <__aeabi_d2f>
 8002844:	1c03      	adds	r3, r0, #0
 8002846:	60fb      	str	r3, [r7, #12]
	l_CeMoins1 = l_Ce;
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <controlLoop+0xdc>)
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	601a      	str	r2, [r3, #0]
	l_CsMoins1 = l_Cs;
 800284e:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <controlLoop+0xe8>)
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

	return l_Cs; // Retourne la commande moteur calculée
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7fd fe3d 	bl	80004d4 <__aeabi_f2iz>
 800285a:	0003      	movs	r3, r0
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b008      	add	sp, #32
 8002862:	bdb0      	pop	{r4, r5, r7, pc}
 8002864:	20000001 	.word	0x20000001
 8002868:	20000000 	.word	0x20000000
 800286c:	28f5c28f 	.word	0x28f5c28f
 8002870:	40088f5c 	.word	0x40088f5c
 8002874:	20000220 	.word	0x20000220
 8002878:	a9fbe76d 	.word	0xa9fbe76d
 800287c:	4006d2f1 	.word	0x4006d2f1
 8002880:	20000224 	.word	0x20000224
 8002884:	27bb2fec 	.word	0x27bb2fec
 8002888:	3fe90b0f 	.word	0x3fe90b0f

0800288c <onNewFrameCommand>:



//On new data frame
void onNewFrameCommand(uint8_t p_frameCode)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	0002      	movs	r2, r0
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	701a      	strb	r2, [r3, #0]
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <onNewFrameByte>:
void onNewFrameByte(uint8_t p_frameCode, int8_t *p_byte, int p_dataCount)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	230f      	movs	r3, #15
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	1c02      	adds	r2, r0, #0
 80028b0:	701a      	strb	r2, [r3, #0]
}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <onNewFrameShort>:
void onNewFrameShort(uint8_t p_frameCode, int16_t *p_short, int p_dataCount)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	210f      	movs	r1, #15
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	1c02      	adds	r2, r0, #0
 80028cc:	701a      	strb	r2, [r3, #0]
  switch (p_frameCode)
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b41      	cmp	r3, #65	@ 0x41
 80028d4:	d002      	beq.n	80028dc <onNewFrameShort+0x20>
 80028d6:	2b50      	cmp	r3, #80	@ 0x50
 80028d8:	d00c      	beq.n	80028f4 <onNewFrameShort+0x38>
      break;
    case 'P':
      Ad = p_short[0];
      break;
  }
}
 80028da:	e012      	b.n	8002902 <onNewFrameShort+0x46>
      g_startStep = 1;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <onNewFrameShort+0x50>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
      g_motorStep = p_short[0];
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	5e9a      	ldrsh	r2, [r3, r2]
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <onNewFrameShort+0x54>)
 80028ea:	801a      	strh	r2, [r3, #0]
      g_data1Cnt = 0;
 80028ec:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <onNewFrameShort+0x58>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	801a      	strh	r2, [r3, #0]
      break;
 80028f2:	e006      	b.n	8002902 <onNewFrameShort+0x46>
      Ad = p_short[0];
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	5e9b      	ldrsh	r3, [r3, r2]
 80028fa:	b25a      	sxtb	r2, r3
 80028fc:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <onNewFrameShort+0x5c>)
 80028fe:	701a      	strb	r2, [r3, #0]
      break;
 8002900:	46c0      	nop			@ (mov r8, r8)
}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	20000084 	.word	0x20000084
 8002910:	20000086 	.word	0x20000086
 8002914:	20000088 	.word	0x20000088
 8002918:	20000000 	.word	0x20000000

0800291c <onNewFrameInt>:
void onNewFrameInt(uint8_t p_frameCode, int32_t *p_int, int p_dataCount)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	1c02      	adds	r2, r0, #0
 800292c:	701a      	strb	r2, [r3, #0]
}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}

08002936 <onNewFrameFloat>:
void onNewFrameFloat(uint8_t p_frameCodet, float *p_float, int p_dataCount)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	230f      	movs	r3, #15
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	1c02      	adds	r2, r0, #0
 8002946:	701a      	strb	r2, [r3, #0]
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b004      	add	sp, #16
 800294e:	bd80      	pop	{r7, pc}

08002950 <mainApp10ms>:

//called once every 10 ms
void mainApp10ms(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  static int l_refValue = 2048; // Valeur de consigne initiale
  static int l_stepDelay=0;
  int l_motor = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  int l_adcValue;

  // Gestion de l'alternance de la consigne moteur
  //Auto step
  l_stepDelay++;
 800295a:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <mainApp10ms+0x10c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	4b3e      	ldr	r3, [pc, #248]	@ (8002a5c <mainApp10ms+0x10c>)
 8002962:	601a      	str	r2, [r3, #0]
  if (l_stepDelay==400) //every 4s
 8002964:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <mainApp10ms+0x10c>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	23c8      	movs	r3, #200	@ 0xc8
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	429a      	cmp	r2, r3
 800296e:	d117      	bne.n	80029a0 <mainApp10ms+0x50>
  {
    l_stepDelay=0;
 8002970:	4b3a      	ldr	r3, [pc, #232]	@ (8002a5c <mainApp10ms+0x10c>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    if (g_motorStep==1048)
 8002976:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <mainApp10ms+0x110>)
 8002978:	2200      	movs	r2, #0
 800297a:	5e9a      	ldrsh	r2, [r3, r2]
 800297c:	2383      	movs	r3, #131	@ 0x83
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <mainApp10ms+0x42>
    {
      g_startStep = 1;
 8002984:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <mainApp10ms+0x114>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
      g_motorStep=3048;
 800298a:	4b35      	ldr	r3, [pc, #212]	@ (8002a60 <mainApp10ms+0x110>)
 800298c:	4a36      	ldr	r2, [pc, #216]	@ (8002a68 <mainApp10ms+0x118>)
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	e006      	b.n	80029a0 <mainApp10ms+0x50>
    }
    else
    {
      g_startStep = 1;
 8002992:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <mainApp10ms+0x114>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
      g_motorStep=1048;
 8002998:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <mainApp10ms+0x110>)
 800299a:	2283      	movs	r2, #131	@ 0x83
 800299c:	00d2      	lsls	r2, r2, #3
 800299e:	801a      	strh	r2, [r3, #0]
    }
  }


  //Toggle LED state (PA5)
  LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80029a0:	23a0      	movs	r3, #160	@ 0xa0
 80029a2:	05db      	lsls	r3, r3, #23
 80029a4:	2120      	movs	r1, #32
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff fede 	bl	8002768 <LL_GPIO_TogglePin>

  //Read potentiometer value (0-4095)
  //(1 LSB=3.3V/4096)
  l_adcValue = readADC();
 80029ac:	f000 f8b8 	bl	8002b20 <readADC>
 80029b0:	0003      	movs	r3, r0
 80029b2:	603b      	str	r3, [r7, #0]

  // Gestion de la séquence de step moteur
  //l_motor step
  if (g_startStep == 1)
 80029b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <mainApp10ms+0x114>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d111      	bne.n	80029e2 <mainApp10ms+0x92>
  {
    l_refValue = g_motorStep; // Mise à jour de la consigne
 80029be:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <mainApp10ms+0x110>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	5e9b      	ldrsh	r3, [r3, r2]
 80029c4:	001a      	movs	r2, r3
 80029c6:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <mainApp10ms+0x11c>)
 80029c8:	601a      	str	r2, [r3, #0]
    g_data1Cnt = 0;
 80029ca:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <mainApp10ms+0x120>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	801a      	strh	r2, [r3, #0]
    g_startStep++;
 80029d0:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <mainApp10ms+0x114>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	b25a      	sxtb	r2, r3
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <mainApp10ms+0x114>)
 80029e0:	701a      	strb	r2, [r3, #0]
  }
  if (g_startStep == 2)
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <mainApp10ms+0x114>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d125      	bne.n	8002a38 <mainApp10ms+0xe8>
  {
    g_data1[g_data1Cnt] = l_adcValue; // Enregistrement de la valeur ADC
 80029ec:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <mainApp10ms+0x120>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	5e9b      	ldrsh	r3, [r3, r2]
 80029f2:	001a      	movs	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b219      	sxth	r1, r3
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <mainApp10ms+0x124>)
 80029fa:	0052      	lsls	r2, r2, #1
 80029fc:	52d1      	strh	r1, [r2, r3]
    g_data1Cnt++;
 80029fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <mainApp10ms+0x120>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	5e9b      	ldrsh	r3, [r3, r2]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <mainApp10ms+0x120>)
 8002a0e:	801a      	strh	r2, [r3, #0]
    if (g_data1Cnt >= MAX_DATA1)
 8002a10:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <mainApp10ms+0x120>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	5e9b      	ldrsh	r3, [r3, r2]
 8002a16:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a18:	dd0e      	ble.n	8002a38 <mainApp10ms+0xe8>
    {
      g_startStep = 0;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <mainApp10ms+0x114>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
      writeFrameShort('A', g_data1, g_data1Cnt); // Envoi des données
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <mainApp10ms+0x120>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	5e9b      	ldrsh	r3, [r3, r2]
 8002a26:	001a      	movs	r2, r3
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <mainApp10ms+0x124>)
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	2041      	movs	r0, #65	@ 0x41
 8002a2e:	f000 f9da 	bl	8002de6 <writeFrameShort>
      g_startStep = 0;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <mainApp10ms+0x114>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]

  }

  // Calcul de la commande moteur
  //Calculate new l_motor voltage
  l_motor=controlLoop(l_refValue,l_adcValue);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <mainApp10ms+0x11c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	0011      	movs	r1, r2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff fea9 	bl	8002798 <controlLoop>
 8002a46:	0003      	movs	r3, r0
 8002a48:	607b      	str	r3, [r7, #4]
  // Application de la tension moteur
    //set motor voltage
  setMotor(l_motor);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f88c 	bl	8002b6c <setMotor>
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000228 	.word	0x20000228
 8002a60:	20000086 	.word	0x20000086
 8002a64:	20000084 	.word	0x20000084
 8002a68:	00000be8 	.word	0x00000be8
 8002a6c:	20000004 	.word	0x20000004
 8002a70:	20000088 	.word	0x20000088
 8002a74:	2000008c 	.word	0x2000008c

08002a78 <LL_ADC_REG_SetSequencerChannels>:
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	035b      	lsls	r3, r3, #13
 8002a86:	0b5a      	lsrs	r2, r3, #13
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <LL_ADC_REG_StartConversion>:
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <LL_ADC_REG_StartConversion+0x20>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	7fffffe8 	.word	0x7fffffe8

08002ab8 <LL_ADC_REG_ReadConversionData12>:
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	b29b      	uxth	r3, r3
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}

08002ace <LL_ADC_IsActiveFlag_EOC>:
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	425a      	negs	r2, r3
 8002ae2:	4153      	adcs	r3, r2
 8002ae4:	b2db      	uxtb	r3, r3
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}

08002aee <LL_TIM_OC_SetCompareCH1>:
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <LL_TIM_OC_SetCompareCH2>:
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <readADC>:
//#define DISPLAY_V_ADC //Print ADC voltage on serial port
//#define DISPLAY_V_MOTOR //Print motor voltage on serial port

//Return ADC converter value (0-4095) (1 LSB=3.3V/4096)
uint16_t readADC(void)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
  uint16_t l_value;
  LL_ADC_REG_SetSequencerChannels(ADC1,LL_ADC_CHANNEL_1);
 8002b26:	4a0f      	ldr	r2, [pc, #60]	@ (8002b64 <readADC+0x44>)
 8002b28:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <readADC+0x48>)
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ffa3 	bl	8002a78 <LL_ADC_REG_SetSequencerChannels>
  LL_ADC_REG_StartConversion(ADC1);
 8002b32:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <readADC+0x48>)
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ffad 	bl	8002a94 <LL_ADC_REG_StartConversion>
  while (LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <readADC+0x48>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7ff ffc5 	bl	8002ace <LL_ADC_IsActiveFlag_EOC>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d0f9      	beq.n	8002b3c <readADC+0x1c>
  l_value=LL_ADC_REG_ReadConversionData12(ADC1);
 8002b48:	1dbc      	adds	r4, r7, #6
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <readADC+0x48>)
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff ffb3 	bl	8002ab8 <LL_ADC_REG_ReadConversionData12>
 8002b52:	0003      	movs	r3, r0
 8002b54:	8023      	strh	r3, [r4, #0]
    IntPartADC=((long)adcValue*33)/40960;
    RemainPartADC=(((((long)adcValue*330))%409600)*10)/4096;
    printf("Vpot=%d.%3.3d\r\n",IntPartADC,RemainPartADC );
  }
#endif //DISPLAY_V_ADC
  return l_value;
 8002b56:	1dbb      	adds	r3, r7, #6
 8002b58:	881b      	ldrh	r3, [r3, #0]
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b003      	add	sp, #12
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	04000002 	.word	0x04000002
 8002b68:	40012400 	.word	0x40012400

08002b6c <setMotor>:


//Set motor voltage ratio (-MAX_MOTOR to +MAX_MOTOR)
void setMotor(int16_t p_value)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	0002      	movs	r2, r0
 8002b74:	1dbb      	adds	r3, r7, #6
 8002b76:	801a      	strh	r2, [r3, #0]
  if (p_value>=MAX_MOTOR)
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	5e9a      	ldrsh	r2, [r3, r2]
 8002b7e:	23fa      	movs	r3, #250	@ 0xfa
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	429a      	cmp	r2, r3
 8002b84:	db03      	blt.n	8002b8e <setMotor+0x22>
	p_value=MAX_MOTOR;
 8002b86:	1dbb      	adds	r3, r7, #6
 8002b88:	22fa      	movs	r2, #250	@ 0xfa
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	801a      	strh	r2, [r3, #0]
  if (p_value<=-MAX_MOTOR)
 8002b8e:	1dbb      	adds	r3, r7, #6
 8002b90:	2200      	movs	r2, #0
 8002b92:	5e9b      	ldrsh	r3, [r3, r2]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	@ (8002c0c <setMotor+0xa0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	da02      	bge.n	8002ba0 <setMotor+0x34>
	p_value=-(MAX_MOTOR);
 8002b9a:	1dbb      	adds	r3, r7, #6
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c10 <setMotor+0xa4>)
 8002b9e:	801a      	strh	r2, [r3, #0]
  if (p_value==0)
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <setMotor+0x54>
  {
    LL_TIM_OC_SetCompareCH1(TIM22,0);
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <setMotor+0xa8>)
 8002bac:	2100      	movs	r1, #0
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7ff ff9d 	bl	8002aee <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM22,0);
 8002bb4:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <setMotor+0xa8>)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff ffa4 	bl	8002b06 <LL_TIM_OC_SetCompareCH2>
    RemainPartADC=((((long)p_value*1200))%(MAX_MOTOR*100)*10)/MAX_MOTOR;
    if (RemainPartADC<0) RemainPartADC=-RemainPartADC;
    printf("Vmotor=%d.%3.3d\r",IntPartADC,RemainPartADC );
  }
#endif //DISPLAY_V_MOTOR
}
 8002bbe:	e021      	b.n	8002c04 <setMotor+0x98>
  else if (p_value>0) //>0
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	dd0d      	ble.n	8002be6 <setMotor+0x7a>
    LL_TIM_OC_SetCompareCH1(TIM22,p_value);
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	5e9b      	ldrsh	r3, [r3, r2]
 8002bd0:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <setMotor+0xa8>)
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	0010      	movs	r0, r2
 8002bd6:	f7ff ff8a 	bl	8002aee <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM22,0);
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <setMotor+0xa8>)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff ff91 	bl	8002b06 <LL_TIM_OC_SetCompareCH2>
}
 8002be4:	e00e      	b.n	8002c04 <setMotor+0x98>
    LL_TIM_OC_SetCompareCH1(TIM22,0);
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <setMotor+0xa8>)
 8002be8:	2100      	movs	r1, #0
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7ff ff7f 	bl	8002aee <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM22,-p_value);
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	5e9b      	ldrsh	r3, [r3, r2]
 8002bf6:	425b      	negs	r3, r3
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <setMotor+0xa8>)
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff ff81 	bl	8002b06 <LL_TIM_OC_SetCompareCH2>
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	fffffc19 	.word	0xfffffc19
 8002c10:	fffffc18 	.word	0xfffffc18
 8002c14:	40011400 	.word	0x40011400

08002c18 <protocolMain>:


//Protocol main function
void protocolMain(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  int l_car;
  l_car = rxFifoRead ();
 8002c1e:	f000 fc81 	bl	8003524 <rxFifoRead>
 8002c22:	0003      	movs	r3, r0
 8002c24:	607b      	str	r3, [r7, #4]
  if (l_car != -1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	d004      	beq.n	8002c36 <protocolMain+0x1e>
  {
    onReceiveCar (l_car);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 f95b 	bl	8002eec <onReceiveCar>
  }
}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <writeByte>:
  float f32[MAX_DATA_f32];
}dataParameter;

//Write a byte in "pseudo hexa" ascii format
void writeByte(int8_t p_byte )
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	0002      	movs	r2, r0
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	701a      	strb	r2, [r3, #0]
  serialWrite(0x30 | ((p_byte>>4)&0x0F));
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	2230      	movs	r2, #48	@ 0x30
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fc95 	bl	800358c <serialWrite>
  serialWrite(0x30 | (p_byte&0x0F));
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	220f      	movs	r2, #15
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	2230      	movs	r2, #48	@ 0x30
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	b25b      	sxtb	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fc89 	bl	800358c <serialWrite>
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <writeShort>:
//Write a short in "pseudo hexa" ascii format - little-endian
void writeShort(int16_t p_short)
{
 8002c82:	b590      	push	{r4, r7, lr}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	0002      	movs	r2, r0
 8002c8a:	1dbb      	adds	r3, r7, #6
 8002c8c:	801a      	strh	r2, [r3, #0]
  convNumByte l_conv;
  l_conv.i16=p_short;
 8002c8e:	240c      	movs	r4, #12
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	1dba      	adds	r2, r7, #6
 8002c94:	8812      	ldrh	r2, [r2, #0]
 8002c96:	801a      	strh	r2, [r3, #0]
  writeByte(l_conv.bytes[0]); //Little-indian
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff ffcd 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[1]);
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff ffc7 	bl	8002c3e <writeByte>
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b005      	add	sp, #20
 8002cb6:	bd90      	pop	{r4, r7, pc}

08002cb8 <writeInt>:
//Write an int in "pseudo hexa" ascii format - little-endian
void writeInt(int32_t p_int)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  convNumByte l_conv;
  l_conv.i32=p_int;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]
  writeByte(l_conv.bytes[0]);
 8002cc4:	240c      	movs	r4, #12
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff ffb6 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[1]);
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff ffb0 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[2]);
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	789b      	ldrb	r3, [r3, #2]
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff ffaa 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[3]);
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	78db      	ldrb	r3, [r3, #3]
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ffa4 	bl	8002c3e <writeByte>
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b005      	add	sp, #20
 8002cfc:	bd90      	pop	{r4, r7, pc}

08002cfe <writeFloat>:
//Write a float in "pseudo hexa" ascii format - little-endian
void writeFloat(float p_float)
{
 8002cfe:	b590      	push	{r4, r7, lr}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  convNumByte l_conv;
  l_conv.f32=p_float;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
  writeByte(l_conv.bytes[0]);
 8002d0a:	240c      	movs	r4, #12
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff ff93 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[1]);
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff ff8d 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[2]);
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff ff87 	bl	8002c3e <writeByte>
  writeByte(l_conv.bytes[3]);
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	78db      	ldrb	r3, [r3, #3]
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff ff81 	bl	8002c3e <writeByte>
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b005      	add	sp, #20
 8002d42:	bd90      	pop	{r4, r7, pc}

08002d44 <writeFrameStart>:
//Write start frame byte
void writeFrameStart(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  serialWrite(FRAME_START);
 8002d48:	2055      	movs	r0, #85	@ 0x55
 8002d4a:	f000 fc1f 	bl	800358c <serialWrite>
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <writeFrameStop>:
//Write end frame byte
void writeFrameStop(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  serialWrite(FRAME_STOP);
 8002d58:	20aa      	movs	r0, #170	@ 0xaa
 8002d5a:	f000 fc17 	bl	800358c <serialWrite>
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <writeFrame>:

//Write a frame without any data
void writeFrame(uint8_t p_code)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	701a      	strb	r2, [r3, #0]
  writeFrameStart();
 8002d70:	f7ff ffe8 	bl	8002d44 <writeFrameStart>
  serialWrite(p_code);
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fc07 	bl	800358c <serialWrite>
  serialWrite('e');
 8002d7e:	2065      	movs	r0, #101	@ 0x65
 8002d80:	f000 fc04 	bl	800358c <serialWrite>
  writeFrameStop();
 8002d84:	f7ff ffe6 	bl	8002d54 <writeFrameStop>
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <writeFrameByte>:
//Write a frame with p_size bytes
void writeFrameByte(uint8_t p_code, int8_t * p_bytes, int p_size)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	240f      	movs	r4, #15
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	1c02      	adds	r2, r0, #0
 8002da0:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8002da2:	f7ff ffcf 	bl	8002d44 <writeFrameStart>
  serialWrite(p_code);
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 fbee 	bl	800358c <serialWrite>
  serialWrite('b');
 8002db0:	2062      	movs	r0, #98	@ 0x62
 8002db2:	f000 fbeb 	bl	800358c <serialWrite>
  for(i=0;i<p_size;i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e00a      	b.n	8002dd2 <writeFrameByte+0x42>
  {
    writeByte(p_bytes[i]);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	18d3      	adds	r3, r2, r3
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7ff ff39 	bl	8002c3e <writeByte>
  for(i=0;i<p_size;i++)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	dbf0      	blt.n	8002dbc <writeFrameByte+0x2c>
  }
  writeFrameStop();
 8002dda:	f7ff ffbb 	bl	8002d54 <writeFrameStop>
}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b007      	add	sp, #28
 8002de4:	bd90      	pop	{r4, r7, pc}

08002de6 <writeFrameShort>:
//Write a frame with p_size shorts
void writeFrameShort(uint8_t p_code, int16_t * p_short, int p_size)
{
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	240f      	movs	r4, #15
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	1c02      	adds	r2, r0, #0
 8002df6:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8002df8:	f7ff ffa4 	bl	8002d44 <writeFrameStart>
  serialWrite(p_code);
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fbc3 	bl	800358c <serialWrite>
  serialWrite('s');
 8002e06:	2073      	movs	r0, #115	@ 0x73
 8002e08:	f000 fbc0 	bl	800358c <serialWrite>
  for(i=0;i<p_size;i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e00b      	b.n	8002e2a <writeFrameShort+0x44>
  {
    writeShort(p_short[i]);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	18d3      	adds	r3, r2, r3
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7ff ff2f 	bl	8002c82 <writeShort>
  for(i=0;i<p_size;i++)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3301      	adds	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbef      	blt.n	8002e12 <writeFrameShort+0x2c>
  }
  writeFrameStop();
 8002e32:	f7ff ff8f 	bl	8002d54 <writeFrameStop>
}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b007      	add	sp, #28
 8002e3c:	bd90      	pop	{r4, r7, pc}

08002e3e <writeFrameInt>:
//Write a frame with p_size ints
void writeFrameInt(uint8_t p_code, int32_t * p_int, int p_size)
{
 8002e3e:	b590      	push	{r4, r7, lr}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	240f      	movs	r4, #15
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	1c02      	adds	r2, r0, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8002e50:	f7ff ff78 	bl	8002d44 <writeFrameStart>
  serialWrite(p_code);
 8002e54:	193b      	adds	r3, r7, r4
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 fb97 	bl	800358c <serialWrite>
  serialWrite('i');
 8002e5e:	2069      	movs	r0, #105	@ 0x69
 8002e60:	f000 fb94 	bl	800358c <serialWrite>
  for(i=0;i<p_size;i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e00a      	b.n	8002e80 <writeFrameInt+0x42>
  {
    writeInt(p_int[i]);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	18d3      	adds	r3, r2, r3
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff ff1f 	bl	8002cb8 <writeInt>
  for(i=0;i<p_size;i++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dbf0      	blt.n	8002e6a <writeFrameInt+0x2c>
  }
  writeFrameStop();
 8002e88:	f7ff ff64 	bl	8002d54 <writeFrameStop>
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b007      	add	sp, #28
 8002e92:	bd90      	pop	{r4, r7, pc}

08002e94 <writeFrameFloat>:
//Write a frame with p_size ints
void writeFrameFloat(uint8_t p_code, float * p_float, int p_size)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	240f      	movs	r4, #15
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	1c02      	adds	r2, r0, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8002ea6:	f7ff ff4d 	bl	8002d44 <writeFrameStart>
  serialWrite(p_code);
 8002eaa:	193b      	adds	r3, r7, r4
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 fb6c 	bl	800358c <serialWrite>
  serialWrite('f');
 8002eb4:	2066      	movs	r0, #102	@ 0x66
 8002eb6:	f000 fb69 	bl	800358c <serialWrite>
  for(i=0;i<p_size;i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e00a      	b.n	8002ed6 <writeFrameFloat+0x42>
  {
    writeFloat(p_float[i]);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	18d3      	adds	r3, r2, r3
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1c18      	adds	r0, r3, #0
 8002ecc:	f7ff ff17 	bl	8002cfe <writeFloat>
  for(i=0;i<p_size;i++)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbf0      	blt.n	8002ec0 <writeFrameFloat+0x2c>
  }
  writeFrameStop();
 8002ede:	f7ff ff39 	bl	8002d54 <writeFrameStop>
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b007      	add	sp, #28
 8002ee8:	bd90      	pop	{r4, r7, pc}
	...

08002eec <onReceiveCar>:
}rxState;


//Protocol management
void onReceiveCar(uint8_t p_car)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
  static uint8_t l_dataCount=0;
  static uint8_t l_pseudoHexa[2];
  static uint8_t l_pseudoHexaCnt=0;


  if (p_car==FRAME_STOP)
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2baa      	cmp	r3, #170	@ 0xaa
 8002efe:	d102      	bne.n	8002f06 <onReceiveCar+0x1a>
  {
      l_stateRx=R_FRAME_STOP;
 8002f00:	4bbd      	ldr	r3, [pc, #756]	@ (80031f8 <onReceiveCar+0x30c>)
 8002f02:	2204      	movs	r2, #4
 8002f04:	701a      	strb	r2, [r3, #0]
  }

  switch(l_stateRx)
 8002f06:	4bbc      	ldr	r3, [pc, #752]	@ (80031f8 <onReceiveCar+0x30c>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d900      	bls.n	8002f10 <onReceiveCar+0x24>
 8002f0e:	e16e      	b.n	80031ee <onReceiveCar+0x302>
 8002f10:	009a      	lsls	r2, r3, #2
 8002f12:	4bba      	ldr	r3, [pc, #744]	@ (80031fc <onReceiveCar+0x310>)
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	469f      	mov	pc, r3
  {
    case R_FRAME_STOP:  //end of frame
      switch(l_frameType)
 8002f1a:	4bb9      	ldr	r3, [pc, #740]	@ (8003200 <onReceiveCar+0x314>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	3b62      	subs	r3, #98	@ 0x62
 8002f20:	2b11      	cmp	r3, #17
 8002f22:	d900      	bls.n	8002f26 <onReceiveCar+0x3a>
 8002f24:	e089      	b.n	800303a <onReceiveCar+0x14e>
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	4bb6      	ldr	r3, [pc, #728]	@ (8003204 <onReceiveCar+0x318>)
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	469f      	mov	pc, r3
      {
	//    'e' (0x65) = command frame
	case 'e':
	  //mode test
	  if (l_frameCode == 254)
 8002f30:	4bb5      	ldr	r3, [pc, #724]	@ (8003208 <onReceiveCar+0x31c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f36:	d103      	bne.n	8002f40 <onReceiveCar+0x54>
	  {
	    testProtocol=1;  //library test mode
 8002f38:	4bb4      	ldr	r3, [pc, #720]	@ (800320c <onReceiveCar+0x320>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
	  }
	  else if (testProtocol==0) //test mode?
	    onNewFrameCommand(l_frameCode);
	  else
	    writeFrame(l_frameCode); //echo
	  break;
 8002f3e:	e07c      	b.n	800303a <onReceiveCar+0x14e>
	  else if (l_frameCode == 255)
 8002f40:	4bb1      	ldr	r3, [pc, #708]	@ (8003208 <onReceiveCar+0x31c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2bff      	cmp	r3, #255	@ 0xff
 8002f46:	d103      	bne.n	8002f50 <onReceiveCar+0x64>
	    testProtocol=0;  //library test mode end
 8002f48:	4bb0      	ldr	r3, [pc, #704]	@ (800320c <onReceiveCar+0x320>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
	  break;
 8002f4e:	e074      	b.n	800303a <onReceiveCar+0x14e>
	  else if (testProtocol==0) //test mode?
 8002f50:	4bae      	ldr	r3, [pc, #696]	@ (800320c <onReceiveCar+0x320>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <onReceiveCar+0x7a>
	    onNewFrameCommand(l_frameCode);
 8002f5a:	4bab      	ldr	r3, [pc, #684]	@ (8003208 <onReceiveCar+0x31c>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff fc94 	bl	800288c <onNewFrameCommand>
	  break;
 8002f64:	e069      	b.n	800303a <onReceiveCar+0x14e>
	    writeFrame(l_frameCode); //echo
 8002f66:	4ba8      	ldr	r3, [pc, #672]	@ (8003208 <onReceiveCar+0x31c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fefa 	bl	8002d64 <writeFrame>
	  break;
 8002f70:	e063      	b.n	800303a <onReceiveCar+0x14e>
	//    'b' (0x62) = integer 8 bits
	case 'b':
	  if (testProtocol==0) //test mode?
 8002f72:	4ba6      	ldr	r3, [pc, #664]	@ (800320c <onReceiveCar+0x320>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <onReceiveCar+0xa4>
	    onNewFrameByte(l_frameCode,l_data.i8,l_dataCount);
 8002f7c:	4ba2      	ldr	r3, [pc, #648]	@ (8003208 <onReceiveCar+0x31c>)
 8002f7e:	7818      	ldrb	r0, [r3, #0]
 8002f80:	4ba3      	ldr	r3, [pc, #652]	@ (8003210 <onReceiveCar+0x324>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	001a      	movs	r2, r3
 8002f86:	4ba3      	ldr	r3, [pc, #652]	@ (8003214 <onReceiveCar+0x328>)
 8002f88:	0019      	movs	r1, r3
 8002f8a:	f7ff fc89 	bl	80028a0 <onNewFrameByte>
	  else
	    writeFrameByte(l_frameCode,l_data.i8,l_dataCount); //echo for test
	  break;
 8002f8e:	e054      	b.n	800303a <onReceiveCar+0x14e>
	    writeFrameByte(l_frameCode,l_data.i8,l_dataCount); //echo for test
 8002f90:	4b9d      	ldr	r3, [pc, #628]	@ (8003208 <onReceiveCar+0x31c>)
 8002f92:	7818      	ldrb	r0, [r3, #0]
 8002f94:	4b9e      	ldr	r3, [pc, #632]	@ (8003210 <onReceiveCar+0x324>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	001a      	movs	r2, r3
 8002f9a:	4b9e      	ldr	r3, [pc, #632]	@ (8003214 <onReceiveCar+0x328>)
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	f7ff fef7 	bl	8002d90 <writeFrameByte>
	  break;
 8002fa2:	e04a      	b.n	800303a <onReceiveCar+0x14e>
	//    's' (0x73) = integer 16 bits
	case 's':
	  if (testProtocol==0) //test mode?
 8002fa4:	4b99      	ldr	r3, [pc, #612]	@ (800320c <onReceiveCar+0x320>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b25b      	sxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <onReceiveCar+0xd6>
	    onNewFrameShort(l_frameCode,l_data.i16,l_dataCount);
 8002fae:	4b96      	ldr	r3, [pc, #600]	@ (8003208 <onReceiveCar+0x31c>)
 8002fb0:	7818      	ldrb	r0, [r3, #0]
 8002fb2:	4b97      	ldr	r3, [pc, #604]	@ (8003210 <onReceiveCar+0x324>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	4b96      	ldr	r3, [pc, #600]	@ (8003214 <onReceiveCar+0x328>)
 8002fba:	0019      	movs	r1, r3
 8002fbc:	f7ff fc7e 	bl	80028bc <onNewFrameShort>
	  else
	    writeFrameShort(l_frameCode,l_data.i16,l_dataCount); //echo for test
	  break;
 8002fc0:	e03b      	b.n	800303a <onReceiveCar+0x14e>
	    writeFrameShort(l_frameCode,l_data.i16,l_dataCount); //echo for test
 8002fc2:	4b91      	ldr	r3, [pc, #580]	@ (8003208 <onReceiveCar+0x31c>)
 8002fc4:	7818      	ldrb	r0, [r3, #0]
 8002fc6:	4b92      	ldr	r3, [pc, #584]	@ (8003210 <onReceiveCar+0x324>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	001a      	movs	r2, r3
 8002fcc:	4b91      	ldr	r3, [pc, #580]	@ (8003214 <onReceiveCar+0x328>)
 8002fce:	0019      	movs	r1, r3
 8002fd0:	f7ff ff09 	bl	8002de6 <writeFrameShort>
	  break;
 8002fd4:	e031      	b.n	800303a <onReceiveCar+0x14e>
	//    'i' (0x6C) = integer 32 bits
	case 'i':
	  if (testProtocol==0) //test mode?
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800320c <onReceiveCar+0x320>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b25b      	sxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <onReceiveCar+0x108>
	    onNewFrameInt(l_frameCode,l_data.i32,l_dataCount);
 8002fe0:	4b89      	ldr	r3, [pc, #548]	@ (8003208 <onReceiveCar+0x31c>)
 8002fe2:	7818      	ldrb	r0, [r3, #0]
 8002fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8003210 <onReceiveCar+0x324>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	001a      	movs	r2, r3
 8002fea:	4b8a      	ldr	r3, [pc, #552]	@ (8003214 <onReceiveCar+0x328>)
 8002fec:	0019      	movs	r1, r3
 8002fee:	f7ff fc95 	bl	800291c <onNewFrameInt>
	  else
	    writeFrameInt(l_frameCode,l_data.i32,l_dataCount); //echo for test
	  break;
 8002ff2:	e022      	b.n	800303a <onReceiveCar+0x14e>
	    writeFrameInt(l_frameCode,l_data.i32,l_dataCount); //echo for test
 8002ff4:	4b84      	ldr	r3, [pc, #528]	@ (8003208 <onReceiveCar+0x31c>)
 8002ff6:	7818      	ldrb	r0, [r3, #0]
 8002ff8:	4b85      	ldr	r3, [pc, #532]	@ (8003210 <onReceiveCar+0x324>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	4b85      	ldr	r3, [pc, #532]	@ (8003214 <onReceiveCar+0x328>)
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff ff1c 	bl	8002e3e <writeFrameInt>
	  break;
 8003006:	e018      	b.n	800303a <onReceiveCar+0x14e>
	//    'f' (0x66) = float 32 bits
	case 'f':
	  if (testProtocol==0) //test mode?
 8003008:	4b80      	ldr	r3, [pc, #512]	@ (800320c <onReceiveCar+0x320>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b25b      	sxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <onReceiveCar+0x13a>
	    onNewFrameFloat(l_frameCode,l_data.f32,l_dataCount);
 8003012:	4b7d      	ldr	r3, [pc, #500]	@ (8003208 <onReceiveCar+0x31c>)
 8003014:	7818      	ldrb	r0, [r3, #0]
 8003016:	4b7e      	ldr	r3, [pc, #504]	@ (8003210 <onReceiveCar+0x324>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	001a      	movs	r2, r3
 800301c:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <onReceiveCar+0x328>)
 800301e:	0019      	movs	r1, r3
 8003020:	f7ff fc89 	bl	8002936 <onNewFrameFloat>
	  else
	    writeFrameFloat(l_frameCode,l_data.f32,l_dataCount); //echo for test
	  break;
 8003024:	e008      	b.n	8003038 <onReceiveCar+0x14c>
	    writeFrameFloat(l_frameCode,l_data.f32,l_dataCount); //echo for test
 8003026:	4b78      	ldr	r3, [pc, #480]	@ (8003208 <onReceiveCar+0x31c>)
 8003028:	7818      	ldrb	r0, [r3, #0]
 800302a:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <onReceiveCar+0x324>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	001a      	movs	r2, r3
 8003030:	4b78      	ldr	r3, [pc, #480]	@ (8003214 <onReceiveCar+0x328>)
 8003032:	0019      	movs	r1, r3
 8003034:	f7ff ff2e 	bl	8002e94 <writeFrameFloat>
	  break;
 8003038:	46c0      	nop			@ (mov r8, r8)
      }
      l_receiveCount=0;
 800303a:	4b77      	ldr	r3, [pc, #476]	@ (8003218 <onReceiveCar+0x32c>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
      l_dataCount=0;
 8003040:	4b73      	ldr	r3, [pc, #460]	@ (8003210 <onReceiveCar+0x324>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
      l_pseudoHexaCnt=0;
 8003046:	4b75      	ldr	r3, [pc, #468]	@ (800321c <onReceiveCar+0x330>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
      l_stateRx=IDLE;
 800304c:	4b6a      	ldr	r3, [pc, #424]	@ (80031f8 <onReceiveCar+0x30c>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
      break;
 8003052:	e0cc      	b.n	80031ee <onReceiveCar+0x302>
    case IDLE:
      if (p_car==FRAME_START)
 8003054:	1dfb      	adds	r3, r7, #7
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b55      	cmp	r3, #85	@ 0x55
 800305a:	d000      	beq.n	800305e <onReceiveCar+0x172>
 800305c:	e0c4      	b.n	80031e8 <onReceiveCar+0x2fc>
	l_stateRx=R_FRAME_START;
 800305e:	4b66      	ldr	r3, [pc, #408]	@ (80031f8 <onReceiveCar+0x30c>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
      break;
 8003064:	e0c0      	b.n	80031e8 <onReceiveCar+0x2fc>
    case R_FRAME_START:  //receive frame code
      l_frameCode=p_car;
 8003066:	4b68      	ldr	r3, [pc, #416]	@ (8003208 <onReceiveCar+0x31c>)
 8003068:	1dfa      	adds	r2, r7, #7
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	701a      	strb	r2, [r3, #0]
      l_stateRx=R_FRAME_CODE;
 800306e:	4b62      	ldr	r3, [pc, #392]	@ (80031f8 <onReceiveCar+0x30c>)
 8003070:	2202      	movs	r2, #2
 8003072:	701a      	strb	r2, [r3, #0]
      break;
 8003074:	e0bb      	b.n	80031ee <onReceiveCar+0x302>
    case R_FRAME_CODE:  //receive frame type
      l_frameType=p_car;
 8003076:	4b62      	ldr	r3, [pc, #392]	@ (8003200 <onReceiveCar+0x314>)
 8003078:	1dfa      	adds	r2, r7, #7
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	701a      	strb	r2, [r3, #0]
      l_stateRx=R_FRAME_TYPE;
 800307e:	4b5e      	ldr	r3, [pc, #376]	@ (80031f8 <onReceiveCar+0x30c>)
 8003080:	2203      	movs	r2, #3
 8003082:	701a      	strb	r2, [r3, #0]
      break;
 8003084:	e0b3      	b.n	80031ee <onReceiveCar+0x302>
    case R_FRAME_TYPE:  //receive data
      if (l_pseudoHexaCnt==0)
 8003086:	4b65      	ldr	r3, [pc, #404]	@ (800321c <onReceiveCar+0x330>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <onReceiveCar+0x1b2>
      {
	l_pseudoHexaCnt=1;
 800308e:	4b63      	ldr	r3, [pc, #396]	@ (800321c <onReceiveCar+0x330>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
	l_pseudoHexa[0]=p_car;
 8003094:	4b62      	ldr	r3, [pc, #392]	@ (8003220 <onReceiveCar+0x334>)
 8003096:	1dfa      	adds	r2, r7, #7
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	701a      	strb	r2, [r3, #0]
	break;
 800309c:	e0a7      	b.n	80031ee <onReceiveCar+0x302>
      }
      else
      {
	l_pseudoHexa[1]=p_car;
 800309e:	4b60      	ldr	r3, [pc, #384]	@ (8003220 <onReceiveCar+0x334>)
 80030a0:	1dfa      	adds	r2, r7, #7
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	705a      	strb	r2, [r3, #1]
	l_pseudoHexaCnt=0;
 80030a6:	4b5d      	ldr	r3, [pc, #372]	@ (800321c <onReceiveCar+0x330>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
	//pseudo hexa to char conv
	p_car=((l_pseudoHexa[0]&0x0F)<<4) | (l_pseudoHexa[1]&0x0F);
 80030ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003220 <onReceiveCar+0x334>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	b25a      	sxtb	r2, r3
 80030b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003220 <onReceiveCar+0x334>)
 80030b8:	785b      	ldrb	r3, [r3, #1]
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	210f      	movs	r1, #15
 80030be:	400b      	ands	r3, r1
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	701a      	strb	r2, [r3, #0]
      }

      l_conv.bytes[l_receiveCount]=p_car;
 80030ca:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <onReceiveCar+0x32c>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	0019      	movs	r1, r3
 80030d0:	4b54      	ldr	r3, [pc, #336]	@ (8003224 <onReceiveCar+0x338>)
 80030d2:	1dfa      	adds	r2, r7, #7
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	545a      	strb	r2, [r3, r1]
      l_receiveCount++;
 80030d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003218 <onReceiveCar+0x32c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b4d      	ldr	r3, [pc, #308]	@ (8003218 <onReceiveCar+0x32c>)
 80030e2:	701a      	strb	r2, [r3, #0]
      switch(l_frameType)
 80030e4:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <onReceiveCar+0x314>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b73      	cmp	r3, #115	@ 0x73
 80030ea:	d020      	beq.n	800312e <onReceiveCar+0x242>
 80030ec:	dd00      	ble.n	80030f0 <onReceiveCar+0x204>
 80030ee:	e07d      	b.n	80031ec <onReceiveCar+0x300>
 80030f0:	2b69      	cmp	r3, #105	@ 0x69
 80030f2:	d037      	beq.n	8003164 <onReceiveCar+0x278>
 80030f4:	dd00      	ble.n	80030f8 <onReceiveCar+0x20c>
 80030f6:	e079      	b.n	80031ec <onReceiveCar+0x300>
 80030f8:	2b62      	cmp	r3, #98	@ 0x62
 80030fa:	d002      	beq.n	8003102 <onReceiveCar+0x216>
 80030fc:	2b66      	cmp	r3, #102	@ 0x66
 80030fe:	d04b      	beq.n	8003198 <onReceiveCar+0x2ac>
	    l_dataCount++;
	    l_receiveCount=0;
	  }
	  break;
      }
      break;
 8003100:	e074      	b.n	80031ec <onReceiveCar+0x300>
	  if (l_dataCount==MAX_DATA_i8) // rejects the parameter: too many data parameters
 8003102:	4b43      	ldr	r3, [pc, #268]	@ (8003210 <onReceiveCar+0x324>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b40      	cmp	r3, #64	@ 0x40
 8003108:	d060      	beq.n	80031cc <onReceiveCar+0x2e0>
	  l_data.i8[l_dataCount]=p_car;
 800310a:	4b41      	ldr	r3, [pc, #260]	@ (8003210 <onReceiveCar+0x324>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	001a      	movs	r2, r3
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	2100      	movs	r1, #0
 8003114:	5659      	ldrsb	r1, [r3, r1]
 8003116:	4b3f      	ldr	r3, [pc, #252]	@ (8003214 <onReceiveCar+0x328>)
 8003118:	5499      	strb	r1, [r3, r2]
	  l_dataCount++;
 800311a:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <onReceiveCar+0x324>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b3b      	ldr	r3, [pc, #236]	@ (8003210 <onReceiveCar+0x324>)
 8003124:	701a      	strb	r2, [r3, #0]
	  l_receiveCount=0;
 8003126:	4b3c      	ldr	r3, [pc, #240]	@ (8003218 <onReceiveCar+0x32c>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
	  break;
 800312c:	e05b      	b.n	80031e6 <onReceiveCar+0x2fa>
	  if (l_dataCount==MAX_DATA_i16) // rejects the parameter: too many data parameters
 800312e:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <onReceiveCar+0x324>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b20      	cmp	r3, #32
 8003134:	d04c      	beq.n	80031d0 <onReceiveCar+0x2e4>
	  if (l_receiveCount==2)
 8003136:	4b38      	ldr	r3, [pc, #224]	@ (8003218 <onReceiveCar+0x32c>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d14a      	bne.n	80031d4 <onReceiveCar+0x2e8>
	    l_data.i16[l_dataCount]=l_conv.i16;
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <onReceiveCar+0x324>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	001a      	movs	r2, r3
 8003144:	4b37      	ldr	r3, [pc, #220]	@ (8003224 <onReceiveCar+0x338>)
 8003146:	2100      	movs	r1, #0
 8003148:	5e59      	ldrsh	r1, [r3, r1]
 800314a:	4b32      	ldr	r3, [pc, #200]	@ (8003214 <onReceiveCar+0x328>)
 800314c:	0052      	lsls	r2, r2, #1
 800314e:	52d1      	strh	r1, [r2, r3]
	    l_dataCount++;
 8003150:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <onReceiveCar+0x324>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b2d      	ldr	r3, [pc, #180]	@ (8003210 <onReceiveCar+0x324>)
 800315a:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 800315c:	4b2e      	ldr	r3, [pc, #184]	@ (8003218 <onReceiveCar+0x32c>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
	  break;
 8003162:	e037      	b.n	80031d4 <onReceiveCar+0x2e8>
	  if (l_dataCount==MAX_DATA_i32) // rejects the parameter: too many data parameters
 8003164:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <onReceiveCar+0x324>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b10      	cmp	r3, #16
 800316a:	d035      	beq.n	80031d8 <onReceiveCar+0x2ec>
	  if (l_receiveCount==4)
 800316c:	4b2a      	ldr	r3, [pc, #168]	@ (8003218 <onReceiveCar+0x32c>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d133      	bne.n	80031dc <onReceiveCar+0x2f0>
	    l_data.i32[l_dataCount]=l_conv.i32;;
 8003174:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <onReceiveCar+0x324>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	001a      	movs	r2, r3
 800317a:	4b2a      	ldr	r3, [pc, #168]	@ (8003224 <onReceiveCar+0x338>)
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <onReceiveCar+0x328>)
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	50d1      	str	r1, [r2, r3]
	    l_dataCount++;
 8003184:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <onReceiveCar+0x324>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	b2da      	uxtb	r2, r3
 800318c:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <onReceiveCar+0x324>)
 800318e:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 8003190:	4b21      	ldr	r3, [pc, #132]	@ (8003218 <onReceiveCar+0x32c>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
	  break;
 8003196:	e021      	b.n	80031dc <onReceiveCar+0x2f0>
	  if (l_dataCount==MAX_DATA_f32) // rejects the parameter: too many data parameters
 8003198:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <onReceiveCar+0x324>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d01f      	beq.n	80031e0 <onReceiveCar+0x2f4>
	  if (l_receiveCount==4)
 80031a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <onReceiveCar+0x32c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11d      	bne.n	80031e4 <onReceiveCar+0x2f8>
	    l_data.f32[l_dataCount]=l_conv.f32;;
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <onReceiveCar+0x324>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	001a      	movs	r2, r3
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <onReceiveCar+0x338>)
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <onReceiveCar+0x328>)
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	50d1      	str	r1, [r2, r3]
	    l_dataCount++;
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <onReceiveCar+0x324>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <onReceiveCar+0x324>)
 80031c2:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 80031c4:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <onReceiveCar+0x32c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
	  break;
 80031ca:	e00b      	b.n	80031e4 <onReceiveCar+0x2f8>
	    break;
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	e00d      	b.n	80031ec <onReceiveCar+0x300>
	    break;
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	e00b      	b.n	80031ec <onReceiveCar+0x300>
	  break;
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	e009      	b.n	80031ec <onReceiveCar+0x300>
	    break;
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	e007      	b.n	80031ec <onReceiveCar+0x300>
	  break;
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	e005      	b.n	80031ec <onReceiveCar+0x300>
	    break;
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	e003      	b.n	80031ec <onReceiveCar+0x300>
	  break;
 80031e4:	46c0      	nop			@ (mov r8, r8)
      break;
 80031e6:	e001      	b.n	80031ec <onReceiveCar+0x300>
      break;
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	e000      	b.n	80031ee <onReceiveCar+0x302>
      break;
 80031ec:	46c0      	nop			@ (mov r8, r8)
  }

}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b002      	add	sp, #8
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	2000022d 	.word	0x2000022d
 80031fc:	080054bc 	.word	0x080054bc
 8003200:	2000022e 	.word	0x2000022e
 8003204:	080054d0 	.word	0x080054d0
 8003208:	2000022f 	.word	0x2000022f
 800320c:	2000022c 	.word	0x2000022c
 8003210:	20000230 	.word	0x20000230
 8003214:	20000234 	.word	0x20000234
 8003218:	20000274 	.word	0x20000274
 800321c:	20000275 	.word	0x20000275
 8003220:	20000278 	.word	0x20000278
 8003224:	2000027c 	.word	0x2000027c

08003228 <RetargetInit>:
#define STDERR_FILENO 2

USART_TypeDef *gHuart;
extern  uint8_t g_rxCarUSART2;

void RetargetInit(USART_TypeDef *huart) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003230:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <RetargetInit+0x28>)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003236:	4b07      	ldr	r3, [pc, #28]	@ (8003254 <RetargetInit+0x2c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6898      	ldr	r0, [r3, #8]
 800323c:	2300      	movs	r3, #0
 800323e:	2202      	movs	r2, #2
 8003240:	2100      	movs	r1, #0
 8003242:	f001 fda3 	bl	8004d8c <setvbuf>
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	20000280 	.word	0x20000280
 8003254:	20000018 	.word	0x20000018

08003258 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d002      	beq.n	8003270 <_write+0x18>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d113      	bne.n	8003298 <_write+0x40>
      for (int i=0; i<len;i++)
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e00a      	b.n	800328c <_write+0x34>
      {
        serialWrite(*ptr);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f986 	bl	800358c <serialWrite>
        ptr++;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	3301      	adds	r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
      for (int i=0; i<len;i++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf0      	blt.n	8003276 <_write+0x1e>
      }
    return len;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	e006      	b.n	80032a6 <_write+0x4e>
  }
  errno = EBADF;
 8003298:	f001 fed0 	bl	800503c <__errno>
 800329c:	0003      	movs	r3, r0
 800329e:	2209      	movs	r2, #9
 80032a0:	601a      	str	r2, [r3, #0]
  return -1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	425b      	negs	r3, r3
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b006      	add	sp, #24
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_close>:

int _close(int fd) {
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db04      	blt.n	80032c6 <_close+0x18>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	dc01      	bgt.n	80032c6 <_close+0x18>
    return 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e006      	b.n	80032d4 <_close+0x26>

  errno = EBADF;
 80032c6:	f001 feb9 	bl	800503c <__errno>
 80032ca:	0003      	movs	r3, r0
 80032cc:	2209      	movs	r2, #9
 80032ce:	601a      	str	r2, [r3, #0]
  return -1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	425b      	negs	r3, r3
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80032e8:	f001 fea8 	bl	800503c <__errno>
 80032ec:	0003      	movs	r3, r0
 80032ee:	2209      	movs	r2, #9
 80032f0:	601a      	str	r2, [r3, #0]
  return -1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	425b      	negs	r3, r3
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}

080032fe <_read>:

int _read(int fd, char* ptr, int len) {
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]

  int l_car=0;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
  if (fd == STDIN_FILENO) {
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d110      	bne.n	8003336 <_read+0x38>
      do
      {
	  l_car=rxFifoRead();
 8003314:	f000 f906 	bl	8003524 <rxFifoRead>
 8003318:	0003      	movs	r3, r0
 800331a:	617b      	str	r3, [r7, #20]
	  if (l_car==-1)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	3301      	adds	r3, #1
 8003320:	d100      	bne.n	8003324 <_read+0x26>
	  {
    	    __WFI(); //wait for interrupt (for a key ==> data RX)
 8003322:	bf30      	wfi
    	  }
      }
      while(l_car==-1); //while no char received
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3301      	adds	r3, #1
 8003328:	d0f4      	beq.n	8003314 <_read+0x16>
      *ptr=l_car;  //save received data
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	701a      	strb	r2, [r3, #0]
      return 1;
 8003332:	2301      	movs	r3, #1
 8003334:	e006      	b.n	8003344 <_read+0x46>
  }
  errno = EBADF;
 8003336:	f001 fe81 	bl	800503c <__errno>
 800333a:	0003      	movs	r3, r0
 800333c:	2209      	movs	r2, #9
 800333e:	601a      	str	r2, [r3, #0]
  return -1;
 8003340:	2301      	movs	r3, #1
 8003342:	425b      	negs	r3, r3
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b006      	add	sp, #24
 800334a:	bd80      	pop	{r7, pc}

0800334c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db08      	blt.n	800336e <_fstat+0x22>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	dc05      	bgt.n	800336e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	0192      	lsls	r2, r2, #6
 8003368:	605a      	str	r2, [r3, #4]
    return 0;
 800336a:	2300      	movs	r3, #0
 800336c:	e005      	b.n	800337a <_fstat+0x2e>
  }

  errno = EBADF;
 800336e:	f001 fe65 	bl	800503c <__errno>
 8003372:	0003      	movs	r3, r0
 8003374:	2209      	movs	r2, #9
 8003376:	601a      	str	r2, [r3, #0]
  return 0;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}

08003382 <LL_USART_IsActiveFlag_ORE>:
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2208      	movs	r2, #8
 8003390:	4013      	ands	r3, r2
 8003392:	2b08      	cmp	r3, #8
 8003394:	d101      	bne.n	800339a <LL_USART_IsActiveFlag_ORE+0x18>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <LL_USART_IsActiveFlag_ORE+0x1a>
 800339a:	2300      	movs	r3, #0
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <LL_USART_IsActiveFlag_RXNE>:
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d101      	bne.n	80033bc <LL_USART_IsActiveFlag_RXNE+0x18>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <LL_USART_IsActiveFlag_RXNE+0x1a>
 80033bc:	2300      	movs	r3, #0
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <LL_USART_IsActiveFlag_TXE>:
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2280      	movs	r2, #128	@ 0x80
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d101      	bne.n	80033de <LL_USART_IsActiveFlag_TXE+0x18>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_USART_IsActiveFlag_TXE+0x1a>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <LL_USART_ClearFlag_ORE>:
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2208      	movs	r2, #8
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}

080033fe <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	000a      	movs	r2, r1
 800341e:	1cfb      	adds	r3, r7, #3
 8003420:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8003422:	1cfb      	adds	r3, r7, #3
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}

08003432 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	e7fd      	b.n	8003436 <NMI_Handler+0x4>

0800343a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	e7fd      	b.n	800343e <HardFault_Handler+0x4>

08003442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timeMs++;
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <SysTick_Handler+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	4b02      	ldr	r3, [pc, #8]	@ (800346c <SysTick_Handler+0x14>)
 8003464:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000284 	.word	0x20000284

08003470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 8003474:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <USART2_IRQHandler+0x3c>)
 8003476:	0018      	movs	r0, r3
 8003478:	f7ff ff94 	bl	80033a4 <LL_USART_IsActiveFlag_RXNE>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d007      	beq.n	8003490 <USART2_IRQHandler+0x20>
  {
      rxFifoWrite(LL_USART_ReceiveData8(USART2));
 8003480:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <USART2_IRQHandler+0x3c>)
 8003482:	0018      	movs	r0, r3
 8003484:	f7ff ffbb 	bl	80033fe <LL_USART_ReceiveData8>
 8003488:	0003      	movs	r3, r0
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f820 	bl	80034d0 <rxFifoWrite>
  }

  /* Clear overrun error flag */
  if (LL_USART_IsActiveFlag_ORE(USART2))
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <USART2_IRQHandler+0x3c>)
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff ff75 	bl	8003382 <LL_USART_IsActiveFlag_ORE>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d003      	beq.n	80034a4 <USART2_IRQHandler+0x34>
    {
      LL_USART_ClearFlag_ORE(USART2);
 800349c:	4b03      	ldr	r3, [pc, #12]	@ (80034ac <USART2_IRQHandler+0x3c>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff ffa2 	bl	80033e8 <LL_USART_ClearFlag_ORE>
    }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034a4:	46c0      	nop			@ (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	40004400 	.word	0x40004400

080034b0 <rxFifoInit>:
   int writePos;
   int count;
   uint8_t buffer[FIFO_LENGTH];
}g_rxFifo;
void rxFifoInit(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  g_rxFifo.readPos=0;
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <rxFifoInit+0x1c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
  g_rxFifo.writePos=0;
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <rxFifoInit+0x1c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]
  g_rxFifo.count=0;
 80034c0:	4b02      	ldr	r3, [pc, #8]	@ (80034cc <rxFifoInit+0x1c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000288 	.word	0x20000288

080034d0 <rxFifoWrite>:
void rxFifoWrite(uint8_t p_car)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	0002      	movs	r2, r0
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	701a      	strb	r2, [r3, #0]
 if (g_rxFifo.count==FIFO_LENGTH) return;  // buffer full
 80034dc:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <rxFifoWrite+0x50>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b1e      	cmp	r3, #30
 80034e2:	d018      	beq.n	8003516 <rxFifoWrite+0x46>
 g_rxFifo.buffer[g_rxFifo.writePos]=p_car;
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <rxFifoWrite+0x50>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003520 <rxFifoWrite+0x50>)
 80034ea:	18d3      	adds	r3, r2, r3
 80034ec:	1dfa      	adds	r2, r7, #7
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	731a      	strb	r2, [r3, #12]
 g_rxFifo.writePos++;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <rxFifoWrite+0x50>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <rxFifoWrite+0x50>)
 80034fa:	605a      	str	r2, [r3, #4]
 g_rxFifo.count++;
 80034fc:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <rxFifoWrite+0x50>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <rxFifoWrite+0x50>)
 8003504:	609a      	str	r2, [r3, #8]
 if (g_rxFifo.writePos==FIFO_LENGTH) g_rxFifo.writePos=0;
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <rxFifoWrite+0x50>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b1e      	cmp	r3, #30
 800350c:	d104      	bne.n	8003518 <rxFifoWrite+0x48>
 800350e:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <rxFifoWrite+0x50>)
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e000      	b.n	8003518 <rxFifoWrite+0x48>
 if (g_rxFifo.count==FIFO_LENGTH) return;  // buffer full
 8003516:	46c0      	nop			@ (mov r8, r8)
}
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	20000288 	.word	0x20000288

08003524 <rxFifoRead>:
int rxFifoRead(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800352a:	b672      	cpsid	i
}
 800352c:	46c0      	nop			@ (mov r8, r8)
  int l_car;
  __disable_irq();
  if (g_rxFifo.count==0)
 800352e:	4b13      	ldr	r3, [pc, #76]	@ (800357c <rxFifoRead+0x58>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <rxFifoRead+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 8003536:	b662      	cpsie	i
}
 8003538:	46c0      	nop			@ (mov r8, r8)
  {
      __enable_irq();
      return -1; //empty
 800353a:	2301      	movs	r3, #1
 800353c:	425b      	negs	r3, r3
 800353e:	e019      	b.n	8003574 <rxFifoRead+0x50>
  }
  l_car=g_rxFifo.buffer[g_rxFifo.readPos];
 8003540:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <rxFifoRead+0x58>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <rxFifoRead+0x58>)
 8003546:	18d3      	adds	r3, r2, r3
 8003548:	7b1b      	ldrb	r3, [r3, #12]
 800354a:	607b      	str	r3, [r7, #4]
  g_rxFifo.count--;
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <rxFifoRead+0x58>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <rxFifoRead+0x58>)
 8003554:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003556:	b662      	cpsie	i
}
 8003558:	46c0      	nop			@ (mov r8, r8)
  __enable_irq();
  g_rxFifo.readPos++;
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <rxFifoRead+0x58>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	4b06      	ldr	r3, [pc, #24]	@ (800357c <rxFifoRead+0x58>)
 8003562:	601a      	str	r2, [r3, #0]
  if (g_rxFifo.readPos==FIFO_LENGTH) g_rxFifo.readPos=0;
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <rxFifoRead+0x58>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b1e      	cmp	r3, #30
 800356a:	d102      	bne.n	8003572 <rxFifoRead+0x4e>
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <rxFifoRead+0x58>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
  return l_car;
 8003572:	687b      	ldr	r3, [r7, #4]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000288 	.word	0x20000288

08003580 <getchInit>:

void getchInit(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <serialWrite>:
   return 0;
 else
   return 1;
}
void serialWrite(uint8_t p_car)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	0002      	movs	r2, r0
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
  while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <serialWrite+0x30>)
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff ff12 	bl	80033c6 <LL_USART_IsActiveFlag_TXE>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d0f9      	beq.n	800359a <serialWrite+0xe>
  LL_USART_TransmitData8(USART2,p_car);
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4a04      	ldr	r2, [pc, #16]	@ (80035bc <serialWrite+0x30>)
 80035ac:	0019      	movs	r1, r3
 80035ae:	0010      	movs	r0, r2
 80035b0:	f7ff ff30 	bl	8003414 <LL_USART_TransmitData8>
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40004400 	.word	0x40004400

080035c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <_sbrk+0x5c>)
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <_sbrk+0x60>)
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d4:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035dc:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <_sbrk+0x64>)
 80035de:	4a12      	ldr	r2, [pc, #72]	@ (8003628 <_sbrk+0x68>)
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035e2:	4b10      	ldr	r3, [pc, #64]	@ (8003624 <_sbrk+0x64>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d207      	bcs.n	8003600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f0:	f001 fd24 	bl	800503c <__errno>
 80035f4:	0003      	movs	r3, r0
 80035f6:	220c      	movs	r2, #12
 80035f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	425b      	negs	r3, r3
 80035fe:	e009      	b.n	8003614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	18d2      	adds	r2, r2, r3
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <_sbrk+0x64>)
 8003610:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b006      	add	sp, #24
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20002000 	.word	0x20002000
 8003620:	00000400 	.word	0x00000400
 8003624:	200002b4 	.word	0x200002b4
 8003628:	20000408 	.word	0x20000408

0800362c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <LL_APB2_GRP1_EnableClock>:
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003640:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <LL_APB2_GRP1_EnableClock+0x28>)
 8003642:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003644:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <LL_APB2_GRP1_EnableClock+0x28>)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	430a      	orrs	r2, r1
 800364a:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800364c:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <LL_APB2_GRP1_EnableClock+0x28>)
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b004      	add	sp, #16
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <LL_IOP_GRP1_EnableClock>:
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800366c:	4b07      	ldr	r3, [pc, #28]	@ (800368c <LL_IOP_GRP1_EnableClock+0x28>)
 800366e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <LL_IOP_GRP1_EnableClock+0x28>)
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	430a      	orrs	r2, r1
 8003676:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8003678:	4b04      	ldr	r3, [pc, #16]	@ (800368c <LL_IOP_GRP1_EnableClock+0x28>)
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <LL_TIM_DisableARRPreload>:
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2280      	movs	r2, #128	@ 0x80
 800369e:	4393      	bics	r3, r2
 80036a0:	001a      	movs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <LL_TIM_OC_DisableFast>:
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d00d      	beq.n	80036dc <LL_TIM_OC_DisableFast+0x2c>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d008      	beq.n	80036d8 <LL_TIM_OC_DisableFast+0x28>
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d101      	bne.n	80036d4 <LL_TIM_OC_DisableFast+0x24>
 80036d0:	2304      	movs	r3, #4
 80036d2:	e004      	b.n	80036de <LL_TIM_OC_DisableFast+0x2e>
 80036d4:	2306      	movs	r3, #6
 80036d6:	e002      	b.n	80036de <LL_TIM_OC_DisableFast+0x2e>
 80036d8:	2302      	movs	r3, #2
 80036da:	e000      	b.n	80036de <LL_TIM_OC_DisableFast+0x2e>
 80036dc:	2300      	movs	r3, #0
 80036de:	200f      	movs	r0, #15
 80036e0:	183a      	adds	r2, r7, r0
 80036e2:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3318      	adds	r3, #24
 80036e8:	0019      	movs	r1, r3
 80036ea:	183b      	adds	r3, r7, r0
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <LL_TIM_OC_DisableFast+0x68>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	18cb      	adds	r3, r1, r3
 80036f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	183a      	adds	r2, r7, r0
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	4907      	ldr	r1, [pc, #28]	@ (800371c <LL_TIM_OC_DisableFast+0x6c>)
 8003700:	5c8a      	ldrb	r2, [r1, r2]
 8003702:	0011      	movs	r1, r2
 8003704:	2204      	movs	r2, #4
 8003706:	408a      	lsls	r2, r1
 8003708:	43d2      	mvns	r2, r2
 800370a:	401a      	ands	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	601a      	str	r2, [r3, #0]
}
 8003710:	46c0      	nop			@ (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}
 8003718:	0800553c 	.word	0x0800553c
 800371c:	08005544 	.word	0x08005544

08003720 <LL_TIM_OC_EnablePreload>:
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d00d      	beq.n	800374c <LL_TIM_OC_EnablePreload+0x2c>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d008      	beq.n	8003748 <LL_TIM_OC_EnablePreload+0x28>
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	429a      	cmp	r2, r3
 800373e:	d101      	bne.n	8003744 <LL_TIM_OC_EnablePreload+0x24>
 8003740:	2304      	movs	r3, #4
 8003742:	e004      	b.n	800374e <LL_TIM_OC_EnablePreload+0x2e>
 8003744:	2306      	movs	r3, #6
 8003746:	e002      	b.n	800374e <LL_TIM_OC_EnablePreload+0x2e>
 8003748:	2302      	movs	r3, #2
 800374a:	e000      	b.n	800374e <LL_TIM_OC_EnablePreload+0x2e>
 800374c:	2300      	movs	r3, #0
 800374e:	200f      	movs	r0, #15
 8003750:	183a      	adds	r2, r7, r0
 8003752:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3318      	adds	r3, #24
 8003758:	0019      	movs	r1, r3
 800375a:	183b      	adds	r3, r7, r0
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <LL_TIM_OC_EnablePreload+0x68>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	18cb      	adds	r3, r1, r3
 8003764:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	183b      	adds	r3, r7, r0
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4907      	ldr	r1, [pc, #28]	@ (800378c <LL_TIM_OC_EnablePreload+0x6c>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	0019      	movs	r1, r3
 8003774:	2308      	movs	r3, #8
 8003776:	408b      	lsls	r3, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	0800553c 	.word	0x0800553c
 800378c:	08005544 	.word	0x08005544

08003790 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4a05      	ldr	r2, [pc, #20]	@ (80037b4 <LL_TIM_SetClockSource+0x24>)
 80037a0:	401a      	ands	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	609a      	str	r2, [r3, #8]
}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	ffffbff8 	.word	0xffffbff8

080037b8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2270      	movs	r2, #112	@ 0x70
 80037c8:	4393      	bics	r3, r2
 80037ca:	001a      	movs	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]
}
 80037d4:	46c0      	nop			@ (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}

080037dc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2280      	movs	r2, #128	@ 0x80
 80037ea:	4393      	bics	r3, r2
 80037ec:	001a      	movs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]
}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b002      	add	sp, #8
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <MX_TIM22_Init>:

/* USER CODE END 0 */

/* TIM22 init function */
void MX_TIM22_Init(void)
{
 80037fc:	b5b0      	push	{r4, r5, r7, lr}
 80037fe:	b08e      	sub	sp, #56	@ 0x38
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003802:	2528      	movs	r5, #40	@ 0x28
 8003804:	197b      	adds	r3, r7, r5
 8003806:	0018      	movs	r0, r3
 8003808:	2310      	movs	r3, #16
 800380a:	001a      	movs	r2, r3
 800380c:	2100      	movs	r1, #0
 800380e:	f001 fbbf 	bl	8004f90 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003812:	2418      	movs	r4, #24
 8003814:	193b      	adds	r3, r7, r4
 8003816:	0018      	movs	r0, r3
 8003818:	2310      	movs	r3, #16
 800381a:	001a      	movs	r2, r3
 800381c:	2100      	movs	r1, #0
 800381e:	f001 fbb7 	bl	8004f90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003822:	003b      	movs	r3, r7
 8003824:	0018      	movs	r0, r3
 8003826:	2318      	movs	r3, #24
 8003828:	001a      	movs	r2, r3
 800382a:	2100      	movs	r1, #0
 800382c:	f001 fbb0 	bl	8004f90 <memset>
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM22);
 8003830:	2020      	movs	r0, #32
 8003832:	f7ff ff01 	bl	8003638 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003836:	197b      	adds	r3, r7, r5
 8003838:	2200      	movs	r2, #0
 800383a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800383c:	197b      	adds	r3, r7, r5
 800383e:	2200      	movs	r2, #0
 8003840:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8003842:	197b      	adds	r3, r7, r5
 8003844:	22fa      	movs	r2, #250	@ 0xfa
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800384a:	197b      	adds	r3, r7, r5
 800384c:	2200      	movs	r2, #0
 800384e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 8003850:	197b      	adds	r3, r7, r5
 8003852:	4a3d      	ldr	r2, [pc, #244]	@ (8003948 <MX_TIM22_Init+0x14c>)
 8003854:	0019      	movs	r1, r3
 8003856:	0010      	movs	r0, r2
 8003858:	f000 feec 	bl	8004634 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM22);
 800385c:	4b3a      	ldr	r3, [pc, #232]	@ (8003948 <MX_TIM22_Init+0x14c>)
 800385e:	0018      	movs	r0, r3
 8003860:	f7ff ff16 	bl	8003690 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003864:	4b38      	ldr	r3, [pc, #224]	@ (8003948 <MX_TIM22_Init+0x14c>)
 8003866:	2100      	movs	r1, #0
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ff91 	bl	8003790 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM22, LL_TIM_CHANNEL_CH1);
 800386e:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <MX_TIM22_Init+0x14c>)
 8003870:	2101      	movs	r1, #1
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff ff54 	bl	8003720 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003878:	193b      	adds	r3, r7, r4
 800387a:	2260      	movs	r2, #96	@ 0x60
 800387c:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800387e:	193b      	adds	r3, r7, r4
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8003884:	193b      	adds	r3, r7, r4
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 800388a:	193b      	adds	r3, r7, r4
 800388c:	2202      	movs	r2, #2
 800388e:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003890:	193b      	adds	r3, r7, r4
 8003892:	482d      	ldr	r0, [pc, #180]	@ (8003948 <MX_TIM22_Init+0x14c>)
 8003894:	001a      	movs	r2, r3
 8003896:	2101      	movs	r1, #1
 8003898:	f000 ff1e 	bl	80046d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM22, LL_TIM_CHANNEL_CH1);
 800389c:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <MX_TIM22_Init+0x14c>)
 800389e:	2101      	movs	r1, #1
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7ff ff05 	bl	80036b0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM22, LL_TIM_CHANNEL_CH2);
 80038a6:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <MX_TIM22_Init+0x14c>)
 80038a8:	2110      	movs	r1, #16
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff ff38 	bl	8003720 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80038b0:	193b      	adds	r3, r7, r4
 80038b2:	4825      	ldr	r0, [pc, #148]	@ (8003948 <MX_TIM22_Init+0x14c>)
 80038b4:	001a      	movs	r2, r3
 80038b6:	2110      	movs	r1, #16
 80038b8:	f000 ff0e 	bl	80046d8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM22, LL_TIM_CHANNEL_CH2);
 80038bc:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <MX_TIM22_Init+0x14c>)
 80038be:	2110      	movs	r1, #16
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7ff fef5 	bl	80036b0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM22, LL_TIM_TRGO_RESET);
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <MX_TIM22_Init+0x14c>)
 80038c8:	2100      	movs	r1, #0
 80038ca:	0018      	movs	r0, r3
 80038cc:	f7ff ff74 	bl	80037b8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM22);
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <MX_TIM22_Init+0x14c>)
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7ff ff82 	bl	80037dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80038d8:	2002      	movs	r0, #2
 80038da:	f7ff fec3 	bl	8003664 <LL_IOP_GRP1_EnableClock>
    /**TIM22 GPIO Configuration
    PB4     ------> TIM22_CH1
    PB5     ------> TIM22_CH2
    */
  GPIO_InitStruct.Pin = PWM1_Pin;
 80038de:	003b      	movs	r3, r7
 80038e0:	2210      	movs	r2, #16
 80038e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038e4:	003b      	movs	r3, r7
 80038e6:	2202      	movs	r2, #2
 80038e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80038ea:	003b      	movs	r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038f0:	003b      	movs	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038f6:	003b      	movs	r3, r7
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80038fc:	003b      	movs	r3, r7
 80038fe:	2204      	movs	r2, #4
 8003900:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8003902:	003b      	movs	r3, r7
 8003904:	4a11      	ldr	r2, [pc, #68]	@ (800394c <MX_TIM22_Init+0x150>)
 8003906:	0019      	movs	r1, r3
 8003908:	0010      	movs	r0, r2
 800390a:	f000 fbe3 	bl	80040d4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM2_Pin;
 800390e:	003b      	movs	r3, r7
 8003910:	2220      	movs	r2, #32
 8003912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003914:	003b      	movs	r3, r7
 8003916:	2202      	movs	r2, #2
 8003918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800391a:	003b      	movs	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003920:	003b      	movs	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003926:	003b      	movs	r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800392c:	003b      	movs	r3, r7
 800392e:	2204      	movs	r2, #4
 8003930:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8003932:	003b      	movs	r3, r7
 8003934:	4a05      	ldr	r2, [pc, #20]	@ (800394c <MX_TIM22_Init+0x150>)
 8003936:	0019      	movs	r1, r3
 8003938:	0010      	movs	r0, r2
 800393a:	f000 fbcb 	bl	80040d4 <LL_GPIO_Init>

}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b00e      	add	sp, #56	@ 0x38
 8003944:	bdb0      	pop	{r4, r5, r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	40011400 	.word	0x40011400
 800394c:	50000400 	.word	0x50000400

08003950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	0002      	movs	r2, r0
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800395c:	1dfb      	adds	r3, r7, #7
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b7f      	cmp	r3, #127	@ 0x7f
 8003962:	d809      	bhi.n	8003978 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	001a      	movs	r2, r3
 800396a:	231f      	movs	r3, #31
 800396c:	401a      	ands	r2, r3
 800396e:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <__NVIC_EnableIRQ+0x30>)
 8003970:	2101      	movs	r1, #1
 8003972:	4091      	lsls	r1, r2
 8003974:	000a      	movs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
  }
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	0002      	movs	r2, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b7f      	cmp	r3, #127	@ 0x7f
 8003998:	d828      	bhi.n	80039ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800399a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a58 <__NVIC_SetPriority+0xd4>)
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	33c0      	adds	r3, #192	@ 0xc0
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	589b      	ldr	r3, [r3, r2]
 80039aa:	1dfa      	adds	r2, r7, #7
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	0011      	movs	r1, r2
 80039b0:	2203      	movs	r2, #3
 80039b2:	400a      	ands	r2, r1
 80039b4:	00d2      	lsls	r2, r2, #3
 80039b6:	21ff      	movs	r1, #255	@ 0xff
 80039b8:	4091      	lsls	r1, r2
 80039ba:	000a      	movs	r2, r1
 80039bc:	43d2      	mvns	r2, r2
 80039be:	401a      	ands	r2, r3
 80039c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	22ff      	movs	r2, #255	@ 0xff
 80039c8:	401a      	ands	r2, r3
 80039ca:	1dfb      	adds	r3, r7, #7
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	2303      	movs	r3, #3
 80039d2:	4003      	ands	r3, r0
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d8:	481f      	ldr	r0, [pc, #124]	@ (8003a58 <__NVIC_SetPriority+0xd4>)
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	430a      	orrs	r2, r1
 80039e4:	33c0      	adds	r3, #192	@ 0xc0
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ea:	e031      	b.n	8003a50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ec:	4a1b      	ldr	r2, [pc, #108]	@ (8003a5c <__NVIC_SetPriority+0xd8>)
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	0019      	movs	r1, r3
 80039f4:	230f      	movs	r3, #15
 80039f6:	400b      	ands	r3, r1
 80039f8:	3b08      	subs	r3, #8
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	3306      	adds	r3, #6
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	3304      	adds	r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1dfa      	adds	r2, r7, #7
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	400a      	ands	r2, r1
 8003a10:	00d2      	lsls	r2, r2, #3
 8003a12:	21ff      	movs	r1, #255	@ 0xff
 8003a14:	4091      	lsls	r1, r2
 8003a16:	000a      	movs	r2, r1
 8003a18:	43d2      	mvns	r2, r2
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	22ff      	movs	r2, #255	@ 0xff
 8003a24:	401a      	ands	r2, r3
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	4003      	ands	r3, r0
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a34:	4809      	ldr	r0, [pc, #36]	@ (8003a5c <__NVIC_SetPriority+0xd8>)
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	001c      	movs	r4, r3
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	4023      	ands	r3, r4
 8003a40:	3b08      	subs	r3, #8
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	430a      	orrs	r2, r1
 8003a46:	3306      	adds	r3, #6
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	18c3      	adds	r3, r0, r3
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	601a      	str	r2, [r3, #0]
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b003      	add	sp, #12
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	e000e100 	.word	0xe000e100
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <LL_APB1_GRP1_EnableClock>:
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003a68:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <LL_APB1_GRP1_EnableClock+0x28>)
 8003a6a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <LL_APB1_GRP1_EnableClock+0x28>)
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <LL_APB1_GRP1_EnableClock+0x28>)
 8003a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000

08003a8c <LL_IOP_GRP1_EnableClock>:
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <LL_IOP_GRP1_EnableClock+0x28>)
 8003a96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <LL_IOP_GRP1_EnableClock+0x28>)
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <LL_IOP_GRP1_EnableClock+0x28>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b004      	add	sp, #16
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <LL_USART_Enable>:
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <LL_USART_ConfigAsyncMode>:
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a07      	ldr	r2, [pc, #28]	@ (8003b00 <LL_USART_ConfigAsyncMode+0x2c>)
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	222a      	movs	r2, #42	@ 0x2a
 8003aee:	4393      	bics	r3, r2
 8003af0:	001a      	movs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	ffffb7ff 	.word	0xffffb7ff

08003b04 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b08f      	sub	sp, #60	@ 0x3c
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003b0a:	241c      	movs	r4, #28
 8003b0c:	193b      	adds	r3, r7, r4
 8003b0e:	0018      	movs	r0, r3
 8003b10:	231c      	movs	r3, #28
 8003b12:	001a      	movs	r2, r3
 8003b14:	2100      	movs	r1, #0
 8003b16:	f001 fa3b 	bl	8004f90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	2318      	movs	r3, #24
 8003b20:	001a      	movs	r2, r3
 8003b22:	2100      	movs	r1, #0
 8003b24:	f001 fa34 	bl	8004f90 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	029b      	lsls	r3, r3, #10
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7ff ff97 	bl	8003a60 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8003b32:	2001      	movs	r0, #1
 8003b34:	f7ff ffaa 	bl	8003a8c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	2202      	movs	r2, #2
 8003b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	2203      	movs	r2, #3
 8003b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	2204      	movs	r2, #4
 8003b5a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8003b5c:	1d3a      	adds	r2, r7, #4
 8003b5e:	23a0      	movs	r3, #160	@ 0xa0
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 fab5 	bl	80040d4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2202      	movs	r2, #2
 8003b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2203      	movs	r2, #3
 8003b7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8003b8e:	1d3a      	adds	r2, r7, #4
 8003b90:	23a0      	movs	r3, #160	@ 0xa0
 8003b92:	05db      	lsls	r3, r3, #23
 8003b94:	0011      	movs	r1, r2
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 fa9c 	bl	80040d4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	201c      	movs	r0, #28
 8003ba0:	f7ff fef0 	bl	8003984 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003ba4:	201c      	movs	r0, #28
 8003ba6:	f7ff fed3 	bl	8003950 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	22e1      	movs	r2, #225	@ 0xe1
 8003bae:	0252      	lsls	r2, r2, #9
 8003bb0:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003bb2:	0021      	movs	r1, r4
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	220c      	movs	r2, #12
 8003bca:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2200      	movs	r2, #0
 8003bd0:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	4a08      	ldr	r2, [pc, #32]	@ (8003bfc <MX_USART2_UART_Init+0xf8>)
 8003bdc:	0019      	movs	r1, r3
 8003bde:	0010      	movs	r0, r2
 8003be0:	f000 ff74 	bl	8004acc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <MX_USART2_UART_Init+0xf8>)
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff ff74 	bl	8003ad4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <MX_USART2_UART_Init+0xf8>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f7ff ff62 	bl	8003ab8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bf4:	46c0      	nop			@ (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b00f      	add	sp, #60	@ 0x3c
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	40004400 	.word	0x40004400

08003c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003c00:	480d      	ldr	r0, [pc, #52]	@ (8003c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c04:	480d      	ldr	r0, [pc, #52]	@ (8003c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003c06:	490e      	ldr	r1, [pc, #56]	@ (8003c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c08:	4a0e      	ldr	r2, [pc, #56]	@ (8003c44 <LoopForever+0xe>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c0c:	e002      	b.n	8003c14 <LoopCopyDataInit>

08003c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c12:	3304      	adds	r3, #4

08003c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c18:	d3f9      	bcc.n	8003c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c1c:	4c0b      	ldr	r4, [pc, #44]	@ (8003c4c <LoopForever+0x16>)
  movs r3, #0
 8003c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c20:	e001      	b.n	8003c26 <LoopFillZerobss>

08003c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c24:	3204      	adds	r2, #4

08003c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c28:	d3fb      	bcc.n	8003c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c2a:	f7ff fcff 	bl	800362c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c2e:	f001 fa0b 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c32:	f7fe fce9 	bl	8002608 <main>

08003c36 <LoopForever>:

LoopForever:
    b LoopForever
 8003c36:	e7fe      	b.n	8003c36 <LoopForever>
  ldr   r0, =_estack
 8003c38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003c44:	08005554 	.word	0x08005554
  ldr r2, =_sbss
 8003c48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003c4c:	20000404 	.word	0x20000404

08003c50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c50:	e7fe      	b.n	8003c50 <ADC1_COMP_IRQHandler>

08003c52 <LL_ADC_IsEnabled>:
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4013      	ands	r3, r2
 8003c62:	3b01      	subs	r3, #1
 8003c64:	425a      	negs	r2, r3
 8003c66:	4153      	adcs	r3, r2
 8003c68:	b2db      	uxtb	r3, r3
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003c7e:	230f      	movs	r3, #15
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff ffe2 	bl	8003c52 <LL_ADC_IsEnabled>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d118      	bne.n	8003cc4 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4a11      	ldr	r2, [pc, #68]	@ (8003cdc <LL_ADC_Init+0x68>)
 8003c98:	401a      	ands	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	4319      	orrs	r1, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	089a      	lsrs	r2, r3, #2
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	611a      	str	r2, [r3, #16]
 8003cc2:	e003      	b.n	8003ccc <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003ccc:	230f      	movs	r3, #15
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	ffff3fc7 	.word	0xffff3fc7

08003ce0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003cea:	230f      	movs	r3, #15
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ffac 	bl	8003c52 <LL_ADC_IsEnabled>
 8003cfa:	1e03      	subs	r3, r0, #0
 8003cfc:	d115      	bne.n	8003d2a <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4a0f      	ldr	r2, [pc, #60]	@ (8003d40 <LL_ADC_REG_Init+0x60>)
 8003d04:	401a      	ands	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4319      	orrs	r1, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4319      	orrs	r1, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4319      	orrs	r1, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	e003      	b.n	8003d32 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003d32:	230f      	movs	r3, #15
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b004      	add	sp, #16
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	fffec23c 	.word	0xfffec23c

08003d44 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003d4c:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <LL_EXTI_EnableIT_0_31+0x1c>)
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <LL_EXTI_EnableIT_0_31+0x1c>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40010400 	.word	0x40010400

08003d64 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <LL_EXTI_DisableIT_0_31+0x20>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	4b03      	ldr	r3, [pc, #12]	@ (8003d84 <LL_EXTI_DisableIT_0_31+0x20>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	40010400 	.word	0x40010400

08003d88 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]

}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40010400 	.word	0x40010400

08003da8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	40010400 	.word	0x40010400

08003dcc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]

}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40010400 	.word	0x40010400

08003dec <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]

}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b002      	add	sp, #8
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			@ (mov r8, r8)
 8003e0c:	40010400 	.word	0x40010400

08003e10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003e18:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	60da      	str	r2, [r3, #12]
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40010400 	.word	0x40010400

08003e30 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	43d9      	mvns	r1, r3
 8003e40:	4b03      	ldr	r3, [pc, #12]	@ (8003e50 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003e42:	400a      	ands	r2, r1
 8003e44:	60da      	str	r2, [r3, #12]
}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	40010400 	.word	0x40010400

08003e54 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	791b      	ldrb	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d100      	bne.n	8003e6e <LL_EXTI_Init+0x1a>
 8003e6c:	e068      	b.n	8003f40 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d100      	bne.n	8003e78 <LL_EXTI_Init+0x24>
 8003e76:	e06d      	b.n	8003f54 <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	795b      	ldrb	r3, [r3, #5]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d01b      	beq.n	8003eb8 <LL_EXTI_Init+0x64>
 8003e80:	dc25      	bgt.n	8003ece <LL_EXTI_Init+0x7a>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <LL_EXTI_Init+0x38>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d00b      	beq.n	8003ea2 <LL_EXTI_Init+0x4e>
 8003e8a:	e020      	b.n	8003ece <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff ff89 	bl	8003da8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff ff52 	bl	8003d44 <LL_EXTI_EnableIT_0_31>
          break;
 8003ea0:	e01a      	b.n	8003ed8 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff ff5c 	bl	8003d64 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff69 	bl	8003d88 <LL_EXTI_EnableEvent_0_31>
          break;
 8003eb6:	e00f      	b.n	8003ed8 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7ff ff41 	bl	8003d44 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff ff5e 	bl	8003d88 <LL_EXTI_EnableEvent_0_31>
          break;
 8003ecc:	e004      	b.n	8003ed8 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8003ece:	230f      	movs	r3, #15
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
          break;
 8003ed6:	46c0      	nop			@ (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	799b      	ldrb	r3, [r3, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d039      	beq.n	8003f54 <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	799b      	ldrb	r3, [r3, #6]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d01b      	beq.n	8003f20 <LL_EXTI_Init+0xcc>
 8003ee8:	dc25      	bgt.n	8003f36 <LL_EXTI_Init+0xe2>
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d002      	beq.n	8003ef4 <LL_EXTI_Init+0xa0>
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d00b      	beq.n	8003f0a <LL_EXTI_Init+0xb6>
 8003ef2:	e020      	b.n	8003f36 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7ff ff99 	bl	8003e30 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff ff62 	bl	8003dcc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003f08:	e024      	b.n	8003f54 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff ff6c 	bl	8003dec <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff ff79 	bl	8003e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003f1e:	e019      	b.n	8003f54 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff ff51 	bl	8003dcc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7ff ff6e 	bl	8003e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003f34:	e00e      	b.n	8003f54 <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 8003f36:	230f      	movs	r3, #15
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
            break;
 8003f3e:	e009      	b.n	8003f54 <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff ff0d 	bl	8003d64 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7ff ff2a 	bl	8003da8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	781b      	ldrb	r3, [r3, #0]
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <LL_GPIO_SetPinMode>:
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	435b      	muls	r3, r3
 8003f76:	001a      	movs	r2, r3
 8003f78:	0013      	movs	r3, r2
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	400b      	ands	r3, r1
 8003f82:	001a      	movs	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	435b      	muls	r3, r3
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	434b      	muls	r3, r1
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b004      	add	sp, #16
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <LL_GPIO_SetPinOutputType>:
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	43d2      	mvns	r2, r2
 8003fae:	401a      	ands	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	434b      	muls	r3, r1
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
}
 8003fbc:	46c0      	nop			@ (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b004      	add	sp, #16
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <LL_GPIO_SetPinSpeed>:
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6899      	ldr	r1, [r3, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	435b      	muls	r3, r3
 8003fd8:	001a      	movs	r2, r3
 8003fda:	0013      	movs	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	400b      	ands	r3, r1
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	435b      	muls	r3, r3
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	434b      	muls	r3, r1
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <LL_GPIO_SetPinPull>:
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68d9      	ldr	r1, [r3, #12]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	435b      	muls	r3, r3
 8004010:	001a      	movs	r2, r3
 8004012:	0013      	movs	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	189b      	adds	r3, r3, r2
 8004018:	43db      	mvns	r3, r3
 800401a:	400b      	ands	r3, r1
 800401c:	001a      	movs	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	435b      	muls	r3, r3
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	434b      	muls	r3, r1
 8004026:	431a      	orrs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	60da      	str	r2, [r3, #12]
}
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b004      	add	sp, #16
 8004032:	bd80      	pop	{r7, pc}

08004034 <LL_GPIO_SetAFPin_0_7>:
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a19      	ldr	r1, [r3, #32]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	435b      	muls	r3, r3
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	4353      	muls	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	435a      	muls	r2, r3
 8004050:	0013      	movs	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	43db      	mvns	r3, r3
 8004058:	400b      	ands	r3, r1
 800405a:	001a      	movs	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	435b      	muls	r3, r3
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	434b      	muls	r3, r1
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	434b      	muls	r3, r1
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	434b      	muls	r3, r1
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}

0800407a <LL_GPIO_SetAFPin_8_15>:
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0a12      	lsrs	r2, r2, #8
 8004092:	4353      	muls	r3, r2
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	0a12      	lsrs	r2, r2, #8
 8004098:	4353      	muls	r3, r2
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	0a12      	lsrs	r2, r2, #8
 800409e:	435a      	muls	r2, r3
 80040a0:	0013      	movs	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	43db      	mvns	r3, r3
 80040a8:	400b      	ands	r3, r1
 80040aa:	001a      	movs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	0a09      	lsrs	r1, r1, #8
 80040b4:	434b      	muls	r3, r1
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	0a09      	lsrs	r1, r1, #8
 80040ba:	434b      	muls	r3, r1
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	0a09      	lsrs	r1, r1, #8
 80040c0:	434b      	muls	r3, r1
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	434b      	muls	r3, r1
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80040cc:	46c0      	nop			@ (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80040e6:	e048      	b.n	800417a <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4091      	lsls	r1, r2
 80040f2:	000a      	movs	r2, r1
 80040f4:	4013      	ands	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d03a      	beq.n	8004174 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <LL_GPIO_Init+0x3a>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d10e      	bne.n	800412c <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0018      	movs	r0, r3
 8004118:	f7ff ff54 	bl	8003fc4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff ff37 	bl	8003f9a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff ff61 	bl	8003ffc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d111      	bne.n	8004166 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2bff      	cmp	r3, #255	@ 0xff
 8004146:	d807      	bhi.n	8004158 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff ff6f 	bl	8004034 <LL_GPIO_SetAFPin_0_7>
 8004156:	e006      	b.n	8004166 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff ff8a 	bl	800407a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff fef7 	bl	8003f62 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3301      	adds	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	40da      	lsrs	r2, r3
 8004182:	1e13      	subs	r3, r2, #0
 8004184:	d1b0      	bne.n	80040e8 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b004      	add	sp, #16
 800418e:	bd80      	pop	{r7, pc}

08004190 <LL_RCC_HSI_IsReady>:
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <LL_RCC_HSI_IsReady+0x1c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2204      	movs	r2, #4
 800419a:	4013      	ands	r3, r2
 800419c:	2b04      	cmp	r3, #4
 800419e:	d101      	bne.n	80041a4 <LL_RCC_HSI_IsReady+0x14>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <LL_RCC_HSI_IsReady+0x16>
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000

080041b0 <LL_RCC_LSE_IsReady>:
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80041b4:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <LL_RCC_LSE_IsReady+0x24>)
 80041b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	401a      	ands	r2, r3
 80041be:	2380      	movs	r3, #128	@ 0x80
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d101      	bne.n	80041ca <LL_RCC_LSE_IsReady+0x1a>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <LL_RCC_LSE_IsReady+0x1c>
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000

080041d8 <LL_RCC_MSI_GetRange>:
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <LL_RCC_MSI_GetRange+0x14>)
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	23e0      	movs	r3, #224	@ 0xe0
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	4013      	ands	r3, r2
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000

080041f0 <LL_RCC_GetSysClkSource>:
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <LL_RCC_GetSysClkSource+0x14>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	220c      	movs	r2, #12
 80041fa:	4013      	ands	r3, r2
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	40021000 	.word	0x40021000

08004208 <LL_RCC_GetAHBPrescaler>:
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <LL_RCC_GetAHBPrescaler+0x14>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	22f0      	movs	r2, #240	@ 0xf0
 8004212:	4013      	ands	r3, r2
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	40021000 	.word	0x40021000

08004220 <LL_RCC_GetAPB1Prescaler>:
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	23e0      	movs	r3, #224	@ 0xe0
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4013      	ands	r3, r2
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000

08004238 <LL_RCC_GetAPB2Prescaler>:
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800423c:	4b03      	ldr	r3, [pc, #12]	@ (800424c <LL_RCC_GetAPB2Prescaler+0x14>)
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	23e0      	movs	r3, #224	@ 0xe0
 8004242:	019b      	lsls	r3, r3, #6
 8004244:	4013      	ands	r3, r2
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000

08004250 <LL_RCC_GetUSARTClockSource>:
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <LL_RCC_GetUSARTClockSource+0x20>)
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	401a      	ands	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	4313      	orrs	r3, r2
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b002      	add	sp, #8
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	40021000 	.word	0x40021000

08004274 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <LL_RCC_PLL_GetMainSource+0x14>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	025b      	lsls	r3, r3, #9
 8004280:	4013      	ands	r3, r2
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000

0800428c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	23f0      	movs	r3, #240	@ 0xf0
 8004296:	039b      	lsls	r3, r3, #14
 8004298:	4013      	ands	r3, r2
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000

080042a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <LL_RCC_PLL_GetDivider+0x14>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	23c0      	movs	r3, #192	@ 0xc0
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	4013      	ands	r3, r2
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000

080042bc <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2210      	movs	r2, #16
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d101      	bne.n	80042d0 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000

080042dc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d13c      	bne.n	8004368 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7ff ffad 	bl	8004250 <LL_RCC_GetUSARTClockSource>
 80042f6:	0003      	movs	r3, r0
 80042f8:	4a3e      	ldr	r2, [pc, #248]	@ (80043f4 <LL_RCC_GetUSARTClockFreq+0x118>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01c      	beq.n	8004338 <LL_RCC_GetUSARTClockFreq+0x5c>
 80042fe:	4a3d      	ldr	r2, [pc, #244]	@ (80043f4 <LL_RCC_GetUSARTClockFreq+0x118>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d821      	bhi.n	8004348 <LL_RCC_GetUSARTClockFreq+0x6c>
 8004304:	4a3c      	ldr	r2, [pc, #240]	@ (80043f8 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <LL_RCC_GetUSARTClockFreq+0x36>
 800430a:	4a3c      	ldr	r2, [pc, #240]	@ (80043fc <LL_RCC_GetUSARTClockFreq+0x120>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d005      	beq.n	800431c <LL_RCC_GetUSARTClockFreq+0x40>
 8004310:	e01a      	b.n	8004348 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004312:	f000 f87f 	bl	8004414 <RCC_GetSystemClockFreq>
 8004316:	0003      	movs	r3, r0
 8004318:	60fb      	str	r3, [r7, #12]
        break;
 800431a:	e025      	b.n	8004368 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800431c:	f7ff ff38 	bl	8004190 <LL_RCC_HSI_IsReady>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d01e      	beq.n	8004362 <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8004324:	f7ff ffca 	bl	80042bc <LL_RCC_IsActiveFlag_HSIDIV>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d002      	beq.n	8004332 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 800432c:	4b34      	ldr	r3, [pc, #208]	@ (8004400 <LL_RCC_GetUSARTClockFreq+0x124>)
 800432e:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8004330:	e017      	b.n	8004362 <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 8004332:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <LL_RCC_GetUSARTClockFreq+0x128>)
 8004334:	60fb      	str	r3, [r7, #12]
        break;
 8004336:	e014      	b.n	8004362 <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004338:	f7ff ff3a 	bl	80041b0 <LL_RCC_LSE_IsReady>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d012      	beq.n	8004366 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004346:	e00e      	b.n	8004366 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004348:	f000 f864 	bl	8004414 <RCC_GetSystemClockFreq>
 800434c:	0003      	movs	r3, r0
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f8a4 	bl	800449c <RCC_GetHCLKClockFreq>
 8004354:	0003      	movs	r3, r0
 8004356:	0018      	movs	r0, r3
 8004358:	f000 f8ca 	bl	80044f0 <RCC_GetPCLK2ClockFreq>
 800435c:	0003      	movs	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]
        break;
 8004360:	e002      	b.n	8004368 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	e000      	b.n	8004368 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8004366:	46c0      	nop			@ (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d13c      	bne.n	80043e8 <LL_RCC_GetUSARTClockFreq+0x10c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f7ff ff6d 	bl	8004250 <LL_RCC_GetUSARTClockSource>
 8004376:	0003      	movs	r3, r0
 8004378:	4a23      	ldr	r2, [pc, #140]	@ (8004408 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01c      	beq.n	80043b8 <LL_RCC_GetUSARTClockFreq+0xdc>
 800437e:	4a22      	ldr	r2, [pc, #136]	@ (8004408 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d821      	bhi.n	80043c8 <LL_RCC_GetUSARTClockFreq+0xec>
 8004384:	4a21      	ldr	r2, [pc, #132]	@ (800440c <LL_RCC_GetUSARTClockFreq+0x130>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <LL_RCC_GetUSARTClockFreq+0xb6>
 800438a:	4a21      	ldr	r2, [pc, #132]	@ (8004410 <LL_RCC_GetUSARTClockFreq+0x134>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d005      	beq.n	800439c <LL_RCC_GetUSARTClockFreq+0xc0>
 8004390:	e01a      	b.n	80043c8 <LL_RCC_GetUSARTClockFreq+0xec>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004392:	f000 f83f 	bl	8004414 <RCC_GetSystemClockFreq>
 8004396:	0003      	movs	r3, r0
 8004398:	60fb      	str	r3, [r7, #12]
        break;
 800439a:	e025      	b.n	80043e8 <LL_RCC_GetUSARTClockFreq+0x10c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800439c:	f7ff fef8 	bl	8004190 <LL_RCC_HSI_IsReady>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d01e      	beq.n	80043e2 <LL_RCC_GetUSARTClockFreq+0x106>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80043a4:	f7ff ff8a 	bl	80042bc <LL_RCC_IsActiveFlag_HSIDIV>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d002      	beq.n	80043b2 <LL_RCC_GetUSARTClockFreq+0xd6>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80043ac:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <LL_RCC_GetUSARTClockFreq+0x124>)
 80043ae:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80043b0:	e017      	b.n	80043e2 <LL_RCC_GetUSARTClockFreq+0x106>
            usart_frequency = HSI_VALUE;
 80043b2:	4b14      	ldr	r3, [pc, #80]	@ (8004404 <LL_RCC_GetUSARTClockFreq+0x128>)
 80043b4:	60fb      	str	r3, [r7, #12]
        break;
 80043b6:	e014      	b.n	80043e2 <LL_RCC_GetUSARTClockFreq+0x106>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80043b8:	f7ff fefa 	bl	80041b0 <LL_RCC_LSE_IsReady>
 80043bc:	1e03      	subs	r3, r0, #0
 80043be:	d012      	beq.n	80043e6 <LL_RCC_GetUSARTClockFreq+0x10a>
        {
          usart_frequency = LSE_VALUE;
 80043c0:	2380      	movs	r3, #128	@ 0x80
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80043c6:	e00e      	b.n	80043e6 <LL_RCC_GetUSARTClockFreq+0x10a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80043c8:	f000 f824 	bl	8004414 <RCC_GetSystemClockFreq>
 80043cc:	0003      	movs	r3, r0
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 f864 	bl	800449c <RCC_GetHCLKClockFreq>
 80043d4:	0003      	movs	r3, r0
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 f876 	bl	80044c8 <RCC_GetPCLK1ClockFreq>
 80043dc:	0003      	movs	r3, r0
 80043de:	60fb      	str	r3, [r7, #12]
        break;
 80043e0:	e002      	b.n	80043e8 <LL_RCC_GetUSARTClockFreq+0x10c>
        break;
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	e000      	b.n	80043e8 <LL_RCC_GetUSARTClockFreq+0x10c>
        break;
 80043e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 80043e8:	68fb      	ldr	r3, [r7, #12]
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b004      	add	sp, #16
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	00030003 	.word	0x00030003
 80043f8:	00030001 	.word	0x00030001
 80043fc:	00030002 	.word	0x00030002
 8004400:	003d0900 	.word	0x003d0900
 8004404:	00f42400 	.word	0x00f42400
 8004408:	000c000c 	.word	0x000c000c
 800440c:	000c0004 	.word	0x000c0004
 8004410:	000c0008 	.word	0x000c0008

08004414 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800441a:	f7ff fee9 	bl	80041f0 <LL_RCC_GetSysClkSource>
 800441e:	0003      	movs	r3, r0
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d020      	beq.n	8004466 <RCC_GetSystemClockFreq+0x52>
 8004424:	d824      	bhi.n	8004470 <RCC_GetSystemClockFreq+0x5c>
 8004426:	2b08      	cmp	r3, #8
 8004428:	d01a      	beq.n	8004460 <RCC_GetSystemClockFreq+0x4c>
 800442a:	d821      	bhi.n	8004470 <RCC_GetSystemClockFreq+0x5c>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <RCC_GetSystemClockFreq+0x22>
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00b      	beq.n	800444c <RCC_GetSystemClockFreq+0x38>
 8004434:	e01c      	b.n	8004470 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004436:	f7ff fecf 	bl	80041d8 <LL_RCC_MSI_GetRange>
 800443a:	0003      	movs	r3, r0
 800443c:	0b5b      	lsrs	r3, r3, #13
 800443e:	3301      	adds	r3, #1
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	0212      	lsls	r2, r2, #8
 8004444:	409a      	lsls	r2, r3
 8004446:	0013      	movs	r3, r2
 8004448:	607b      	str	r3, [r7, #4]
      break;
 800444a:	e01c      	b.n	8004486 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800444c:	f7ff ff36 	bl	80042bc <LL_RCC_IsActiveFlag_HSIDIV>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d002      	beq.n	800445a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8004454:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <RCC_GetSystemClockFreq+0x7c>)
 8004456:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8004458:	e015      	b.n	8004486 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800445a:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <RCC_GetSystemClockFreq+0x80>)
 800445c:	607b      	str	r3, [r7, #4]
      break;
 800445e:	e012      	b.n	8004486 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8004460:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <RCC_GetSystemClockFreq+0x84>)
 8004462:	607b      	str	r3, [r7, #4]
      break;
 8004464:	e00f      	b.n	8004486 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004466:	f000 f857 	bl	8004518 <RCC_PLL_GetFreqDomain_SYS>
 800446a:	0003      	movs	r3, r0
 800446c:	607b      	str	r3, [r7, #4]
      break;
 800446e:	e00a      	b.n	8004486 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004470:	f7ff feb2 	bl	80041d8 <LL_RCC_MSI_GetRange>
 8004474:	0003      	movs	r3, r0
 8004476:	0b5b      	lsrs	r3, r3, #13
 8004478:	3301      	adds	r3, #1
 800447a:	2280      	movs	r2, #128	@ 0x80
 800447c:	0212      	lsls	r2, r2, #8
 800447e:	409a      	lsls	r2, r3
 8004480:	0013      	movs	r3, r2
 8004482:	607b      	str	r3, [r7, #4]
      break;
 8004484:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 8004486:	687b      	ldr	r3, [r7, #4]
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b002      	add	sp, #8
 800448e:	bd80      	pop	{r7, pc}
 8004490:	003d0900 	.word	0x003d0900
 8004494:	00f42400 	.word	0x00f42400
 8004498:	007a1200 	.word	0x007a1200

0800449c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80044a4:	f7ff feb0 	bl	8004208 <LL_RCC_GetAHBPrescaler>
 80044a8:	0003      	movs	r3, r0
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	220f      	movs	r2, #15
 80044ae:	4013      	ands	r3, r2
 80044b0:	4a04      	ldr	r2, [pc, #16]	@ (80044c4 <RCC_GetHCLKClockFreq+0x28>)
 80044b2:	5cd3      	ldrb	r3, [r2, r3]
 80044b4:	001a      	movs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	40d3      	lsrs	r3, r2
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	08005518 	.word	0x08005518

080044c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80044d0:	f7ff fea6 	bl	8004220 <LL_RCC_GetAPB1Prescaler>
 80044d4:	0003      	movs	r3, r0
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <RCC_GetPCLK1ClockFreq+0x24>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	001a      	movs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	40d3      	lsrs	r3, r2
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b002      	add	sp, #8
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	08005528 	.word	0x08005528

080044f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80044f8:	f7ff fe9e 	bl	8004238 <LL_RCC_GetAPB2Prescaler>
 80044fc:	0003      	movs	r3, r0
 80044fe:	0adb      	lsrs	r3, r3, #11
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <RCC_GetPCLK2ClockFreq+0x24>)
 8004502:	5cd3      	ldrb	r3, [r2, r3]
 8004504:	001a      	movs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	40d3      	lsrs	r3, r2
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	08005528 	.word	0x08005528

08004518 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800451e:	f7ff fea9 	bl	8004274 <LL_RCC_PLL_GetMainSource>
 8004522:	0003      	movs	r3, r0
 8004524:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800452c:	f7ff fec6 	bl	80042bc <LL_RCC_IsActiveFlag_HSIDIV>
 8004530:	1e03      	subs	r3, r0, #0
 8004532:	d002      	beq.n	800453a <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8004534:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004536:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8004538:	e005      	b.n	8004546 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800453a:	4b10      	ldr	r3, [pc, #64]	@ (800457c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800453c:	607b      	str	r3, [r7, #4]
      break;
 800453e:	e002      	b.n	8004546 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004540:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8004542:	607b      	str	r3, [r7, #4]
      break;
 8004544:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8004546:	f7ff fea1 	bl	800428c <LL_RCC_PLL_GetMultiplicator>
 800454a:	0003      	movs	r3, r0
 800454c:	0c9b      	lsrs	r3, r3, #18
 800454e:	4a0d      	ldr	r2, [pc, #52]	@ (8004584 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	001a      	movs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4353      	muls	r3, r2
 8004558:	001c      	movs	r4, r3
 800455a:	f7ff fea3 	bl	80042a4 <LL_RCC_PLL_GetDivider>
 800455e:	0003      	movs	r3, r0
 8004560:	0d9b      	lsrs	r3, r3, #22
 8004562:	3301      	adds	r3, #1
 8004564:	0019      	movs	r1, r3
 8004566:	0020      	movs	r0, r4
 8004568:	f7fb fdce 	bl	8000108 <__udivsi3>
 800456c:	0003      	movs	r3, r0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b003      	add	sp, #12
 8004574:	bd90      	pop	{r4, r7, pc}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	003d0900 	.word	0x003d0900
 800457c:	00f42400 	.word	0x00f42400
 8004580:	007a1200 	.word	0x007a1200
 8004584:	08005530 	.word	0x08005530

08004588 <LL_TIM_SetPrescaler>:
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004598:	46c0      	nop			@ (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b002      	add	sp, #8
 800459e:	bd80      	pop	{r7, pc}

080045a0 <LL_TIM_SetAutoReload>:
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <LL_TIM_OC_SetCompareCH1>:
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80045c8:	46c0      	nop			@ (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <LL_TIM_OC_SetCompareCH2>:
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80045e0:	46c0      	nop			@ (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b002      	add	sp, #8
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <LL_TIM_OC_SetCompareCH3>:
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b002      	add	sp, #8
 80045fe:	bd80      	pop	{r7, pc}

08004600 <LL_TIM_OC_SetCompareCH4>:
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004610:	46c0      	nop			@ (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	b002      	add	sp, #8
 8004616:	bd80      	pop	{r7, pc}

08004618 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2201      	movs	r2, #1
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	615a      	str	r2, [r3, #20]
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	2380      	movs	r3, #128	@ 0x80
 8004648:	05db      	lsls	r3, r3, #23
 800464a:	429a      	cmp	r2, r3
 800464c:	d007      	beq.n	800465e <LL_TIM_Init+0x2a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <LL_TIM_Init+0x98>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <LL_TIM_Init+0x2a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <LL_TIM_Init+0x9c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d107      	bne.n	800466e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2270      	movs	r2, #112	@ 0x70
 8004662:	4393      	bics	r3, r2
 8004664:	001a      	movs	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	05db      	lsls	r3, r3, #23
 8004674:	429a      	cmp	r2, r3
 8004676:	d007      	beq.n	8004688 <LL_TIM_Init+0x54>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <LL_TIM_Init+0x98>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <LL_TIM_Init+0x54>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a13      	ldr	r2, [pc, #76]	@ (80046d0 <LL_TIM_Init+0x9c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d106      	bne.n	8004696 <LL_TIM_Init+0x62>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <LL_TIM_Init+0xa0>)
 800468c:	401a      	ands	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7ff ff7b 	bl	80045a0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	001a      	movs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0011      	movs	r1, r2
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7ff ff67 	bl	8004588 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f7ff ffab 	bl	8004618 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b004      	add	sp, #16
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40010800 	.word	0x40010800
 80046d0:	40011400 	.word	0x40011400
 80046d4:	fffffcff 	.word	0xfffffcff

080046d8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80046e4:	2317      	movs	r3, #23
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	015b      	lsls	r3, r3, #5
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d036      	beq.n	8004764 <LL_TIM_OC_Init+0x8c>
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	015b      	lsls	r3, r3, #5
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d83c      	bhi.n	800477a <LL_TIM_OC_Init+0xa2>
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	429a      	cmp	r2, r3
 8004708:	d021      	beq.n	800474e <LL_TIM_OC_Init+0x76>
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	429a      	cmp	r2, r3
 8004712:	d832      	bhi.n	800477a <LL_TIM_OC_Init+0xa2>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d003      	beq.n	8004722 <LL_TIM_OC_Init+0x4a>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b10      	cmp	r3, #16
 800471e:	d00b      	beq.n	8004738 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004720:	e02b      	b.n	800477a <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004722:	2317      	movs	r3, #23
 8004724:	18fc      	adds	r4, r7, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0011      	movs	r1, r2
 800472c:	0018      	movs	r0, r3
 800472e:	f000 f82c 	bl	800478a <OC1Config>
 8004732:	0003      	movs	r3, r0
 8004734:	7023      	strb	r3, [r4, #0]
      break;
 8004736:	e021      	b.n	800477c <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004738:	2317      	movs	r3, #23
 800473a:	18fc      	adds	r4, r7, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	0011      	movs	r1, r2
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f868 	bl	8004818 <OC2Config>
 8004748:	0003      	movs	r3, r0
 800474a:	7023      	strb	r3, [r4, #0]
      break;
 800474c:	e016      	b.n	800477c <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800474e:	2317      	movs	r3, #23
 8004750:	18fc      	adds	r4, r7, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	0011      	movs	r1, r2
 8004758:	0018      	movs	r0, r3
 800475a:	f000 f8a9 	bl	80048b0 <OC3Config>
 800475e:	0003      	movs	r3, r0
 8004760:	7023      	strb	r3, [r4, #0]
      break;
 8004762:	e00b      	b.n	800477c <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004764:	2317      	movs	r3, #23
 8004766:	18fc      	adds	r4, r7, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	0011      	movs	r1, r2
 800476e:	0018      	movs	r0, r3
 8004770:	f000 f8e8 	bl	8004944 <OC4Config>
 8004774:	0003      	movs	r3, r0
 8004776:	7023      	strb	r3, [r4, #0]
      break;
 8004778:	e000      	b.n	800477c <LL_TIM_OC_Init+0xa4>
      break;
 800477a:	46c0      	nop			@ (mov r8, r8)
  }

  return result;
 800477c:	2317      	movs	r3, #23
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b007      	add	sp, #28
 8004788:	bd90      	pop	{r4, r7, pc}

0800478a <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	2201      	movs	r2, #1
 800479a:	4393      	bics	r3, r2
 800479c:	001a      	movs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2203      	movs	r2, #3
 80047b8:	4393      	bics	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2270      	movs	r2, #112	@ 0x70
 80047c0:	4393      	bics	r3, r2
 80047c2:	001a      	movs	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2202      	movs	r2, #2
 80047d0:	4393      	bics	r3, r2
 80047d2:	001a      	movs	r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2201      	movs	r2, #1
 80047e0:	4393      	bics	r3, r2
 80047e2:	001a      	movs	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	0011      	movs	r1, r2
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff fed9 	bl	80045b8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800480c:	2300      	movs	r3, #0
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b006      	add	sp, #24
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	2210      	movs	r2, #16
 8004828:	4393      	bics	r3, r2
 800482a:	001a      	movs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a18      	ldr	r2, [pc, #96]	@ (80048a8 <OC2Config+0x90>)
 8004846:	4013      	ands	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <OC2Config+0x94>)
 800484e:	401a      	ands	r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2220      	movs	r2, #32
 800485e:	4393      	bics	r3, r2
 8004860:	001a      	movs	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2210      	movs	r2, #16
 8004870:	4393      	bics	r3, r2
 8004872:	001a      	movs	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0011      	movs	r1, r2
 8004892:	0018      	movs	r0, r3
 8004894:	f7ff fe9c 	bl	80045d0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	0018      	movs	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b006      	add	sp, #24
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	fffffcff 	.word	0xfffffcff
 80048ac:	ffff8fff 	.word	0xffff8fff

080048b0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <OC3Config+0x8c>)
 80048c0:	401a      	ands	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2203      	movs	r2, #3
 80048dc:	4393      	bics	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2270      	movs	r2, #112	@ 0x70
 80048e4:	4393      	bics	r3, r2
 80048e6:	001a      	movs	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4a13      	ldr	r2, [pc, #76]	@ (8004940 <OC3Config+0x90>)
 80048f4:	401a      	ands	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4a0e      	ldr	r2, [pc, #56]	@ (800493c <OC3Config+0x8c>)
 8004904:	401a      	ands	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f7ff fe5f 	bl	80045e8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004930:	2300      	movs	r3, #0
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b006      	add	sp, #24
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	fffffeff 	.word	0xfffffeff
 8004940:	fffffdff 	.word	0xfffffdff

08004944 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4a1f      	ldr	r2, [pc, #124]	@ (80049d0 <OC4Config+0x8c>)
 8004954:	401a      	ands	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <OC4Config+0x90>)
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a18      	ldr	r2, [pc, #96]	@ (80049d8 <OC4Config+0x94>)
 8004978:	401a      	ands	r2, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4a15      	ldr	r2, [pc, #84]	@ (80049dc <OC4Config+0x98>)
 8004988:	401a      	ands	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	031b      	lsls	r3, r3, #12
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4a0e      	ldr	r2, [pc, #56]	@ (80049d0 <OC4Config+0x8c>)
 8004998:	401a      	ands	r2, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff fe21 	bl	8004600 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b006      	add	sp, #24
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	ffffefff 	.word	0xffffefff
 80049d4:	fffffcff 	.word	0xfffffcff
 80049d8:	ffff8fff 	.word	0xffff8fff
 80049dc:	ffffdfff 	.word	0xffffdfff

080049e0 <LL_USART_IsEnabled>:
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <LL_USART_IsEnabled+0x18>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <LL_USART_IsEnabled+0x1a>
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <LL_USART_SetStopBitsLength>:
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4a05      	ldr	r2, [pc, #20]	@ (8004a28 <LL_USART_SetStopBitsLength+0x24>)
 8004a14:	401a      	ands	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	605a      	str	r2, [r3, #4]
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	ffffcfff 	.word	0xffffcfff

08004a2c <LL_USART_SetHWFlowCtrl>:
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a05      	ldr	r2, [pc, #20]	@ (8004a50 <LL_USART_SetHWFlowCtrl+0x24>)
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]
}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	fffffcff 	.word	0xfffffcff

08004a54 <LL_USART_SetBaudRate>:
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d11c      	bne.n	8004aa6 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	005a      	lsls	r2, r3, #1
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fb fb45 	bl	8000108 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4a10      	ldr	r2, [pc, #64]	@ (8004ac8 <LL_USART_SetBaudRate+0x74>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	001a      	movs	r2, r3
 8004a94:	2307      	movs	r3, #7
 8004a96:	4013      	ands	r3, r2
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	60da      	str	r2, [r3, #12]
}
 8004aa4:	e00c      	b.n	8004ac0 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	085a      	lsrs	r2, r3, #1
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	18d3      	adds	r3, r2, r3
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7fb fb29 	bl	8000108 <__udivsi3>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	001a      	movs	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	60da      	str	r2, [r3, #12]
}
 8004ac0:	46c0      	nop			@ (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b006      	add	sp, #24
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0000fff0 	.word	0x0000fff0

08004acc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff ff7b 	bl	80049e0 <LL_USART_IsEnabled>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d145      	bne.n	8004b7a <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a25      	ldr	r2, [pc, #148]	@ (8004b88 <LL_USART_Init+0xbc>)
 8004af4:	401a      	ands	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4319      	orrs	r1, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	4319      	orrs	r1, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0011      	movs	r1, r2
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7ff ff72 	bl	8004a04 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0011      	movs	r1, r2
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7ff ff7f 	bl	8004a2c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <LL_USART_Init+0xc0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d105      	bne.n	8004b42 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004b36:	2003      	movs	r0, #3
 8004b38:	f7ff fbd0 	bl	80042dc <LL_RCC_GetUSARTClockFreq>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	e008      	b.n	8004b54 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a12      	ldr	r2, [pc, #72]	@ (8004b90 <LL_USART_Init+0xc4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d104      	bne.n	8004b54 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004b4a:	200c      	movs	r0, #12
 8004b4c:	f7ff fbc6 	bl	80042dc <LL_RCC_GetUSARTClockFreq>
 8004b50:	0003      	movs	r3, r0
 8004b52:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00f      	beq.n	8004b7a <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8004b62:	230f      	movs	r3, #15
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ff6d 	bl	8004a54 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b7a:	230f      	movs	r3, #15
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	781b      	ldrb	r3, [r3, #0]
}
 8004b80:	0018      	movs	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b004      	add	sp, #16
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40004400 	.word	0x40004400

08004b94 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fb fab1 	bl	8000108 <__udivsi3>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	001a      	movs	r2, r3
 8004baa:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <LL_InitTick+0x30>)
 8004bac:	3a01      	subs	r2, #1
 8004bae:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004bb0:	4b04      	ldr	r3, [pc, #16]	@ (8004bc4 <LL_InitTick+0x30>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bb6:	4b03      	ldr	r3, [pc, #12]	@ (8004bc4 <LL_InitTick+0x30>)
 8004bb8:	2205      	movs	r2, #5
 8004bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	e000e010 	.word	0xe000e010

08004bc8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004bd0:	23fa      	movs	r3, #250	@ 0xfa
 8004bd2:	009a      	lsls	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0011      	movs	r1, r2
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7ff ffdb 	bl	8004b94 <LL_InitTick>
}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b002      	add	sp, #8
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	@ (8004c00 <LL_SetSystemCoreClock+0x18>)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	20000008 	.word	0x20000008

08004c04 <std>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b510      	push	{r4, lr}
 8004c08:	0004      	movs	r4, r0
 8004c0a:	6003      	str	r3, [r0, #0]
 8004c0c:	6043      	str	r3, [r0, #4]
 8004c0e:	6083      	str	r3, [r0, #8]
 8004c10:	8181      	strh	r1, [r0, #12]
 8004c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c14:	81c2      	strh	r2, [r0, #14]
 8004c16:	6103      	str	r3, [r0, #16]
 8004c18:	6143      	str	r3, [r0, #20]
 8004c1a:	6183      	str	r3, [r0, #24]
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	2208      	movs	r2, #8
 8004c20:	305c      	adds	r0, #92	@ 0x5c
 8004c22:	f000 f9b5 	bl	8004f90 <memset>
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <std+0x50>)
 8004c28:	6224      	str	r4, [r4, #32]
 8004c2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <std+0x54>)
 8004c2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c30:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <std+0x58>)
 8004c32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c34:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <std+0x5c>)
 8004c36:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <std+0x60>)
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d005      	beq.n	8004c4a <std+0x46>
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <std+0x64>)
 8004c40:	429c      	cmp	r4, r3
 8004c42:	d002      	beq.n	8004c4a <std+0x46>
 8004c44:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <std+0x68>)
 8004c46:	429c      	cmp	r4, r3
 8004c48:	d103      	bne.n	8004c52 <std+0x4e>
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	3058      	adds	r0, #88	@ 0x58
 8004c4e:	f000 fa1f 	bl	8005090 <__retarget_lock_init_recursive>
 8004c52:	bd10      	pop	{r4, pc}
 8004c54:	08004ef9 	.word	0x08004ef9
 8004c58:	08004f21 	.word	0x08004f21
 8004c5c:	08004f59 	.word	0x08004f59
 8004c60:	08004f85 	.word	0x08004f85
 8004c64:	200002b8 	.word	0x200002b8
 8004c68:	20000320 	.word	0x20000320
 8004c6c:	20000388 	.word	0x20000388

08004c70 <stdio_exit_handler>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4a03      	ldr	r2, [pc, #12]	@ (8004c80 <stdio_exit_handler+0x10>)
 8004c74:	4903      	ldr	r1, [pc, #12]	@ (8004c84 <stdio_exit_handler+0x14>)
 8004c76:	4804      	ldr	r0, [pc, #16]	@ (8004c88 <stdio_exit_handler+0x18>)
 8004c78:	f000 f86c 	bl	8004d54 <_fwalk_sglue>
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	2000000c 	.word	0x2000000c
 8004c84:	080053b1 	.word	0x080053b1
 8004c88:	2000001c 	.word	0x2000001c

08004c8c <cleanup_stdio>:
 8004c8c:	6841      	ldr	r1, [r0, #4]
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <cleanup_stdio+0x30>)
 8004c90:	b510      	push	{r4, lr}
 8004c92:	0004      	movs	r4, r0
 8004c94:	4299      	cmp	r1, r3
 8004c96:	d001      	beq.n	8004c9c <cleanup_stdio+0x10>
 8004c98:	f000 fb8a 	bl	80053b0 <_fflush_r>
 8004c9c:	68a1      	ldr	r1, [r4, #8]
 8004c9e:	4b08      	ldr	r3, [pc, #32]	@ (8004cc0 <cleanup_stdio+0x34>)
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	d002      	beq.n	8004caa <cleanup_stdio+0x1e>
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	f000 fb83 	bl	80053b0 <_fflush_r>
 8004caa:	68e1      	ldr	r1, [r4, #12]
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <cleanup_stdio+0x38>)
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	d002      	beq.n	8004cb8 <cleanup_stdio+0x2c>
 8004cb2:	0020      	movs	r0, r4
 8004cb4:	f000 fb7c 	bl	80053b0 <_fflush_r>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	200002b8 	.word	0x200002b8
 8004cc0:	20000320 	.word	0x20000320
 8004cc4:	20000388 	.word	0x20000388

08004cc8 <global_stdio_init.part.0>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <global_stdio_init.part.0+0x28>)
 8004ccc:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <global_stdio_init.part.0+0x2c>)
 8004cce:	2104      	movs	r1, #4
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	4809      	ldr	r0, [pc, #36]	@ (8004cf8 <global_stdio_init.part.0+0x30>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f7ff ff95 	bl	8004c04 <std>
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2109      	movs	r1, #9
 8004cde:	4807      	ldr	r0, [pc, #28]	@ (8004cfc <global_stdio_init.part.0+0x34>)
 8004ce0:	f7ff ff90 	bl	8004c04 <std>
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	2112      	movs	r1, #18
 8004ce8:	4805      	ldr	r0, [pc, #20]	@ (8004d00 <global_stdio_init.part.0+0x38>)
 8004cea:	f7ff ff8b 	bl	8004c04 <std>
 8004cee:	bd10      	pop	{r4, pc}
 8004cf0:	200003f0 	.word	0x200003f0
 8004cf4:	08004c71 	.word	0x08004c71
 8004cf8:	200002b8 	.word	0x200002b8
 8004cfc:	20000320 	.word	0x20000320
 8004d00:	20000388 	.word	0x20000388

08004d04 <__sfp_lock_acquire>:
 8004d04:	b510      	push	{r4, lr}
 8004d06:	4802      	ldr	r0, [pc, #8]	@ (8004d10 <__sfp_lock_acquire+0xc>)
 8004d08:	f000 f9c3 	bl	8005092 <__retarget_lock_acquire_recursive>
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	200003f9 	.word	0x200003f9

08004d14 <__sfp_lock_release>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	4802      	ldr	r0, [pc, #8]	@ (8004d20 <__sfp_lock_release+0xc>)
 8004d18:	f000 f9bc 	bl	8005094 <__retarget_lock_release_recursive>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	200003f9 	.word	0x200003f9

08004d24 <__sinit>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	0004      	movs	r4, r0
 8004d28:	f7ff ffec 	bl	8004d04 <__sfp_lock_acquire>
 8004d2c:	6a23      	ldr	r3, [r4, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <__sinit+0x14>
 8004d32:	f7ff ffef 	bl	8004d14 <__sfp_lock_release>
 8004d36:	bd10      	pop	{r4, pc}
 8004d38:	4b04      	ldr	r3, [pc, #16]	@ (8004d4c <__sinit+0x28>)
 8004d3a:	6223      	str	r3, [r4, #32]
 8004d3c:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <__sinit+0x2c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f6      	bne.n	8004d32 <__sinit+0xe>
 8004d44:	f7ff ffc0 	bl	8004cc8 <global_stdio_init.part.0>
 8004d48:	e7f3      	b.n	8004d32 <__sinit+0xe>
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	08004c8d 	.word	0x08004c8d
 8004d50:	200003f0 	.word	0x200003f0

08004d54 <_fwalk_sglue>:
 8004d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d56:	0014      	movs	r4, r2
 8004d58:	2600      	movs	r6, #0
 8004d5a:	9000      	str	r0, [sp, #0]
 8004d5c:	9101      	str	r1, [sp, #4]
 8004d5e:	68a5      	ldr	r5, [r4, #8]
 8004d60:	6867      	ldr	r7, [r4, #4]
 8004d62:	3f01      	subs	r7, #1
 8004d64:	d504      	bpl.n	8004d70 <_fwalk_sglue+0x1c>
 8004d66:	6824      	ldr	r4, [r4, #0]
 8004d68:	2c00      	cmp	r4, #0
 8004d6a:	d1f8      	bne.n	8004d5e <_fwalk_sglue+0xa>
 8004d6c:	0030      	movs	r0, r6
 8004d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d70:	89ab      	ldrh	r3, [r5, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d908      	bls.n	8004d88 <_fwalk_sglue+0x34>
 8004d76:	220e      	movs	r2, #14
 8004d78:	5eab      	ldrsh	r3, [r5, r2]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	d004      	beq.n	8004d88 <_fwalk_sglue+0x34>
 8004d7e:	0029      	movs	r1, r5
 8004d80:	9800      	ldr	r0, [sp, #0]
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	4798      	blx	r3
 8004d86:	4306      	orrs	r6, r0
 8004d88:	3568      	adds	r5, #104	@ 0x68
 8004d8a:	e7ea      	b.n	8004d62 <_fwalk_sglue+0xe>

08004d8c <setvbuf>:
 8004d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8e:	001d      	movs	r5, r3
 8004d90:	4b57      	ldr	r3, [pc, #348]	@ (8004ef0 <setvbuf+0x164>)
 8004d92:	b085      	sub	sp, #20
 8004d94:	681e      	ldr	r6, [r3, #0]
 8004d96:	0004      	movs	r4, r0
 8004d98:	000f      	movs	r7, r1
 8004d9a:	9200      	str	r2, [sp, #0]
 8004d9c:	2e00      	cmp	r6, #0
 8004d9e:	d005      	beq.n	8004dac <setvbuf+0x20>
 8004da0:	6a33      	ldr	r3, [r6, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <setvbuf+0x20>
 8004da6:	0030      	movs	r0, r6
 8004da8:	f7ff ffbc 	bl	8004d24 <__sinit>
 8004dac:	9b00      	ldr	r3, [sp, #0]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d005      	beq.n	8004dbe <setvbuf+0x32>
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d900      	bls.n	8004db8 <setvbuf+0x2c>
 8004db6:	e097      	b.n	8004ee8 <setvbuf+0x15c>
 8004db8:	2d00      	cmp	r5, #0
 8004dba:	da00      	bge.n	8004dbe <setvbuf+0x32>
 8004dbc:	e094      	b.n	8004ee8 <setvbuf+0x15c>
 8004dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dc0:	07db      	lsls	r3, r3, #31
 8004dc2:	d405      	bmi.n	8004dd0 <setvbuf+0x44>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	059b      	lsls	r3, r3, #22
 8004dc8:	d402      	bmi.n	8004dd0 <setvbuf+0x44>
 8004dca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dcc:	f000 f961 	bl	8005092 <__retarget_lock_acquire_recursive>
 8004dd0:	0021      	movs	r1, r4
 8004dd2:	0030      	movs	r0, r6
 8004dd4:	f000 faec 	bl	80053b0 <_fflush_r>
 8004dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d008      	beq.n	8004df0 <setvbuf+0x64>
 8004dde:	0023      	movs	r3, r4
 8004de0:	3344      	adds	r3, #68	@ 0x44
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d002      	beq.n	8004dec <setvbuf+0x60>
 8004de6:	0030      	movs	r0, r6
 8004de8:	f000 f956 	bl	8005098 <_free_r>
 8004dec:	2300      	movs	r3, #0
 8004dee:	6363      	str	r3, [r4, #52]	@ 0x34
 8004df0:	2300      	movs	r3, #0
 8004df2:	61a3      	str	r3, [r4, #24]
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	d503      	bpl.n	8004e04 <setvbuf+0x78>
 8004dfc:	0030      	movs	r0, r6
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	f000 f94a 	bl	8005098 <_free_r>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <setvbuf+0x168>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	9b00      	ldr	r3, [sp, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d060      	beq.n	8004ed4 <setvbuf+0x148>
 8004e12:	ab03      	add	r3, sp, #12
 8004e14:	0021      	movs	r1, r4
 8004e16:	0030      	movs	r0, r6
 8004e18:	aa02      	add	r2, sp, #8
 8004e1a:	f000 faf5 	bl	8005408 <__swhatbuf_r>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	4303      	orrs	r3, r0
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	d124      	bne.n	8004e72 <setvbuf+0xe6>
 8004e28:	9d02      	ldr	r5, [sp, #8]
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	f000 f97e 	bl	800512c <malloc>
 8004e30:	9501      	str	r5, [sp, #4]
 8004e32:	1e07      	subs	r7, r0, #0
 8004e34:	d148      	bne.n	8004ec8 <setvbuf+0x13c>
 8004e36:	9b02      	ldr	r3, [sp, #8]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	42ab      	cmp	r3, r5
 8004e3c:	d13f      	bne.n	8004ebe <setvbuf+0x132>
 8004e3e:	2501      	movs	r5, #1
 8004e40:	426d      	negs	r5, r5
 8004e42:	220c      	movs	r2, #12
 8004e44:	5ea3      	ldrsh	r3, [r4, r2]
 8004e46:	2202      	movs	r2, #2
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	81a2      	strh	r2, [r4, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	60a2      	str	r2, [r4, #8]
 8004e50:	0022      	movs	r2, r4
 8004e52:	3247      	adds	r2, #71	@ 0x47
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	6122      	str	r2, [r4, #16]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004e5c:	6162      	str	r2, [r4, #20]
 8004e5e:	4211      	tst	r1, r2
 8004e60:	d104      	bne.n	8004e6c <setvbuf+0xe0>
 8004e62:	059b      	lsls	r3, r3, #22
 8004e64:	d402      	bmi.n	8004e6c <setvbuf+0xe0>
 8004e66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e68:	f000 f914 	bl	8005094 <__retarget_lock_release_recursive>
 8004e6c:	0028      	movs	r0, r5
 8004e6e:	b005      	add	sp, #20
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e72:	2f00      	cmp	r7, #0
 8004e74:	d0d9      	beq.n	8004e2a <setvbuf+0x9e>
 8004e76:	6a33      	ldr	r3, [r6, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <setvbuf+0xf6>
 8004e7c:	0030      	movs	r0, r6
 8004e7e:	f7ff ff51 	bl	8004d24 <__sinit>
 8004e82:	9b00      	ldr	r3, [sp, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d103      	bne.n	8004e90 <setvbuf+0x104>
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	9a00      	ldr	r2, [sp, #0]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	81a2      	strh	r2, [r4, #12]
 8004e90:	220c      	movs	r2, #12
 8004e92:	5ea3      	ldrsh	r3, [r4, r2]
 8004e94:	2208      	movs	r2, #8
 8004e96:	0019      	movs	r1, r3
 8004e98:	6027      	str	r7, [r4, #0]
 8004e9a:	6127      	str	r7, [r4, #16]
 8004e9c:	6165      	str	r5, [r4, #20]
 8004e9e:	4011      	ands	r1, r2
 8004ea0:	4213      	tst	r3, r2
 8004ea2:	d01b      	beq.n	8004edc <setvbuf+0x150>
 8004ea4:	07da      	lsls	r2, r3, #31
 8004ea6:	d517      	bpl.n	8004ed8 <setvbuf+0x14c>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	426d      	negs	r5, r5
 8004eac:	60a2      	str	r2, [r4, #8]
 8004eae:	61a5      	str	r5, [r4, #24]
 8004eb0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004eb2:	07d2      	lsls	r2, r2, #31
 8004eb4:	d401      	bmi.n	8004eba <setvbuf+0x12e>
 8004eb6:	059b      	lsls	r3, r3, #22
 8004eb8:	d512      	bpl.n	8004ee0 <setvbuf+0x154>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	e7d6      	b.n	8004e6c <setvbuf+0xe0>
 8004ebe:	9801      	ldr	r0, [sp, #4]
 8004ec0:	f000 f934 	bl	800512c <malloc>
 8004ec4:	1e07      	subs	r7, r0, #0
 8004ec6:	d0ba      	beq.n	8004e3e <setvbuf+0xb2>
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	89a2      	ldrh	r2, [r4, #12]
 8004ecc:	9d01      	ldr	r5, [sp, #4]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	e7d0      	b.n	8004e76 <setvbuf+0xea>
 8004ed4:	2500      	movs	r5, #0
 8004ed6:	e7b4      	b.n	8004e42 <setvbuf+0xb6>
 8004ed8:	60a5      	str	r5, [r4, #8]
 8004eda:	e7e9      	b.n	8004eb0 <setvbuf+0x124>
 8004edc:	60a1      	str	r1, [r4, #8]
 8004ede:	e7e7      	b.n	8004eb0 <setvbuf+0x124>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee2:	f000 f8d7 	bl	8005094 <__retarget_lock_release_recursive>
 8004ee6:	e7e8      	b.n	8004eba <setvbuf+0x12e>
 8004ee8:	2501      	movs	r5, #1
 8004eea:	426d      	negs	r5, r5
 8004eec:	e7be      	b.n	8004e6c <setvbuf+0xe0>
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	20000018 	.word	0x20000018
 8004ef4:	fffff35c 	.word	0xfffff35c

08004ef8 <__sread>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	000c      	movs	r4, r1
 8004efc:	250e      	movs	r5, #14
 8004efe:	5f49      	ldrsh	r1, [r1, r5]
 8004f00:	f000 f874 	bl	8004fec <_read_r>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	db03      	blt.n	8004f10 <__sread+0x18>
 8004f08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f0a:	181b      	adds	r3, r3, r0
 8004f0c:	6563      	str	r3, [r4, #84]	@ 0x54
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	4a02      	ldr	r2, [pc, #8]	@ (8004f1c <__sread+0x24>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	e7f9      	b.n	8004f0e <__sread+0x16>
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	ffffefff 	.word	0xffffefff

08004f20 <__swrite>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	001f      	movs	r7, r3
 8004f24:	898b      	ldrh	r3, [r1, #12]
 8004f26:	0005      	movs	r5, r0
 8004f28:	000c      	movs	r4, r1
 8004f2a:	0016      	movs	r6, r2
 8004f2c:	05db      	lsls	r3, r3, #23
 8004f2e:	d505      	bpl.n	8004f3c <__swrite+0x1c>
 8004f30:	230e      	movs	r3, #14
 8004f32:	5ec9      	ldrsh	r1, [r1, r3]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2302      	movs	r3, #2
 8004f38:	f000 f844 	bl	8004fc4 <_lseek_r>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <__swrite+0x34>)
 8004f40:	0028      	movs	r0, r5
 8004f42:	4013      	ands	r3, r2
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	0032      	movs	r2, r6
 8004f48:	230e      	movs	r3, #14
 8004f4a:	5ee1      	ldrsh	r1, [r4, r3]
 8004f4c:	003b      	movs	r3, r7
 8004f4e:	f000 f861 	bl	8005014 <_write_r>
 8004f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f54:	ffffefff 	.word	0xffffefff

08004f58 <__sseek>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	000c      	movs	r4, r1
 8004f5c:	250e      	movs	r5, #14
 8004f5e:	5f49      	ldrsh	r1, [r1, r5]
 8004f60:	f000 f830 	bl	8004fc4 <_lseek_r>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	1c42      	adds	r2, r0, #1
 8004f68:	d103      	bne.n	8004f72 <__sseek+0x1a>
 8004f6a:	4a05      	ldr	r2, [pc, #20]	@ (8004f80 <__sseek+0x28>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	2280      	movs	r2, #128	@ 0x80
 8004f74:	0152      	lsls	r2, r2, #5
 8004f76:	4313      	orrs	r3, r2
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f7c:	e7f8      	b.n	8004f70 <__sseek+0x18>
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	ffffefff 	.word	0xffffefff

08004f84 <__sclose>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	230e      	movs	r3, #14
 8004f88:	5ec9      	ldrsh	r1, [r1, r3]
 8004f8a:	f000 f809 	bl	8004fa0 <_close_r>
 8004f8e:	bd10      	pop	{r4, pc}

08004f90 <memset>:
 8004f90:	0003      	movs	r3, r0
 8004f92:	1882      	adds	r2, r0, r2
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	7019      	strb	r1, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <_close_r>:
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	b570      	push	{r4, r5, r6, lr}
 8004fa4:	4d06      	ldr	r5, [pc, #24]	@ (8004fc0 <_close_r+0x20>)
 8004fa6:	0004      	movs	r4, r0
 8004fa8:	0008      	movs	r0, r1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	f7fe f97f 	bl	80032ae <_close>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d103      	bne.n	8004fbc <_close_r+0x1c>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d000      	beq.n	8004fbc <_close_r+0x1c>
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	200003f4 	.word	0x200003f4

08004fc4 <_lseek_r>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	0004      	movs	r4, r0
 8004fc8:	0008      	movs	r0, r1
 8004fca:	0011      	movs	r1, r2
 8004fcc:	001a      	movs	r2, r3
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4d05      	ldr	r5, [pc, #20]	@ (8004fe8 <_lseek_r+0x24>)
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fe f982 	bl	80032dc <_lseek>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d103      	bne.n	8004fe4 <_lseek_r+0x20>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d000      	beq.n	8004fe4 <_lseek_r+0x20>
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	bd70      	pop	{r4, r5, r6, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	200003f4 	.word	0x200003f4

08004fec <_read_r>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	0004      	movs	r4, r0
 8004ff0:	0008      	movs	r0, r1
 8004ff2:	0011      	movs	r1, r2
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4d05      	ldr	r5, [pc, #20]	@ (8005010 <_read_r+0x24>)
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	f7fe f97f 	bl	80032fe <_read>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d103      	bne.n	800500c <_read_r+0x20>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d000      	beq.n	800500c <_read_r+0x20>
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	200003f4 	.word	0x200003f4

08005014 <_write_r>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	0004      	movs	r4, r0
 8005018:	0008      	movs	r0, r1
 800501a:	0011      	movs	r1, r2
 800501c:	001a      	movs	r2, r3
 800501e:	2300      	movs	r3, #0
 8005020:	4d05      	ldr	r5, [pc, #20]	@ (8005038 <_write_r+0x24>)
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	f7fe f918 	bl	8003258 <_write>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d103      	bne.n	8005034 <_write_r+0x20>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d000      	beq.n	8005034 <_write_r+0x20>
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	bd70      	pop	{r4, r5, r6, pc}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	200003f4 	.word	0x200003f4

0800503c <__errno>:
 800503c:	4b01      	ldr	r3, [pc, #4]	@ (8005044 <__errno+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	4770      	bx	lr
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	20000018 	.word	0x20000018

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	2600      	movs	r6, #0
 800504c:	4c0c      	ldr	r4, [pc, #48]	@ (8005080 <__libc_init_array+0x38>)
 800504e:	4d0d      	ldr	r5, [pc, #52]	@ (8005084 <__libc_init_array+0x3c>)
 8005050:	1b64      	subs	r4, r4, r5
 8005052:	10a4      	asrs	r4, r4, #2
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	2600      	movs	r6, #0
 800505a:	f000 fa23 	bl	80054a4 <_init>
 800505e:	4c0a      	ldr	r4, [pc, #40]	@ (8005088 <__libc_init_array+0x40>)
 8005060:	4d0a      	ldr	r5, [pc, #40]	@ (800508c <__libc_init_array+0x44>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	00b3      	lsls	r3, r6, #2
 800506e:	58eb      	ldr	r3, [r5, r3]
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	00b3      	lsls	r3, r6, #2
 8005078:	58eb      	ldr	r3, [r5, r3]
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	0800554c 	.word	0x0800554c
 8005084:	0800554c 	.word	0x0800554c
 8005088:	08005550 	.word	0x08005550
 800508c:	0800554c 	.word	0x0800554c

08005090 <__retarget_lock_init_recursive>:
 8005090:	4770      	bx	lr

08005092 <__retarget_lock_acquire_recursive>:
 8005092:	4770      	bx	lr

08005094 <__retarget_lock_release_recursive>:
 8005094:	4770      	bx	lr
	...

08005098 <_free_r>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	0005      	movs	r5, r0
 800509c:	1e0c      	subs	r4, r1, #0
 800509e:	d010      	beq.n	80050c2 <_free_r+0x2a>
 80050a0:	3c04      	subs	r4, #4
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da00      	bge.n	80050aa <_free_r+0x12>
 80050a8:	18e4      	adds	r4, r4, r3
 80050aa:	0028      	movs	r0, r5
 80050ac:	f000 f8ea 	bl	8005284 <__malloc_lock>
 80050b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <_free_r+0x90>)
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <_free_r+0x2c>
 80050b8:	6063      	str	r3, [r4, #4]
 80050ba:	6014      	str	r4, [r2, #0]
 80050bc:	0028      	movs	r0, r5
 80050be:	f000 f8e9 	bl	8005294 <__malloc_unlock>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d908      	bls.n	80050da <_free_r+0x42>
 80050c8:	6820      	ldr	r0, [r4, #0]
 80050ca:	1821      	adds	r1, r4, r0
 80050cc:	428b      	cmp	r3, r1
 80050ce:	d1f3      	bne.n	80050b8 <_free_r+0x20>
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	1809      	adds	r1, r1, r0
 80050d6:	6021      	str	r1, [r4, #0]
 80050d8:	e7ee      	b.n	80050b8 <_free_r+0x20>
 80050da:	001a      	movs	r2, r3
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <_free_r+0x4e>
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	d9f9      	bls.n	80050da <_free_r+0x42>
 80050e6:	6811      	ldr	r1, [r2, #0]
 80050e8:	1850      	adds	r0, r2, r1
 80050ea:	42a0      	cmp	r0, r4
 80050ec:	d10b      	bne.n	8005106 <_free_r+0x6e>
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	1809      	adds	r1, r1, r0
 80050f2:	1850      	adds	r0, r2, r1
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	4283      	cmp	r3, r0
 80050f8:	d1e0      	bne.n	80050bc <_free_r+0x24>
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	1841      	adds	r1, r0, r1
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	6053      	str	r3, [r2, #4]
 8005104:	e7da      	b.n	80050bc <_free_r+0x24>
 8005106:	42a0      	cmp	r0, r4
 8005108:	d902      	bls.n	8005110 <_free_r+0x78>
 800510a:	230c      	movs	r3, #12
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	e7d5      	b.n	80050bc <_free_r+0x24>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	1821      	adds	r1, r4, r0
 8005114:	428b      	cmp	r3, r1
 8005116:	d103      	bne.n	8005120 <_free_r+0x88>
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	1809      	adds	r1, r1, r0
 800511e:	6021      	str	r1, [r4, #0]
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	6054      	str	r4, [r2, #4]
 8005124:	e7ca      	b.n	80050bc <_free_r+0x24>
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	20000400 	.word	0x20000400

0800512c <malloc>:
 800512c:	b510      	push	{r4, lr}
 800512e:	4b03      	ldr	r3, [pc, #12]	@ (800513c <malloc+0x10>)
 8005130:	0001      	movs	r1, r0
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	f000 f826 	bl	8005184 <_malloc_r>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	20000018 	.word	0x20000018

08005140 <sbrk_aligned>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4e0f      	ldr	r6, [pc, #60]	@ (8005180 <sbrk_aligned+0x40>)
 8005144:	000d      	movs	r5, r1
 8005146:	6831      	ldr	r1, [r6, #0]
 8005148:	0004      	movs	r4, r0
 800514a:	2900      	cmp	r1, #0
 800514c:	d102      	bne.n	8005154 <sbrk_aligned+0x14>
 800514e:	f000 f997 	bl	8005480 <_sbrk_r>
 8005152:	6030      	str	r0, [r6, #0]
 8005154:	0029      	movs	r1, r5
 8005156:	0020      	movs	r0, r4
 8005158:	f000 f992 	bl	8005480 <_sbrk_r>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d103      	bne.n	8005168 <sbrk_aligned+0x28>
 8005160:	2501      	movs	r5, #1
 8005162:	426d      	negs	r5, r5
 8005164:	0028      	movs	r0, r5
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	2303      	movs	r3, #3
 800516a:	1cc5      	adds	r5, r0, #3
 800516c:	439d      	bics	r5, r3
 800516e:	42a8      	cmp	r0, r5
 8005170:	d0f8      	beq.n	8005164 <sbrk_aligned+0x24>
 8005172:	1a29      	subs	r1, r5, r0
 8005174:	0020      	movs	r0, r4
 8005176:	f000 f983 	bl	8005480 <_sbrk_r>
 800517a:	3001      	adds	r0, #1
 800517c:	d1f2      	bne.n	8005164 <sbrk_aligned+0x24>
 800517e:	e7ef      	b.n	8005160 <sbrk_aligned+0x20>
 8005180:	200003fc 	.word	0x200003fc

08005184 <_malloc_r>:
 8005184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005186:	2203      	movs	r2, #3
 8005188:	1ccb      	adds	r3, r1, #3
 800518a:	4393      	bics	r3, r2
 800518c:	3308      	adds	r3, #8
 800518e:	0005      	movs	r5, r0
 8005190:	001f      	movs	r7, r3
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d234      	bcs.n	8005200 <_malloc_r+0x7c>
 8005196:	270c      	movs	r7, #12
 8005198:	42b9      	cmp	r1, r7
 800519a:	d833      	bhi.n	8005204 <_malloc_r+0x80>
 800519c:	0028      	movs	r0, r5
 800519e:	f000 f871 	bl	8005284 <__malloc_lock>
 80051a2:	4e37      	ldr	r6, [pc, #220]	@ (8005280 <_malloc_r+0xfc>)
 80051a4:	6833      	ldr	r3, [r6, #0]
 80051a6:	001c      	movs	r4, r3
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d12f      	bne.n	800520c <_malloc_r+0x88>
 80051ac:	0039      	movs	r1, r7
 80051ae:	0028      	movs	r0, r5
 80051b0:	f7ff ffc6 	bl	8005140 <sbrk_aligned>
 80051b4:	0004      	movs	r4, r0
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	d15f      	bne.n	800527a <_malloc_r+0xf6>
 80051ba:	6834      	ldr	r4, [r6, #0]
 80051bc:	9400      	str	r4, [sp, #0]
 80051be:	9b00      	ldr	r3, [sp, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d14a      	bne.n	800525a <_malloc_r+0xd6>
 80051c4:	2c00      	cmp	r4, #0
 80051c6:	d052      	beq.n	800526e <_malloc_r+0xea>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	0028      	movs	r0, r5
 80051cc:	18e3      	adds	r3, r4, r3
 80051ce:	9900      	ldr	r1, [sp, #0]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f000 f955 	bl	8005480 <_sbrk_r>
 80051d6:	9b01      	ldr	r3, [sp, #4]
 80051d8:	4283      	cmp	r3, r0
 80051da:	d148      	bne.n	800526e <_malloc_r+0xea>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	0028      	movs	r0, r5
 80051e0:	1aff      	subs	r7, r7, r3
 80051e2:	0039      	movs	r1, r7
 80051e4:	f7ff ffac 	bl	8005140 <sbrk_aligned>
 80051e8:	3001      	adds	r0, #1
 80051ea:	d040      	beq.n	800526e <_malloc_r+0xea>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	19db      	adds	r3, r3, r7
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	6833      	ldr	r3, [r6, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d133      	bne.n	8005262 <_malloc_r+0xde>
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	6033      	str	r3, [r6, #0]
 80051fe:	e019      	b.n	8005234 <_malloc_r+0xb0>
 8005200:	2b00      	cmp	r3, #0
 8005202:	dac9      	bge.n	8005198 <_malloc_r+0x14>
 8005204:	230c      	movs	r3, #12
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	2000      	movs	r0, #0
 800520a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800520c:	6821      	ldr	r1, [r4, #0]
 800520e:	1bc9      	subs	r1, r1, r7
 8005210:	d420      	bmi.n	8005254 <_malloc_r+0xd0>
 8005212:	290b      	cmp	r1, #11
 8005214:	d90a      	bls.n	800522c <_malloc_r+0xa8>
 8005216:	19e2      	adds	r2, r4, r7
 8005218:	6027      	str	r7, [r4, #0]
 800521a:	42a3      	cmp	r3, r4
 800521c:	d104      	bne.n	8005228 <_malloc_r+0xa4>
 800521e:	6032      	str	r2, [r6, #0]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	6011      	str	r1, [r2, #0]
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	e005      	b.n	8005234 <_malloc_r+0xb0>
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	e7f9      	b.n	8005220 <_malloc_r+0x9c>
 800522c:	6862      	ldr	r2, [r4, #4]
 800522e:	42a3      	cmp	r3, r4
 8005230:	d10e      	bne.n	8005250 <_malloc_r+0xcc>
 8005232:	6032      	str	r2, [r6, #0]
 8005234:	0028      	movs	r0, r5
 8005236:	f000 f82d 	bl	8005294 <__malloc_unlock>
 800523a:	0020      	movs	r0, r4
 800523c:	2207      	movs	r2, #7
 800523e:	300b      	adds	r0, #11
 8005240:	1d23      	adds	r3, r4, #4
 8005242:	4390      	bics	r0, r2
 8005244:	1ac2      	subs	r2, r0, r3
 8005246:	4298      	cmp	r0, r3
 8005248:	d0df      	beq.n	800520a <_malloc_r+0x86>
 800524a:	1a1b      	subs	r3, r3, r0
 800524c:	50a3      	str	r3, [r4, r2]
 800524e:	e7dc      	b.n	800520a <_malloc_r+0x86>
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e7ef      	b.n	8005234 <_malloc_r+0xb0>
 8005254:	0023      	movs	r3, r4
 8005256:	6864      	ldr	r4, [r4, #4]
 8005258:	e7a6      	b.n	80051a8 <_malloc_r+0x24>
 800525a:	9c00      	ldr	r4, [sp, #0]
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	e7ad      	b.n	80051be <_malloc_r+0x3a>
 8005262:	001a      	movs	r2, r3
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	42a3      	cmp	r3, r4
 8005268:	d1fb      	bne.n	8005262 <_malloc_r+0xde>
 800526a:	2300      	movs	r3, #0
 800526c:	e7da      	b.n	8005224 <_malloc_r+0xa0>
 800526e:	230c      	movs	r3, #12
 8005270:	0028      	movs	r0, r5
 8005272:	602b      	str	r3, [r5, #0]
 8005274:	f000 f80e 	bl	8005294 <__malloc_unlock>
 8005278:	e7c6      	b.n	8005208 <_malloc_r+0x84>
 800527a:	6007      	str	r7, [r0, #0]
 800527c:	e7da      	b.n	8005234 <_malloc_r+0xb0>
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	20000400 	.word	0x20000400

08005284 <__malloc_lock>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4802      	ldr	r0, [pc, #8]	@ (8005290 <__malloc_lock+0xc>)
 8005288:	f7ff ff03 	bl	8005092 <__retarget_lock_acquire_recursive>
 800528c:	bd10      	pop	{r4, pc}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	200003f8 	.word	0x200003f8

08005294 <__malloc_unlock>:
 8005294:	b510      	push	{r4, lr}
 8005296:	4802      	ldr	r0, [pc, #8]	@ (80052a0 <__malloc_unlock+0xc>)
 8005298:	f7ff fefc 	bl	8005094 <__retarget_lock_release_recursive>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	200003f8 	.word	0x200003f8

080052a4 <__sflush_r>:
 80052a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052a6:	220c      	movs	r2, #12
 80052a8:	5e8b      	ldrsh	r3, [r1, r2]
 80052aa:	0005      	movs	r5, r0
 80052ac:	000c      	movs	r4, r1
 80052ae:	071a      	lsls	r2, r3, #28
 80052b0:	d456      	bmi.n	8005360 <__sflush_r+0xbc>
 80052b2:	684a      	ldr	r2, [r1, #4]
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	dc02      	bgt.n	80052be <__sflush_r+0x1a>
 80052b8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	dd4e      	ble.n	800535c <__sflush_r+0xb8>
 80052be:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80052c0:	2f00      	cmp	r7, #0
 80052c2:	d04b      	beq.n	800535c <__sflush_r+0xb8>
 80052c4:	2200      	movs	r2, #0
 80052c6:	2080      	movs	r0, #128	@ 0x80
 80052c8:	682e      	ldr	r6, [r5, #0]
 80052ca:	602a      	str	r2, [r5, #0]
 80052cc:	001a      	movs	r2, r3
 80052ce:	0140      	lsls	r0, r0, #5
 80052d0:	6a21      	ldr	r1, [r4, #32]
 80052d2:	4002      	ands	r2, r0
 80052d4:	4203      	tst	r3, r0
 80052d6:	d033      	beq.n	8005340 <__sflush_r+0x9c>
 80052d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	075b      	lsls	r3, r3, #29
 80052de:	d506      	bpl.n	80052ee <__sflush_r+0x4a>
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <__sflush_r+0x4a>
 80052ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	0028      	movs	r0, r5
 80052f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80052f4:	6a21      	ldr	r1, [r4, #32]
 80052f6:	47b8      	blx	r7
 80052f8:	89a2      	ldrh	r2, [r4, #12]
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	d106      	bne.n	800530c <__sflush_r+0x68>
 80052fe:	6829      	ldr	r1, [r5, #0]
 8005300:	291d      	cmp	r1, #29
 8005302:	d846      	bhi.n	8005392 <__sflush_r+0xee>
 8005304:	4b29      	ldr	r3, [pc, #164]	@ (80053ac <__sflush_r+0x108>)
 8005306:	40cb      	lsrs	r3, r1
 8005308:	07db      	lsls	r3, r3, #31
 800530a:	d542      	bpl.n	8005392 <__sflush_r+0xee>
 800530c:	2300      	movs	r3, #0
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	04d2      	lsls	r2, r2, #19
 8005316:	d505      	bpl.n	8005324 <__sflush_r+0x80>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d102      	bne.n	8005322 <__sflush_r+0x7e>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d100      	bne.n	8005324 <__sflush_r+0x80>
 8005322:	6560      	str	r0, [r4, #84]	@ 0x54
 8005324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005326:	602e      	str	r6, [r5, #0]
 8005328:	2900      	cmp	r1, #0
 800532a:	d017      	beq.n	800535c <__sflush_r+0xb8>
 800532c:	0023      	movs	r3, r4
 800532e:	3344      	adds	r3, #68	@ 0x44
 8005330:	4299      	cmp	r1, r3
 8005332:	d002      	beq.n	800533a <__sflush_r+0x96>
 8005334:	0028      	movs	r0, r5
 8005336:	f7ff feaf 	bl	8005098 <_free_r>
 800533a:	2300      	movs	r3, #0
 800533c:	6363      	str	r3, [r4, #52]	@ 0x34
 800533e:	e00d      	b.n	800535c <__sflush_r+0xb8>
 8005340:	2301      	movs	r3, #1
 8005342:	0028      	movs	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	0002      	movs	r2, r0
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d1c6      	bne.n	80052da <__sflush_r+0x36>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0c3      	beq.n	80052da <__sflush_r+0x36>
 8005352:	2b1d      	cmp	r3, #29
 8005354:	d001      	beq.n	800535a <__sflush_r+0xb6>
 8005356:	2b16      	cmp	r3, #22
 8005358:	d11a      	bne.n	8005390 <__sflush_r+0xec>
 800535a:	602e      	str	r6, [r5, #0]
 800535c:	2000      	movs	r0, #0
 800535e:	e01e      	b.n	800539e <__sflush_r+0xfa>
 8005360:	690e      	ldr	r6, [r1, #16]
 8005362:	2e00      	cmp	r6, #0
 8005364:	d0fa      	beq.n	800535c <__sflush_r+0xb8>
 8005366:	680f      	ldr	r7, [r1, #0]
 8005368:	600e      	str	r6, [r1, #0]
 800536a:	1bba      	subs	r2, r7, r6
 800536c:	9201      	str	r2, [sp, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	079b      	lsls	r3, r3, #30
 8005372:	d100      	bne.n	8005376 <__sflush_r+0xd2>
 8005374:	694a      	ldr	r2, [r1, #20]
 8005376:	60a2      	str	r2, [r4, #8]
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	ddee      	ble.n	800535c <__sflush_r+0xb8>
 800537e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005380:	0032      	movs	r2, r6
 8005382:	001f      	movs	r7, r3
 8005384:	0028      	movs	r0, r5
 8005386:	9b01      	ldr	r3, [sp, #4]
 8005388:	6a21      	ldr	r1, [r4, #32]
 800538a:	47b8      	blx	r7
 800538c:	2800      	cmp	r0, #0
 800538e:	dc07      	bgt.n	80053a0 <__sflush_r+0xfc>
 8005390:	89a2      	ldrh	r2, [r4, #12]
 8005392:	2340      	movs	r3, #64	@ 0x40
 8005394:	2001      	movs	r0, #1
 8005396:	4313      	orrs	r3, r2
 8005398:	b21b      	sxth	r3, r3
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	4240      	negs	r0, r0
 800539e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053a0:	9b01      	ldr	r3, [sp, #4]
 80053a2:	1836      	adds	r6, r6, r0
 80053a4:	1a1b      	subs	r3, r3, r0
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	e7e6      	b.n	8005378 <__sflush_r+0xd4>
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	20400001 	.word	0x20400001

080053b0 <_fflush_r>:
 80053b0:	690b      	ldr	r3, [r1, #16]
 80053b2:	b570      	push	{r4, r5, r6, lr}
 80053b4:	0005      	movs	r5, r0
 80053b6:	000c      	movs	r4, r1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <_fflush_r+0x12>
 80053bc:	2500      	movs	r5, #0
 80053be:	0028      	movs	r0, r5
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d004      	beq.n	80053d0 <_fflush_r+0x20>
 80053c6:	6a03      	ldr	r3, [r0, #32]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <_fflush_r+0x20>
 80053cc:	f7ff fcaa 	bl	8004d24 <__sinit>
 80053d0:	220c      	movs	r2, #12
 80053d2:	5ea3      	ldrsh	r3, [r4, r2]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f1      	beq.n	80053bc <_fflush_r+0xc>
 80053d8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053da:	07d2      	lsls	r2, r2, #31
 80053dc:	d404      	bmi.n	80053e8 <_fflush_r+0x38>
 80053de:	059b      	lsls	r3, r3, #22
 80053e0:	d402      	bmi.n	80053e8 <_fflush_r+0x38>
 80053e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053e4:	f7ff fe55 	bl	8005092 <__retarget_lock_acquire_recursive>
 80053e8:	0028      	movs	r0, r5
 80053ea:	0021      	movs	r1, r4
 80053ec:	f7ff ff5a 	bl	80052a4 <__sflush_r>
 80053f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053f2:	0005      	movs	r5, r0
 80053f4:	07db      	lsls	r3, r3, #31
 80053f6:	d4e2      	bmi.n	80053be <_fflush_r+0xe>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	059b      	lsls	r3, r3, #22
 80053fc:	d4df      	bmi.n	80053be <_fflush_r+0xe>
 80053fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005400:	f7ff fe48 	bl	8005094 <__retarget_lock_release_recursive>
 8005404:	e7db      	b.n	80053be <_fflush_r+0xe>
	...

08005408 <__swhatbuf_r>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	000e      	movs	r6, r1
 800540c:	001d      	movs	r5, r3
 800540e:	230e      	movs	r3, #14
 8005410:	5ec9      	ldrsh	r1, [r1, r3]
 8005412:	0014      	movs	r4, r2
 8005414:	b096      	sub	sp, #88	@ 0x58
 8005416:	2900      	cmp	r1, #0
 8005418:	da0c      	bge.n	8005434 <__swhatbuf_r+0x2c>
 800541a:	89b2      	ldrh	r2, [r6, #12]
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	0011      	movs	r1, r2
 8005420:	4019      	ands	r1, r3
 8005422:	421a      	tst	r2, r3
 8005424:	d114      	bne.n	8005450 <__swhatbuf_r+0x48>
 8005426:	2380      	movs	r3, #128	@ 0x80
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	2000      	movs	r0, #0
 800542c:	6029      	str	r1, [r5, #0]
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	b016      	add	sp, #88	@ 0x58
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	466a      	mov	r2, sp
 8005436:	f000 f811 	bl	800545c <_fstat_r>
 800543a:	2800      	cmp	r0, #0
 800543c:	dbed      	blt.n	800541a <__swhatbuf_r+0x12>
 800543e:	23f0      	movs	r3, #240	@ 0xf0
 8005440:	9901      	ldr	r1, [sp, #4]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	4019      	ands	r1, r3
 8005446:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <__swhatbuf_r+0x50>)
 8005448:	18c9      	adds	r1, r1, r3
 800544a:	424b      	negs	r3, r1
 800544c:	4159      	adcs	r1, r3
 800544e:	e7ea      	b.n	8005426 <__swhatbuf_r+0x1e>
 8005450:	2100      	movs	r1, #0
 8005452:	2340      	movs	r3, #64	@ 0x40
 8005454:	e7e9      	b.n	800542a <__swhatbuf_r+0x22>
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	ffffe000 	.word	0xffffe000

0800545c <_fstat_r>:
 800545c:	2300      	movs	r3, #0
 800545e:	b570      	push	{r4, r5, r6, lr}
 8005460:	4d06      	ldr	r5, [pc, #24]	@ (800547c <_fstat_r+0x20>)
 8005462:	0004      	movs	r4, r0
 8005464:	0008      	movs	r0, r1
 8005466:	0011      	movs	r1, r2
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	f7fd ff6f 	bl	800334c <_fstat>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	d103      	bne.n	800547a <_fstat_r+0x1e>
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d000      	beq.n	800547a <_fstat_r+0x1e>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	200003f4 	.word	0x200003f4

08005480 <_sbrk_r>:
 8005480:	2300      	movs	r3, #0
 8005482:	b570      	push	{r4, r5, r6, lr}
 8005484:	4d06      	ldr	r5, [pc, #24]	@ (80054a0 <_sbrk_r+0x20>)
 8005486:	0004      	movs	r4, r0
 8005488:	0008      	movs	r0, r1
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	f7fe f898 	bl	80035c0 <_sbrk>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d103      	bne.n	800549c <_sbrk_r+0x1c>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d000      	beq.n	800549c <_sbrk_r+0x1c>
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	200003f4 	.word	0x200003f4

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
