
MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004134  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  08004284  08004284  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004284  08004284  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800428c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  2000006c  080042f8  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080042f8  00006400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081d8  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002222  00000000  00000000  0000e26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00010490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000793  00000000  00000000  00010f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011866  00000000  00000000  00011693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0e4  00000000  00000000  00022ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057234  00000000  00000000  0002cfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00084211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000296c  00000000  00000000  00084254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00086bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041dc 	.word	0x080041dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080041dc 	.word	0x080041dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0044      	lsls	r4, r0, #1
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0246      	lsls	r6, r0, #9
 800022e:	1c0f      	adds	r7, r1, #0
 8000230:	0a76      	lsrs	r6, r6, #9
 8000232:	0e24      	lsrs	r4, r4, #24
 8000234:	0fc5      	lsrs	r5, r0, #31
 8000236:	2c00      	cmp	r4, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fmul+0x1c>
 800023a:	e0da      	b.n	80003f2 <__aeabi_fmul+0x1d2>
 800023c:	2cff      	cmp	r4, #255	@ 0xff
 800023e:	d074      	beq.n	800032a <__aeabi_fmul+0x10a>
 8000240:	2380      	movs	r3, #128	@ 0x80
 8000242:	00f6      	lsls	r6, r6, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431e      	orrs	r6, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469a      	mov	sl, r3
 800024e:	3c7f      	subs	r4, #127	@ 0x7f
 8000250:	027b      	lsls	r3, r7, #9
 8000252:	0a5b      	lsrs	r3, r3, #9
 8000254:	4698      	mov	r8, r3
 8000256:	007b      	lsls	r3, r7, #1
 8000258:	0e1b      	lsrs	r3, r3, #24
 800025a:	0fff      	lsrs	r7, r7, #31
 800025c:	2b00      	cmp	r3, #0
 800025e:	d074      	beq.n	800034a <__aeabi_fmul+0x12a>
 8000260:	2bff      	cmp	r3, #255	@ 0xff
 8000262:	d100      	bne.n	8000266 <__aeabi_fmul+0x46>
 8000264:	e08e      	b.n	8000384 <__aeabi_fmul+0x164>
 8000266:	4642      	mov	r2, r8
 8000268:	2180      	movs	r1, #128	@ 0x80
 800026a:	00d2      	lsls	r2, r2, #3
 800026c:	04c9      	lsls	r1, r1, #19
 800026e:	4311      	orrs	r1, r2
 8000270:	3b7f      	subs	r3, #127	@ 0x7f
 8000272:	002a      	movs	r2, r5
 8000274:	18e4      	adds	r4, r4, r3
 8000276:	464b      	mov	r3, r9
 8000278:	407a      	eors	r2, r7
 800027a:	4688      	mov	r8, r1
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	2b0a      	cmp	r3, #10
 8000280:	dc75      	bgt.n	800036e <__aeabi_fmul+0x14e>
 8000282:	464b      	mov	r3, r9
 8000284:	2000      	movs	r0, #0
 8000286:	2b02      	cmp	r3, #2
 8000288:	dd0f      	ble.n	80002aa <__aeabi_fmul+0x8a>
 800028a:	4649      	mov	r1, r9
 800028c:	2301      	movs	r3, #1
 800028e:	408b      	lsls	r3, r1
 8000290:	21a6      	movs	r1, #166	@ 0xa6
 8000292:	00c9      	lsls	r1, r1, #3
 8000294:	420b      	tst	r3, r1
 8000296:	d169      	bne.n	800036c <__aeabi_fmul+0x14c>
 8000298:	2190      	movs	r1, #144	@ 0x90
 800029a:	0089      	lsls	r1, r1, #2
 800029c:	420b      	tst	r3, r1
 800029e:	d000      	beq.n	80002a2 <__aeabi_fmul+0x82>
 80002a0:	e100      	b.n	80004a4 <__aeabi_fmul+0x284>
 80002a2:	2188      	movs	r1, #136	@ 0x88
 80002a4:	4219      	tst	r1, r3
 80002a6:	d000      	beq.n	80002aa <__aeabi_fmul+0x8a>
 80002a8:	e0f5      	b.n	8000496 <__aeabi_fmul+0x276>
 80002aa:	4641      	mov	r1, r8
 80002ac:	0409      	lsls	r1, r1, #16
 80002ae:	0c09      	lsrs	r1, r1, #16
 80002b0:	4643      	mov	r3, r8
 80002b2:	0008      	movs	r0, r1
 80002b4:	0c35      	lsrs	r5, r6, #16
 80002b6:	0436      	lsls	r6, r6, #16
 80002b8:	0c1b      	lsrs	r3, r3, #16
 80002ba:	0c36      	lsrs	r6, r6, #16
 80002bc:	4370      	muls	r0, r6
 80002be:	4369      	muls	r1, r5
 80002c0:	435e      	muls	r6, r3
 80002c2:	435d      	muls	r5, r3
 80002c4:	1876      	adds	r6, r6, r1
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	199b      	adds	r3, r3, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d903      	bls.n	80002d6 <__aeabi_fmul+0xb6>
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	0249      	lsls	r1, r1, #9
 80002d2:	468c      	mov	ip, r1
 80002d4:	4465      	add	r5, ip
 80002d6:	0400      	lsls	r0, r0, #16
 80002d8:	0419      	lsls	r1, r3, #16
 80002da:	0c00      	lsrs	r0, r0, #16
 80002dc:	1809      	adds	r1, r1, r0
 80002de:	018e      	lsls	r6, r1, #6
 80002e0:	1e70      	subs	r0, r6, #1
 80002e2:	4186      	sbcs	r6, r0
 80002e4:	0c1b      	lsrs	r3, r3, #16
 80002e6:	0e89      	lsrs	r1, r1, #26
 80002e8:	195b      	adds	r3, r3, r5
 80002ea:	430e      	orrs	r6, r1
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	431e      	orrs	r6, r3
 80002f0:	011b      	lsls	r3, r3, #4
 80002f2:	d46c      	bmi.n	80003ce <__aeabi_fmul+0x1ae>
 80002f4:	0023      	movs	r3, r4
 80002f6:	337f      	adds	r3, #127	@ 0x7f
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fmul+0xde>
 80002fc:	e0b1      	b.n	8000462 <__aeabi_fmul+0x242>
 80002fe:	0015      	movs	r5, r2
 8000300:	0771      	lsls	r1, r6, #29
 8000302:	d00b      	beq.n	800031c <__aeabi_fmul+0xfc>
 8000304:	200f      	movs	r0, #15
 8000306:	0021      	movs	r1, r4
 8000308:	4030      	ands	r0, r6
 800030a:	2804      	cmp	r0, #4
 800030c:	d006      	beq.n	800031c <__aeabi_fmul+0xfc>
 800030e:	3604      	adds	r6, #4
 8000310:	0132      	lsls	r2, r6, #4
 8000312:	d503      	bpl.n	800031c <__aeabi_fmul+0xfc>
 8000314:	4b6e      	ldr	r3, [pc, #440]	@ (80004d0 <__aeabi_fmul+0x2b0>)
 8000316:	401e      	ands	r6, r3
 8000318:	000b      	movs	r3, r1
 800031a:	3380      	adds	r3, #128	@ 0x80
 800031c:	2bfe      	cmp	r3, #254	@ 0xfe
 800031e:	dd00      	ble.n	8000322 <__aeabi_fmul+0x102>
 8000320:	e0bd      	b.n	800049e <__aeabi_fmul+0x27e>
 8000322:	01b2      	lsls	r2, r6, #6
 8000324:	0a52      	lsrs	r2, r2, #9
 8000326:	b2db      	uxtb	r3, r3
 8000328:	e048      	b.n	80003bc <__aeabi_fmul+0x19c>
 800032a:	2e00      	cmp	r6, #0
 800032c:	d000      	beq.n	8000330 <__aeabi_fmul+0x110>
 800032e:	e092      	b.n	8000456 <__aeabi_fmul+0x236>
 8000330:	2308      	movs	r3, #8
 8000332:	4699      	mov	r9, r3
 8000334:	3b06      	subs	r3, #6
 8000336:	469a      	mov	sl, r3
 8000338:	027b      	lsls	r3, r7, #9
 800033a:	0a5b      	lsrs	r3, r3, #9
 800033c:	4698      	mov	r8, r3
 800033e:	007b      	lsls	r3, r7, #1
 8000340:	24ff      	movs	r4, #255	@ 0xff
 8000342:	0e1b      	lsrs	r3, r3, #24
 8000344:	0fff      	lsrs	r7, r7, #31
 8000346:	2b00      	cmp	r3, #0
 8000348:	d18a      	bne.n	8000260 <__aeabi_fmul+0x40>
 800034a:	4642      	mov	r2, r8
 800034c:	2a00      	cmp	r2, #0
 800034e:	d164      	bne.n	800041a <__aeabi_fmul+0x1fa>
 8000350:	4649      	mov	r1, r9
 8000352:	3201      	adds	r2, #1
 8000354:	4311      	orrs	r1, r2
 8000356:	4689      	mov	r9, r1
 8000358:	290a      	cmp	r1, #10
 800035a:	dc08      	bgt.n	800036e <__aeabi_fmul+0x14e>
 800035c:	407d      	eors	r5, r7
 800035e:	2001      	movs	r0, #1
 8000360:	b2ea      	uxtb	r2, r5
 8000362:	2902      	cmp	r1, #2
 8000364:	dc91      	bgt.n	800028a <__aeabi_fmul+0x6a>
 8000366:	0015      	movs	r5, r2
 8000368:	2200      	movs	r2, #0
 800036a:	e027      	b.n	80003bc <__aeabi_fmul+0x19c>
 800036c:	0015      	movs	r5, r2
 800036e:	4653      	mov	r3, sl
 8000370:	2b02      	cmp	r3, #2
 8000372:	d100      	bne.n	8000376 <__aeabi_fmul+0x156>
 8000374:	e093      	b.n	800049e <__aeabi_fmul+0x27e>
 8000376:	2b03      	cmp	r3, #3
 8000378:	d01a      	beq.n	80003b0 <__aeabi_fmul+0x190>
 800037a:	2b01      	cmp	r3, #1
 800037c:	d12c      	bne.n	80003d8 <__aeabi_fmul+0x1b8>
 800037e:	2300      	movs	r3, #0
 8000380:	2200      	movs	r2, #0
 8000382:	e01b      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000384:	4643      	mov	r3, r8
 8000386:	34ff      	adds	r4, #255	@ 0xff
 8000388:	2b00      	cmp	r3, #0
 800038a:	d055      	beq.n	8000438 <__aeabi_fmul+0x218>
 800038c:	2103      	movs	r1, #3
 800038e:	464b      	mov	r3, r9
 8000390:	430b      	orrs	r3, r1
 8000392:	0019      	movs	r1, r3
 8000394:	2b0a      	cmp	r3, #10
 8000396:	dc00      	bgt.n	800039a <__aeabi_fmul+0x17a>
 8000398:	e092      	b.n	80004c0 <__aeabi_fmul+0x2a0>
 800039a:	2b0f      	cmp	r3, #15
 800039c:	d000      	beq.n	80003a0 <__aeabi_fmul+0x180>
 800039e:	e08c      	b.n	80004ba <__aeabi_fmul+0x29a>
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	03d2      	lsls	r2, r2, #15
 80003a4:	4216      	tst	r6, r2
 80003a6:	d003      	beq.n	80003b0 <__aeabi_fmul+0x190>
 80003a8:	4643      	mov	r3, r8
 80003aa:	4213      	tst	r3, r2
 80003ac:	d100      	bne.n	80003b0 <__aeabi_fmul+0x190>
 80003ae:	e07d      	b.n	80004ac <__aeabi_fmul+0x28c>
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	4332      	orrs	r2, r6
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	0a52      	lsrs	r2, r2, #9
 80003ba:	23ff      	movs	r3, #255	@ 0xff
 80003bc:	05d8      	lsls	r0, r3, #23
 80003be:	07ed      	lsls	r5, r5, #31
 80003c0:	4310      	orrs	r0, r2
 80003c2:	4328      	orrs	r0, r5
 80003c4:	bce0      	pop	{r5, r6, r7}
 80003c6:	46ba      	mov	sl, r7
 80003c8:	46b1      	mov	r9, r6
 80003ca:	46a8      	mov	r8, r5
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ce:	2301      	movs	r3, #1
 80003d0:	0015      	movs	r5, r2
 80003d2:	0871      	lsrs	r1, r6, #1
 80003d4:	401e      	ands	r6, r3
 80003d6:	430e      	orrs	r6, r1
 80003d8:	0023      	movs	r3, r4
 80003da:	3380      	adds	r3, #128	@ 0x80
 80003dc:	1c61      	adds	r1, r4, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	dd41      	ble.n	8000466 <__aeabi_fmul+0x246>
 80003e2:	0772      	lsls	r2, r6, #29
 80003e4:	d094      	beq.n	8000310 <__aeabi_fmul+0xf0>
 80003e6:	220f      	movs	r2, #15
 80003e8:	4032      	ands	r2, r6
 80003ea:	2a04      	cmp	r2, #4
 80003ec:	d000      	beq.n	80003f0 <__aeabi_fmul+0x1d0>
 80003ee:	e78e      	b.n	800030e <__aeabi_fmul+0xee>
 80003f0:	e78e      	b.n	8000310 <__aeabi_fmul+0xf0>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d105      	bne.n	8000402 <__aeabi_fmul+0x1e2>
 80003f6:	2304      	movs	r3, #4
 80003f8:	4699      	mov	r9, r3
 80003fa:	3b03      	subs	r3, #3
 80003fc:	2400      	movs	r4, #0
 80003fe:	469a      	mov	sl, r3
 8000400:	e726      	b.n	8000250 <__aeabi_fmul+0x30>
 8000402:	0030      	movs	r0, r6
 8000404:	f000 fb3a 	bl	8000a7c <__clzsi2>
 8000408:	2476      	movs	r4, #118	@ 0x76
 800040a:	1f43      	subs	r3, r0, #5
 800040c:	409e      	lsls	r6, r3
 800040e:	2300      	movs	r3, #0
 8000410:	4264      	negs	r4, r4
 8000412:	4699      	mov	r9, r3
 8000414:	469a      	mov	sl, r3
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	e71a      	b.n	8000250 <__aeabi_fmul+0x30>
 800041a:	4640      	mov	r0, r8
 800041c:	f000 fb2e 	bl	8000a7c <__clzsi2>
 8000420:	464b      	mov	r3, r9
 8000422:	1a24      	subs	r4, r4, r0
 8000424:	3c76      	subs	r4, #118	@ 0x76
 8000426:	2b0a      	cmp	r3, #10
 8000428:	dca1      	bgt.n	800036e <__aeabi_fmul+0x14e>
 800042a:	4643      	mov	r3, r8
 800042c:	3805      	subs	r0, #5
 800042e:	4083      	lsls	r3, r0
 8000430:	407d      	eors	r5, r7
 8000432:	4698      	mov	r8, r3
 8000434:	b2ea      	uxtb	r2, r5
 8000436:	e724      	b.n	8000282 <__aeabi_fmul+0x62>
 8000438:	464a      	mov	r2, r9
 800043a:	3302      	adds	r3, #2
 800043c:	4313      	orrs	r3, r2
 800043e:	002a      	movs	r2, r5
 8000440:	407a      	eors	r2, r7
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	2b0a      	cmp	r3, #10
 8000446:	dc92      	bgt.n	800036e <__aeabi_fmul+0x14e>
 8000448:	4649      	mov	r1, r9
 800044a:	0015      	movs	r5, r2
 800044c:	2900      	cmp	r1, #0
 800044e:	d026      	beq.n	800049e <__aeabi_fmul+0x27e>
 8000450:	4699      	mov	r9, r3
 8000452:	2002      	movs	r0, #2
 8000454:	e719      	b.n	800028a <__aeabi_fmul+0x6a>
 8000456:	230c      	movs	r3, #12
 8000458:	4699      	mov	r9, r3
 800045a:	3b09      	subs	r3, #9
 800045c:	24ff      	movs	r4, #255	@ 0xff
 800045e:	469a      	mov	sl, r3
 8000460:	e6f6      	b.n	8000250 <__aeabi_fmul+0x30>
 8000462:	0015      	movs	r5, r2
 8000464:	0021      	movs	r1, r4
 8000466:	2201      	movs	r2, #1
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	2b1b      	cmp	r3, #27
 800046c:	dd00      	ble.n	8000470 <__aeabi_fmul+0x250>
 800046e:	e786      	b.n	800037e <__aeabi_fmul+0x15e>
 8000470:	319e      	adds	r1, #158	@ 0x9e
 8000472:	0032      	movs	r2, r6
 8000474:	408e      	lsls	r6, r1
 8000476:	40da      	lsrs	r2, r3
 8000478:	1e73      	subs	r3, r6, #1
 800047a:	419e      	sbcs	r6, r3
 800047c:	4332      	orrs	r2, r6
 800047e:	0753      	lsls	r3, r2, #29
 8000480:	d004      	beq.n	800048c <__aeabi_fmul+0x26c>
 8000482:	230f      	movs	r3, #15
 8000484:	4013      	ands	r3, r2
 8000486:	2b04      	cmp	r3, #4
 8000488:	d000      	beq.n	800048c <__aeabi_fmul+0x26c>
 800048a:	3204      	adds	r2, #4
 800048c:	0153      	lsls	r3, r2, #5
 800048e:	d510      	bpl.n	80004b2 <__aeabi_fmul+0x292>
 8000490:	2301      	movs	r3, #1
 8000492:	2200      	movs	r2, #0
 8000494:	e792      	b.n	80003bc <__aeabi_fmul+0x19c>
 8000496:	003d      	movs	r5, r7
 8000498:	4646      	mov	r6, r8
 800049a:	4682      	mov	sl, r0
 800049c:	e767      	b.n	800036e <__aeabi_fmul+0x14e>
 800049e:	23ff      	movs	r3, #255	@ 0xff
 80004a0:	2200      	movs	r2, #0
 80004a2:	e78b      	b.n	80003bc <__aeabi_fmul+0x19c>
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	2500      	movs	r5, #0
 80004a8:	03d2      	lsls	r2, r2, #15
 80004aa:	e786      	b.n	80003ba <__aeabi_fmul+0x19a>
 80004ac:	003d      	movs	r5, r7
 80004ae:	431a      	orrs	r2, r3
 80004b0:	e783      	b.n	80003ba <__aeabi_fmul+0x19a>
 80004b2:	0192      	lsls	r2, r2, #6
 80004b4:	2300      	movs	r3, #0
 80004b6:	0a52      	lsrs	r2, r2, #9
 80004b8:	e780      	b.n	80003bc <__aeabi_fmul+0x19c>
 80004ba:	003d      	movs	r5, r7
 80004bc:	4646      	mov	r6, r8
 80004be:	e777      	b.n	80003b0 <__aeabi_fmul+0x190>
 80004c0:	002a      	movs	r2, r5
 80004c2:	2301      	movs	r3, #1
 80004c4:	407a      	eors	r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	2003      	movs	r0, #3
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	e6e9      	b.n	80002a2 <__aeabi_fmul+0x82>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	f7ffffff 	.word	0xf7ffffff

080004d4 <__aeabi_fsub>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	4647      	mov	r7, r8
 80004d8:	46ce      	mov	lr, r9
 80004da:	0243      	lsls	r3, r0, #9
 80004dc:	b580      	push	{r7, lr}
 80004de:	0a5f      	lsrs	r7, r3, #9
 80004e0:	099b      	lsrs	r3, r3, #6
 80004e2:	0045      	lsls	r5, r0, #1
 80004e4:	004a      	lsls	r2, r1, #1
 80004e6:	469c      	mov	ip, r3
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	0fc4      	lsrs	r4, r0, #31
 80004ec:	0fce      	lsrs	r6, r1, #31
 80004ee:	0e2d      	lsrs	r5, r5, #24
 80004f0:	0a58      	lsrs	r0, r3, #9
 80004f2:	0e12      	lsrs	r2, r2, #24
 80004f4:	0999      	lsrs	r1, r3, #6
 80004f6:	2aff      	cmp	r2, #255	@ 0xff
 80004f8:	d06b      	beq.n	80005d2 <__aeabi_fsub+0xfe>
 80004fa:	2301      	movs	r3, #1
 80004fc:	405e      	eors	r6, r3
 80004fe:	1aab      	subs	r3, r5, r2
 8000500:	42b4      	cmp	r4, r6
 8000502:	d04b      	beq.n	800059c <__aeabi_fsub+0xc8>
 8000504:	2b00      	cmp	r3, #0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fsub+0x36>
 8000508:	e0ff      	b.n	800070a <__aeabi_fsub+0x236>
 800050a:	2a00      	cmp	r2, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_fsub+0x3c>
 800050e:	e088      	b.n	8000622 <__aeabi_fsub+0x14e>
 8000510:	2dff      	cmp	r5, #255	@ 0xff
 8000512:	d100      	bne.n	8000516 <__aeabi_fsub+0x42>
 8000514:	e0ef      	b.n	80006f6 <__aeabi_fsub+0x222>
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	04d2      	lsls	r2, r2, #19
 800051a:	4311      	orrs	r1, r2
 800051c:	2001      	movs	r0, #1
 800051e:	2b1b      	cmp	r3, #27
 8000520:	dc08      	bgt.n	8000534 <__aeabi_fsub+0x60>
 8000522:	0008      	movs	r0, r1
 8000524:	2220      	movs	r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	4099      	lsls	r1, r3
 800052c:	000b      	movs	r3, r1
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	4193      	sbcs	r3, r2
 8000532:	4318      	orrs	r0, r3
 8000534:	4663      	mov	r3, ip
 8000536:	1a1b      	subs	r3, r3, r0
 8000538:	469c      	mov	ip, r3
 800053a:	4663      	mov	r3, ip
 800053c:	015b      	lsls	r3, r3, #5
 800053e:	d400      	bmi.n	8000542 <__aeabi_fsub+0x6e>
 8000540:	e0cd      	b.n	80006de <__aeabi_fsub+0x20a>
 8000542:	4663      	mov	r3, ip
 8000544:	019f      	lsls	r7, r3, #6
 8000546:	09bf      	lsrs	r7, r7, #6
 8000548:	0038      	movs	r0, r7
 800054a:	f000 fa97 	bl	8000a7c <__clzsi2>
 800054e:	003b      	movs	r3, r7
 8000550:	3805      	subs	r0, #5
 8000552:	4083      	lsls	r3, r0
 8000554:	4285      	cmp	r5, r0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fsub+0x86>
 8000558:	e0a2      	b.n	80006a0 <__aeabi_fsub+0x1cc>
 800055a:	4ab7      	ldr	r2, [pc, #732]	@ (8000838 <__aeabi_fsub+0x364>)
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	401a      	ands	r2, r3
 8000560:	4694      	mov	ip, r2
 8000562:	075a      	lsls	r2, r3, #29
 8000564:	d100      	bne.n	8000568 <__aeabi_fsub+0x94>
 8000566:	e0c3      	b.n	80006f0 <__aeabi_fsub+0x21c>
 8000568:	220f      	movs	r2, #15
 800056a:	4013      	ands	r3, r2
 800056c:	2b04      	cmp	r3, #4
 800056e:	d100      	bne.n	8000572 <__aeabi_fsub+0x9e>
 8000570:	e0be      	b.n	80006f0 <__aeabi_fsub+0x21c>
 8000572:	2304      	movs	r3, #4
 8000574:	4698      	mov	r8, r3
 8000576:	44c4      	add	ip, r8
 8000578:	4663      	mov	r3, ip
 800057a:	015b      	lsls	r3, r3, #5
 800057c:	d400      	bmi.n	8000580 <__aeabi_fsub+0xac>
 800057e:	e0b7      	b.n	80006f0 <__aeabi_fsub+0x21c>
 8000580:	1c68      	adds	r0, r5, #1
 8000582:	2dfe      	cmp	r5, #254	@ 0xfe
 8000584:	d000      	beq.n	8000588 <__aeabi_fsub+0xb4>
 8000586:	e0a5      	b.n	80006d4 <__aeabi_fsub+0x200>
 8000588:	20ff      	movs	r0, #255	@ 0xff
 800058a:	2200      	movs	r2, #0
 800058c:	05c0      	lsls	r0, r0, #23
 800058e:	4310      	orrs	r0, r2
 8000590:	07e4      	lsls	r4, r4, #31
 8000592:	4320      	orrs	r0, r4
 8000594:	bcc0      	pop	{r6, r7}
 8000596:	46b9      	mov	r9, r7
 8000598:	46b0      	mov	r8, r6
 800059a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059c:	2b00      	cmp	r3, #0
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_fsub+0xce>
 80005a0:	e1eb      	b.n	800097a <__aeabi_fsub+0x4a6>
 80005a2:	2a00      	cmp	r2, #0
 80005a4:	d046      	beq.n	8000634 <__aeabi_fsub+0x160>
 80005a6:	2dff      	cmp	r5, #255	@ 0xff
 80005a8:	d100      	bne.n	80005ac <__aeabi_fsub+0xd8>
 80005aa:	e0a4      	b.n	80006f6 <__aeabi_fsub+0x222>
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	04d2      	lsls	r2, r2, #19
 80005b0:	4311      	orrs	r1, r2
 80005b2:	2b1b      	cmp	r3, #27
 80005b4:	dc00      	bgt.n	80005b8 <__aeabi_fsub+0xe4>
 80005b6:	e0fb      	b.n	80007b0 <__aeabi_fsub+0x2dc>
 80005b8:	2305      	movs	r3, #5
 80005ba:	4698      	mov	r8, r3
 80005bc:	002b      	movs	r3, r5
 80005be:	44c4      	add	ip, r8
 80005c0:	4662      	mov	r2, ip
 80005c2:	08d7      	lsrs	r7, r2, #3
 80005c4:	2bff      	cmp	r3, #255	@ 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fsub+0xf6>
 80005c8:	e095      	b.n	80006f6 <__aeabi_fsub+0x222>
 80005ca:	027a      	lsls	r2, r7, #9
 80005cc:	0a52      	lsrs	r2, r2, #9
 80005ce:	b2d8      	uxtb	r0, r3
 80005d0:	e7dc      	b.n	800058c <__aeabi_fsub+0xb8>
 80005d2:	002b      	movs	r3, r5
 80005d4:	3bff      	subs	r3, #255	@ 0xff
 80005d6:	4699      	mov	r9, r3
 80005d8:	2900      	cmp	r1, #0
 80005da:	d118      	bne.n	800060e <__aeabi_fsub+0x13a>
 80005dc:	2301      	movs	r3, #1
 80005de:	405e      	eors	r6, r3
 80005e0:	42b4      	cmp	r4, r6
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fsub+0x112>
 80005e4:	e0ca      	b.n	800077c <__aeabi_fsub+0x2a8>
 80005e6:	464b      	mov	r3, r9
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d02d      	beq.n	8000648 <__aeabi_fsub+0x174>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fsub+0x11e>
 80005f0:	e13c      	b.n	800086c <__aeabi_fsub+0x398>
 80005f2:	23ff      	movs	r3, #255	@ 0xff
 80005f4:	4664      	mov	r4, ip
 80005f6:	2c00      	cmp	r4, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_fsub+0x128>
 80005fa:	e15f      	b.n	80008bc <__aeabi_fsub+0x3e8>
 80005fc:	1e5d      	subs	r5, r3, #1
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x130>
 8000602:	e174      	b.n	80008ee <__aeabi_fsub+0x41a>
 8000604:	0034      	movs	r4, r6
 8000606:	2bff      	cmp	r3, #255	@ 0xff
 8000608:	d074      	beq.n	80006f4 <__aeabi_fsub+0x220>
 800060a:	002b      	movs	r3, r5
 800060c:	e103      	b.n	8000816 <__aeabi_fsub+0x342>
 800060e:	42b4      	cmp	r4, r6
 8000610:	d100      	bne.n	8000614 <__aeabi_fsub+0x140>
 8000612:	e09c      	b.n	800074e <__aeabi_fsub+0x27a>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d017      	beq.n	8000648 <__aeabi_fsub+0x174>
 8000618:	2d00      	cmp	r5, #0
 800061a:	d0ea      	beq.n	80005f2 <__aeabi_fsub+0x11e>
 800061c:	0007      	movs	r7, r0
 800061e:	0034      	movs	r4, r6
 8000620:	e06c      	b.n	80006fc <__aeabi_fsub+0x228>
 8000622:	2900      	cmp	r1, #0
 8000624:	d0cc      	beq.n	80005c0 <__aeabi_fsub+0xec>
 8000626:	1e5a      	subs	r2, r3, #1
 8000628:	2b01      	cmp	r3, #1
 800062a:	d02b      	beq.n	8000684 <__aeabi_fsub+0x1b0>
 800062c:	2bff      	cmp	r3, #255	@ 0xff
 800062e:	d062      	beq.n	80006f6 <__aeabi_fsub+0x222>
 8000630:	0013      	movs	r3, r2
 8000632:	e773      	b.n	800051c <__aeabi_fsub+0x48>
 8000634:	2900      	cmp	r1, #0
 8000636:	d0c3      	beq.n	80005c0 <__aeabi_fsub+0xec>
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	2b01      	cmp	r3, #1
 800063c:	d100      	bne.n	8000640 <__aeabi_fsub+0x16c>
 800063e:	e11e      	b.n	800087e <__aeabi_fsub+0x3aa>
 8000640:	2bff      	cmp	r3, #255	@ 0xff
 8000642:	d058      	beq.n	80006f6 <__aeabi_fsub+0x222>
 8000644:	0013      	movs	r3, r2
 8000646:	e7b4      	b.n	80005b2 <__aeabi_fsub+0xde>
 8000648:	22fe      	movs	r2, #254	@ 0xfe
 800064a:	1c6b      	adds	r3, r5, #1
 800064c:	421a      	tst	r2, r3
 800064e:	d10d      	bne.n	800066c <__aeabi_fsub+0x198>
 8000650:	2d00      	cmp	r5, #0
 8000652:	d060      	beq.n	8000716 <__aeabi_fsub+0x242>
 8000654:	4663      	mov	r3, ip
 8000656:	2b00      	cmp	r3, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fsub+0x188>
 800065a:	e120      	b.n	800089e <__aeabi_fsub+0x3ca>
 800065c:	2900      	cmp	r1, #0
 800065e:	d000      	beq.n	8000662 <__aeabi_fsub+0x18e>
 8000660:	e128      	b.n	80008b4 <__aeabi_fsub+0x3e0>
 8000662:	2280      	movs	r2, #128	@ 0x80
 8000664:	2400      	movs	r4, #0
 8000666:	20ff      	movs	r0, #255	@ 0xff
 8000668:	03d2      	lsls	r2, r2, #15
 800066a:	e78f      	b.n	800058c <__aeabi_fsub+0xb8>
 800066c:	4663      	mov	r3, ip
 800066e:	1a5f      	subs	r7, r3, r1
 8000670:	017b      	lsls	r3, r7, #5
 8000672:	d500      	bpl.n	8000676 <__aeabi_fsub+0x1a2>
 8000674:	e0fe      	b.n	8000874 <__aeabi_fsub+0x3a0>
 8000676:	2f00      	cmp	r7, #0
 8000678:	d000      	beq.n	800067c <__aeabi_fsub+0x1a8>
 800067a:	e765      	b.n	8000548 <__aeabi_fsub+0x74>
 800067c:	2400      	movs	r4, #0
 800067e:	2000      	movs	r0, #0
 8000680:	2200      	movs	r2, #0
 8000682:	e783      	b.n	800058c <__aeabi_fsub+0xb8>
 8000684:	4663      	mov	r3, ip
 8000686:	1a59      	subs	r1, r3, r1
 8000688:	014b      	lsls	r3, r1, #5
 800068a:	d400      	bmi.n	800068e <__aeabi_fsub+0x1ba>
 800068c:	e119      	b.n	80008c2 <__aeabi_fsub+0x3ee>
 800068e:	018f      	lsls	r7, r1, #6
 8000690:	09bf      	lsrs	r7, r7, #6
 8000692:	0038      	movs	r0, r7
 8000694:	f000 f9f2 	bl	8000a7c <__clzsi2>
 8000698:	003b      	movs	r3, r7
 800069a:	3805      	subs	r0, #5
 800069c:	4083      	lsls	r3, r0
 800069e:	2501      	movs	r5, #1
 80006a0:	2220      	movs	r2, #32
 80006a2:	1b40      	subs	r0, r0, r5
 80006a4:	3001      	adds	r0, #1
 80006a6:	1a12      	subs	r2, r2, r0
 80006a8:	0019      	movs	r1, r3
 80006aa:	4093      	lsls	r3, r2
 80006ac:	40c1      	lsrs	r1, r0
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	4193      	sbcs	r3, r2
 80006b2:	4319      	orrs	r1, r3
 80006b4:	468c      	mov	ip, r1
 80006b6:	1e0b      	subs	r3, r1, #0
 80006b8:	d0e1      	beq.n	800067e <__aeabi_fsub+0x1aa>
 80006ba:	075b      	lsls	r3, r3, #29
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fsub+0x1ec>
 80006be:	e152      	b.n	8000966 <__aeabi_fsub+0x492>
 80006c0:	230f      	movs	r3, #15
 80006c2:	2500      	movs	r5, #0
 80006c4:	400b      	ands	r3, r1
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d000      	beq.n	80006cc <__aeabi_fsub+0x1f8>
 80006ca:	e752      	b.n	8000572 <__aeabi_fsub+0x9e>
 80006cc:	2001      	movs	r0, #1
 80006ce:	014a      	lsls	r2, r1, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fsub+0x200>
 80006d2:	e092      	b.n	80007fa <__aeabi_fsub+0x326>
 80006d4:	b2c0      	uxtb	r0, r0
 80006d6:	4663      	mov	r3, ip
 80006d8:	019a      	lsls	r2, r3, #6
 80006da:	0a52      	lsrs	r2, r2, #9
 80006dc:	e756      	b.n	800058c <__aeabi_fsub+0xb8>
 80006de:	4663      	mov	r3, ip
 80006e0:	075b      	lsls	r3, r3, #29
 80006e2:	d005      	beq.n	80006f0 <__aeabi_fsub+0x21c>
 80006e4:	230f      	movs	r3, #15
 80006e6:	4662      	mov	r2, ip
 80006e8:	4013      	ands	r3, r2
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fsub+0x21c>
 80006ee:	e740      	b.n	8000572 <__aeabi_fsub+0x9e>
 80006f0:	002b      	movs	r3, r5
 80006f2:	e765      	b.n	80005c0 <__aeabi_fsub+0xec>
 80006f4:	0007      	movs	r7, r0
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_fsub+0x228>
 80006fa:	e745      	b.n	8000588 <__aeabi_fsub+0xb4>
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	03d2      	lsls	r2, r2, #15
 8000700:	433a      	orrs	r2, r7
 8000702:	0252      	lsls	r2, r2, #9
 8000704:	20ff      	movs	r0, #255	@ 0xff
 8000706:	0a52      	lsrs	r2, r2, #9
 8000708:	e740      	b.n	800058c <__aeabi_fsub+0xb8>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d179      	bne.n	8000802 <__aeabi_fsub+0x32e>
 800070e:	22fe      	movs	r2, #254	@ 0xfe
 8000710:	1c6b      	adds	r3, r5, #1
 8000712:	421a      	tst	r2, r3
 8000714:	d1aa      	bne.n	800066c <__aeabi_fsub+0x198>
 8000716:	4663      	mov	r3, ip
 8000718:	2b00      	cmp	r3, #0
 800071a:	d100      	bne.n	800071e <__aeabi_fsub+0x24a>
 800071c:	e0f5      	b.n	800090a <__aeabi_fsub+0x436>
 800071e:	2900      	cmp	r1, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_fsub+0x250>
 8000722:	e0d1      	b.n	80008c8 <__aeabi_fsub+0x3f4>
 8000724:	1a5f      	subs	r7, r3, r1
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	04db      	lsls	r3, r3, #19
 800072a:	421f      	tst	r7, r3
 800072c:	d100      	bne.n	8000730 <__aeabi_fsub+0x25c>
 800072e:	e10e      	b.n	800094e <__aeabi_fsub+0x47a>
 8000730:	4662      	mov	r2, ip
 8000732:	2401      	movs	r4, #1
 8000734:	1a8a      	subs	r2, r1, r2
 8000736:	4694      	mov	ip, r2
 8000738:	2000      	movs	r0, #0
 800073a:	4034      	ands	r4, r6
 800073c:	2a00      	cmp	r2, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fsub+0x26e>
 8000740:	e724      	b.n	800058c <__aeabi_fsub+0xb8>
 8000742:	2001      	movs	r0, #1
 8000744:	421a      	tst	r2, r3
 8000746:	d1c6      	bne.n	80006d6 <__aeabi_fsub+0x202>
 8000748:	2300      	movs	r3, #0
 800074a:	08d7      	lsrs	r7, r2, #3
 800074c:	e73d      	b.n	80005ca <__aeabi_fsub+0xf6>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d017      	beq.n	8000782 <__aeabi_fsub+0x2ae>
 8000752:	2d00      	cmp	r5, #0
 8000754:	d000      	beq.n	8000758 <__aeabi_fsub+0x284>
 8000756:	e0af      	b.n	80008b8 <__aeabi_fsub+0x3e4>
 8000758:	23ff      	movs	r3, #255	@ 0xff
 800075a:	4665      	mov	r5, ip
 800075c:	2d00      	cmp	r5, #0
 800075e:	d100      	bne.n	8000762 <__aeabi_fsub+0x28e>
 8000760:	e0ad      	b.n	80008be <__aeabi_fsub+0x3ea>
 8000762:	1e5e      	subs	r6, r3, #1
 8000764:	2b01      	cmp	r3, #1
 8000766:	d100      	bne.n	800076a <__aeabi_fsub+0x296>
 8000768:	e089      	b.n	800087e <__aeabi_fsub+0x3aa>
 800076a:	2bff      	cmp	r3, #255	@ 0xff
 800076c:	d0c2      	beq.n	80006f4 <__aeabi_fsub+0x220>
 800076e:	2e1b      	cmp	r6, #27
 8000770:	dc00      	bgt.n	8000774 <__aeabi_fsub+0x2a0>
 8000772:	e0ab      	b.n	80008cc <__aeabi_fsub+0x3f8>
 8000774:	1d4b      	adds	r3, r1, #5
 8000776:	469c      	mov	ip, r3
 8000778:	0013      	movs	r3, r2
 800077a:	e721      	b.n	80005c0 <__aeabi_fsub+0xec>
 800077c:	464b      	mov	r3, r9
 800077e:	2b00      	cmp	r3, #0
 8000780:	d170      	bne.n	8000864 <__aeabi_fsub+0x390>
 8000782:	22fe      	movs	r2, #254	@ 0xfe
 8000784:	1c6b      	adds	r3, r5, #1
 8000786:	421a      	tst	r2, r3
 8000788:	d15e      	bne.n	8000848 <__aeabi_fsub+0x374>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fsub+0x2bc>
 800078e:	e0c3      	b.n	8000918 <__aeabi_fsub+0x444>
 8000790:	4663      	mov	r3, ip
 8000792:	2b00      	cmp	r3, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fsub+0x2c4>
 8000796:	e0d0      	b.n	800093a <__aeabi_fsub+0x466>
 8000798:	2900      	cmp	r1, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fsub+0x2ca>
 800079c:	e094      	b.n	80008c8 <__aeabi_fsub+0x3f4>
 800079e:	000a      	movs	r2, r1
 80007a0:	4462      	add	r2, ip
 80007a2:	0153      	lsls	r3, r2, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fsub+0x2d4>
 80007a6:	e0d8      	b.n	800095a <__aeabi_fsub+0x486>
 80007a8:	0192      	lsls	r2, r2, #6
 80007aa:	2001      	movs	r0, #1
 80007ac:	0a52      	lsrs	r2, r2, #9
 80007ae:	e6ed      	b.n	800058c <__aeabi_fsub+0xb8>
 80007b0:	0008      	movs	r0, r1
 80007b2:	2220      	movs	r2, #32
 80007b4:	40d8      	lsrs	r0, r3
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	4099      	lsls	r1, r3
 80007ba:	000b      	movs	r3, r1
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	4303      	orrs	r3, r0
 80007c2:	449c      	add	ip, r3
 80007c4:	4663      	mov	r3, ip
 80007c6:	015b      	lsls	r3, r3, #5
 80007c8:	d589      	bpl.n	80006de <__aeabi_fsub+0x20a>
 80007ca:	3501      	adds	r5, #1
 80007cc:	2dff      	cmp	r5, #255	@ 0xff
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fsub+0x2fe>
 80007d0:	e6da      	b.n	8000588 <__aeabi_fsub+0xb4>
 80007d2:	4662      	mov	r2, ip
 80007d4:	2301      	movs	r3, #1
 80007d6:	4919      	ldr	r1, [pc, #100]	@ (800083c <__aeabi_fsub+0x368>)
 80007d8:	4013      	ands	r3, r2
 80007da:	0852      	lsrs	r2, r2, #1
 80007dc:	400a      	ands	r2, r1
 80007de:	431a      	orrs	r2, r3
 80007e0:	0013      	movs	r3, r2
 80007e2:	4694      	mov	ip, r2
 80007e4:	075b      	lsls	r3, r3, #29
 80007e6:	d004      	beq.n	80007f2 <__aeabi_fsub+0x31e>
 80007e8:	230f      	movs	r3, #15
 80007ea:	4013      	ands	r3, r2
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x31e>
 80007f0:	e6bf      	b.n	8000572 <__aeabi_fsub+0x9e>
 80007f2:	4663      	mov	r3, ip
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	d500      	bpl.n	80007fa <__aeabi_fsub+0x326>
 80007f8:	e6c2      	b.n	8000580 <__aeabi_fsub+0xac>
 80007fa:	4663      	mov	r3, ip
 80007fc:	08df      	lsrs	r7, r3, #3
 80007fe:	002b      	movs	r3, r5
 8000800:	e6e3      	b.n	80005ca <__aeabi_fsub+0xf6>
 8000802:	1b53      	subs	r3, r2, r5
 8000804:	2d00      	cmp	r5, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fsub+0x336>
 8000808:	e6f4      	b.n	80005f4 <__aeabi_fsub+0x120>
 800080a:	2080      	movs	r0, #128	@ 0x80
 800080c:	4664      	mov	r4, ip
 800080e:	04c0      	lsls	r0, r0, #19
 8000810:	4304      	orrs	r4, r0
 8000812:	46a4      	mov	ip, r4
 8000814:	0034      	movs	r4, r6
 8000816:	2001      	movs	r0, #1
 8000818:	2b1b      	cmp	r3, #27
 800081a:	dc09      	bgt.n	8000830 <__aeabi_fsub+0x35c>
 800081c:	2520      	movs	r5, #32
 800081e:	4660      	mov	r0, ip
 8000820:	40d8      	lsrs	r0, r3
 8000822:	1aeb      	subs	r3, r5, r3
 8000824:	4665      	mov	r5, ip
 8000826:	409d      	lsls	r5, r3
 8000828:	002b      	movs	r3, r5
 800082a:	1e5d      	subs	r5, r3, #1
 800082c:	41ab      	sbcs	r3, r5
 800082e:	4318      	orrs	r0, r3
 8000830:	1a0b      	subs	r3, r1, r0
 8000832:	469c      	mov	ip, r3
 8000834:	0015      	movs	r5, r2
 8000836:	e680      	b.n	800053a <__aeabi_fsub+0x66>
 8000838:	fbffffff 	.word	0xfbffffff
 800083c:	7dffffff 	.word	0x7dffffff
 8000840:	22fe      	movs	r2, #254	@ 0xfe
 8000842:	1c6b      	adds	r3, r5, #1
 8000844:	4213      	tst	r3, r2
 8000846:	d0a3      	beq.n	8000790 <__aeabi_fsub+0x2bc>
 8000848:	2bff      	cmp	r3, #255	@ 0xff
 800084a:	d100      	bne.n	800084e <__aeabi_fsub+0x37a>
 800084c:	e69c      	b.n	8000588 <__aeabi_fsub+0xb4>
 800084e:	4461      	add	r1, ip
 8000850:	0849      	lsrs	r1, r1, #1
 8000852:	074a      	lsls	r2, r1, #29
 8000854:	d049      	beq.n	80008ea <__aeabi_fsub+0x416>
 8000856:	220f      	movs	r2, #15
 8000858:	400a      	ands	r2, r1
 800085a:	2a04      	cmp	r2, #4
 800085c:	d045      	beq.n	80008ea <__aeabi_fsub+0x416>
 800085e:	1d0a      	adds	r2, r1, #4
 8000860:	4694      	mov	ip, r2
 8000862:	e6ad      	b.n	80005c0 <__aeabi_fsub+0xec>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fsub+0x396>
 8000868:	e776      	b.n	8000758 <__aeabi_fsub+0x284>
 800086a:	e68d      	b.n	8000588 <__aeabi_fsub+0xb4>
 800086c:	0034      	movs	r4, r6
 800086e:	20ff      	movs	r0, #255	@ 0xff
 8000870:	2200      	movs	r2, #0
 8000872:	e68b      	b.n	800058c <__aeabi_fsub+0xb8>
 8000874:	4663      	mov	r3, ip
 8000876:	2401      	movs	r4, #1
 8000878:	1acf      	subs	r7, r1, r3
 800087a:	4034      	ands	r4, r6
 800087c:	e664      	b.n	8000548 <__aeabi_fsub+0x74>
 800087e:	4461      	add	r1, ip
 8000880:	014b      	lsls	r3, r1, #5
 8000882:	d56d      	bpl.n	8000960 <__aeabi_fsub+0x48c>
 8000884:	0848      	lsrs	r0, r1, #1
 8000886:	4944      	ldr	r1, [pc, #272]	@ (8000998 <__aeabi_fsub+0x4c4>)
 8000888:	4001      	ands	r1, r0
 800088a:	0743      	lsls	r3, r0, #29
 800088c:	d02c      	beq.n	80008e8 <__aeabi_fsub+0x414>
 800088e:	230f      	movs	r3, #15
 8000890:	4003      	ands	r3, r0
 8000892:	2b04      	cmp	r3, #4
 8000894:	d028      	beq.n	80008e8 <__aeabi_fsub+0x414>
 8000896:	1d0b      	adds	r3, r1, #4
 8000898:	469c      	mov	ip, r3
 800089a:	2302      	movs	r3, #2
 800089c:	e690      	b.n	80005c0 <__aeabi_fsub+0xec>
 800089e:	2900      	cmp	r1, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x3d0>
 80008a2:	e72b      	b.n	80006fc <__aeabi_fsub+0x228>
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	429f      	cmp	r7, r3
 80008aa:	d200      	bcs.n	80008ae <__aeabi_fsub+0x3da>
 80008ac:	e726      	b.n	80006fc <__aeabi_fsub+0x228>
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d300      	bcc.n	80008b4 <__aeabi_fsub+0x3e0>
 80008b2:	e723      	b.n	80006fc <__aeabi_fsub+0x228>
 80008b4:	2401      	movs	r4, #1
 80008b6:	4034      	ands	r4, r6
 80008b8:	0007      	movs	r7, r0
 80008ba:	e71f      	b.n	80006fc <__aeabi_fsub+0x228>
 80008bc:	0034      	movs	r4, r6
 80008be:	468c      	mov	ip, r1
 80008c0:	e67e      	b.n	80005c0 <__aeabi_fsub+0xec>
 80008c2:	2301      	movs	r3, #1
 80008c4:	08cf      	lsrs	r7, r1, #3
 80008c6:	e680      	b.n	80005ca <__aeabi_fsub+0xf6>
 80008c8:	2300      	movs	r3, #0
 80008ca:	e67e      	b.n	80005ca <__aeabi_fsub+0xf6>
 80008cc:	2020      	movs	r0, #32
 80008ce:	4665      	mov	r5, ip
 80008d0:	1b80      	subs	r0, r0, r6
 80008d2:	4085      	lsls	r5, r0
 80008d4:	4663      	mov	r3, ip
 80008d6:	0028      	movs	r0, r5
 80008d8:	40f3      	lsrs	r3, r6
 80008da:	1e45      	subs	r5, r0, #1
 80008dc:	41a8      	sbcs	r0, r5
 80008de:	4303      	orrs	r3, r0
 80008e0:	469c      	mov	ip, r3
 80008e2:	0015      	movs	r5, r2
 80008e4:	448c      	add	ip, r1
 80008e6:	e76d      	b.n	80007c4 <__aeabi_fsub+0x2f0>
 80008e8:	2302      	movs	r3, #2
 80008ea:	08cf      	lsrs	r7, r1, #3
 80008ec:	e66d      	b.n	80005ca <__aeabi_fsub+0xf6>
 80008ee:	1b0f      	subs	r7, r1, r4
 80008f0:	017b      	lsls	r3, r7, #5
 80008f2:	d528      	bpl.n	8000946 <__aeabi_fsub+0x472>
 80008f4:	01bf      	lsls	r7, r7, #6
 80008f6:	09bf      	lsrs	r7, r7, #6
 80008f8:	0038      	movs	r0, r7
 80008fa:	f000 f8bf 	bl	8000a7c <__clzsi2>
 80008fe:	003b      	movs	r3, r7
 8000900:	3805      	subs	r0, #5
 8000902:	4083      	lsls	r3, r0
 8000904:	0034      	movs	r4, r6
 8000906:	2501      	movs	r5, #1
 8000908:	e6ca      	b.n	80006a0 <__aeabi_fsub+0x1cc>
 800090a:	2900      	cmp	r1, #0
 800090c:	d100      	bne.n	8000910 <__aeabi_fsub+0x43c>
 800090e:	e6b5      	b.n	800067c <__aeabi_fsub+0x1a8>
 8000910:	2401      	movs	r4, #1
 8000912:	0007      	movs	r7, r0
 8000914:	4034      	ands	r4, r6
 8000916:	e658      	b.n	80005ca <__aeabi_fsub+0xf6>
 8000918:	4663      	mov	r3, ip
 800091a:	2b00      	cmp	r3, #0
 800091c:	d100      	bne.n	8000920 <__aeabi_fsub+0x44c>
 800091e:	e6e9      	b.n	80006f4 <__aeabi_fsub+0x220>
 8000920:	2900      	cmp	r1, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_fsub+0x452>
 8000924:	e6ea      	b.n	80006fc <__aeabi_fsub+0x228>
 8000926:	2380      	movs	r3, #128	@ 0x80
 8000928:	03db      	lsls	r3, r3, #15
 800092a:	429f      	cmp	r7, r3
 800092c:	d200      	bcs.n	8000930 <__aeabi_fsub+0x45c>
 800092e:	e6e5      	b.n	80006fc <__aeabi_fsub+0x228>
 8000930:	4298      	cmp	r0, r3
 8000932:	d300      	bcc.n	8000936 <__aeabi_fsub+0x462>
 8000934:	e6e2      	b.n	80006fc <__aeabi_fsub+0x228>
 8000936:	0007      	movs	r7, r0
 8000938:	e6e0      	b.n	80006fc <__aeabi_fsub+0x228>
 800093a:	2900      	cmp	r1, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x46c>
 800093e:	e69e      	b.n	800067e <__aeabi_fsub+0x1aa>
 8000940:	2300      	movs	r3, #0
 8000942:	08cf      	lsrs	r7, r1, #3
 8000944:	e641      	b.n	80005ca <__aeabi_fsub+0xf6>
 8000946:	0034      	movs	r4, r6
 8000948:	2301      	movs	r3, #1
 800094a:	08ff      	lsrs	r7, r7, #3
 800094c:	e63d      	b.n	80005ca <__aeabi_fsub+0xf6>
 800094e:	2f00      	cmp	r7, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fsub+0x480>
 8000952:	e693      	b.n	800067c <__aeabi_fsub+0x1a8>
 8000954:	2300      	movs	r3, #0
 8000956:	08ff      	lsrs	r7, r7, #3
 8000958:	e637      	b.n	80005ca <__aeabi_fsub+0xf6>
 800095a:	2300      	movs	r3, #0
 800095c:	08d7      	lsrs	r7, r2, #3
 800095e:	e634      	b.n	80005ca <__aeabi_fsub+0xf6>
 8000960:	2301      	movs	r3, #1
 8000962:	08cf      	lsrs	r7, r1, #3
 8000964:	e631      	b.n	80005ca <__aeabi_fsub+0xf6>
 8000966:	2280      	movs	r2, #128	@ 0x80
 8000968:	000b      	movs	r3, r1
 800096a:	04d2      	lsls	r2, r2, #19
 800096c:	2001      	movs	r0, #1
 800096e:	4013      	ands	r3, r2
 8000970:	4211      	tst	r1, r2
 8000972:	d000      	beq.n	8000976 <__aeabi_fsub+0x4a2>
 8000974:	e6ae      	b.n	80006d4 <__aeabi_fsub+0x200>
 8000976:	08cf      	lsrs	r7, r1, #3
 8000978:	e627      	b.n	80005ca <__aeabi_fsub+0xf6>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x4ac>
 800097e:	e75f      	b.n	8000840 <__aeabi_fsub+0x36c>
 8000980:	1b56      	subs	r6, r2, r5
 8000982:	2d00      	cmp	r5, #0
 8000984:	d101      	bne.n	800098a <__aeabi_fsub+0x4b6>
 8000986:	0033      	movs	r3, r6
 8000988:	e6e7      	b.n	800075a <__aeabi_fsub+0x286>
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	4660      	mov	r0, ip
 800098e:	04db      	lsls	r3, r3, #19
 8000990:	4318      	orrs	r0, r3
 8000992:	4684      	mov	ip, r0
 8000994:	e6eb      	b.n	800076e <__aeabi_fsub+0x29a>
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	7dffffff 	.word	0x7dffffff

0800099c <__aeabi_f2iz>:
 800099c:	0241      	lsls	r1, r0, #9
 800099e:	0042      	lsls	r2, r0, #1
 80009a0:	0fc3      	lsrs	r3, r0, #31
 80009a2:	0a49      	lsrs	r1, r1, #9
 80009a4:	2000      	movs	r0, #0
 80009a6:	0e12      	lsrs	r2, r2, #24
 80009a8:	2a7e      	cmp	r2, #126	@ 0x7e
 80009aa:	dd03      	ble.n	80009b4 <__aeabi_f2iz+0x18>
 80009ac:	2a9d      	cmp	r2, #157	@ 0x9d
 80009ae:	dd02      	ble.n	80009b6 <__aeabi_f2iz+0x1a>
 80009b0:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <__aeabi_f2iz+0x3c>)
 80009b2:	1898      	adds	r0, r3, r2
 80009b4:	4770      	bx	lr
 80009b6:	2080      	movs	r0, #128	@ 0x80
 80009b8:	0400      	lsls	r0, r0, #16
 80009ba:	4301      	orrs	r1, r0
 80009bc:	2a95      	cmp	r2, #149	@ 0x95
 80009be:	dc07      	bgt.n	80009d0 <__aeabi_f2iz+0x34>
 80009c0:	2096      	movs	r0, #150	@ 0x96
 80009c2:	1a82      	subs	r2, r0, r2
 80009c4:	40d1      	lsrs	r1, r2
 80009c6:	4248      	negs	r0, r1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f3      	bne.n	80009b4 <__aeabi_f2iz+0x18>
 80009cc:	0008      	movs	r0, r1
 80009ce:	e7f1      	b.n	80009b4 <__aeabi_f2iz+0x18>
 80009d0:	3a96      	subs	r2, #150	@ 0x96
 80009d2:	4091      	lsls	r1, r2
 80009d4:	e7f7      	b.n	80009c6 <__aeabi_f2iz+0x2a>
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	7fffffff 	.word	0x7fffffff

080009dc <__aeabi_i2f>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	2800      	cmp	r0, #0
 80009e0:	d012      	beq.n	8000a08 <__aeabi_i2f+0x2c>
 80009e2:	17c3      	asrs	r3, r0, #31
 80009e4:	18c5      	adds	r5, r0, r3
 80009e6:	405d      	eors	r5, r3
 80009e8:	0fc4      	lsrs	r4, r0, #31
 80009ea:	0028      	movs	r0, r5
 80009ec:	f000 f846 	bl	8000a7c <__clzsi2>
 80009f0:	239e      	movs	r3, #158	@ 0x9e
 80009f2:	1a1b      	subs	r3, r3, r0
 80009f4:	2b96      	cmp	r3, #150	@ 0x96
 80009f6:	dc0f      	bgt.n	8000a18 <__aeabi_i2f+0x3c>
 80009f8:	2808      	cmp	r0, #8
 80009fa:	d038      	beq.n	8000a6e <__aeabi_i2f+0x92>
 80009fc:	3808      	subs	r0, #8
 80009fe:	4085      	lsls	r5, r0
 8000a00:	026d      	lsls	r5, r5, #9
 8000a02:	0a6d      	lsrs	r5, r5, #9
 8000a04:	b2d8      	uxtb	r0, r3
 8000a06:	e002      	b.n	8000a0e <__aeabi_i2f+0x32>
 8000a08:	2400      	movs	r4, #0
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	05c0      	lsls	r0, r0, #23
 8000a10:	4328      	orrs	r0, r5
 8000a12:	07e4      	lsls	r4, r4, #31
 8000a14:	4320      	orrs	r0, r4
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	2b99      	cmp	r3, #153	@ 0x99
 8000a1a:	dc14      	bgt.n	8000a46 <__aeabi_i2f+0x6a>
 8000a1c:	1f42      	subs	r2, r0, #5
 8000a1e:	4095      	lsls	r5, r2
 8000a20:	002a      	movs	r2, r5
 8000a22:	4915      	ldr	r1, [pc, #84]	@ (8000a78 <__aeabi_i2f+0x9c>)
 8000a24:	4011      	ands	r1, r2
 8000a26:	0755      	lsls	r5, r2, #29
 8000a28:	d01c      	beq.n	8000a64 <__aeabi_i2f+0x88>
 8000a2a:	250f      	movs	r5, #15
 8000a2c:	402a      	ands	r2, r5
 8000a2e:	2a04      	cmp	r2, #4
 8000a30:	d018      	beq.n	8000a64 <__aeabi_i2f+0x88>
 8000a32:	3104      	adds	r1, #4
 8000a34:	08ca      	lsrs	r2, r1, #3
 8000a36:	0149      	lsls	r1, r1, #5
 8000a38:	d515      	bpl.n	8000a66 <__aeabi_i2f+0x8a>
 8000a3a:	239f      	movs	r3, #159	@ 0x9f
 8000a3c:	0252      	lsls	r2, r2, #9
 8000a3e:	1a18      	subs	r0, r3, r0
 8000a40:	0a55      	lsrs	r5, r2, #9
 8000a42:	b2c0      	uxtb	r0, r0
 8000a44:	e7e3      	b.n	8000a0e <__aeabi_i2f+0x32>
 8000a46:	2205      	movs	r2, #5
 8000a48:	0029      	movs	r1, r5
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	40d1      	lsrs	r1, r2
 8000a4e:	0002      	movs	r2, r0
 8000a50:	321b      	adds	r2, #27
 8000a52:	4095      	lsls	r5, r2
 8000a54:	002a      	movs	r2, r5
 8000a56:	1e55      	subs	r5, r2, #1
 8000a58:	41aa      	sbcs	r2, r5
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	4906      	ldr	r1, [pc, #24]	@ (8000a78 <__aeabi_i2f+0x9c>)
 8000a5e:	4011      	ands	r1, r2
 8000a60:	0755      	lsls	r5, r2, #29
 8000a62:	d1e2      	bne.n	8000a2a <__aeabi_i2f+0x4e>
 8000a64:	08ca      	lsrs	r2, r1, #3
 8000a66:	0252      	lsls	r2, r2, #9
 8000a68:	0a55      	lsrs	r5, r2, #9
 8000a6a:	b2d8      	uxtb	r0, r3
 8000a6c:	e7cf      	b.n	8000a0e <__aeabi_i2f+0x32>
 8000a6e:	026d      	lsls	r5, r5, #9
 8000a70:	0a6d      	lsrs	r5, r5, #9
 8000a72:	308e      	adds	r0, #142	@ 0x8e
 8000a74:	e7cb      	b.n	8000a0e <__aeabi_i2f+0x32>
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	fbffffff 	.word	0xfbffffff

08000a7c <__clzsi2>:
 8000a7c:	211c      	movs	r1, #28
 8000a7e:	2301      	movs	r3, #1
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d301      	bcc.n	8000a8a <__clzsi2+0xe>
 8000a86:	0c00      	lsrs	r0, r0, #16
 8000a88:	3910      	subs	r1, #16
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	d301      	bcc.n	8000a94 <__clzsi2+0x18>
 8000a90:	0a00      	lsrs	r0, r0, #8
 8000a92:	3908      	subs	r1, #8
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	4298      	cmp	r0, r3
 8000a98:	d301      	bcc.n	8000a9e <__clzsi2+0x22>
 8000a9a:	0900      	lsrs	r0, r0, #4
 8000a9c:	3904      	subs	r1, #4
 8000a9e:	a202      	add	r2, pc, #8	@ (adr r2, 8000aa8 <__clzsi2+0x2c>)
 8000aa0:	5c10      	ldrb	r0, [r2, r0]
 8000aa2:	1840      	adds	r0, r0, r1
 8000aa4:	4770      	bx	lr
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	02020304 	.word	0x02020304
 8000aac:	01010101 	.word	0x01010101
	...

08000ab8 <LL_ADC_SetCommonClock>:
  *             is set to clock source asynchronous.
  *             (refer to function @ref LL_ADC_SetClock() ).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a05      	ldr	r2, [pc, #20]	@ (8000adc <LL_ADC_SetCommonClock+0x24>)
 8000ac8:	401a      	ands	r2, r3
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	ffc3ffff 	.word	0xffc3ffff

08000ae0 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000af0:	401a      	ands	r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	fdffffff 	.word	0xfdffffff

08000b08 <LL_ADC_SetCommonPathInternalCh>:
  *         (1) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  *         (2) value not defined in all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx, STM32L04xxx, STM32L03xxx, STM32L02xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
#if defined (ADC_CCR_VLCDEN) && defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VLCDEN, PathInternal);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000b18:	401a      	ands	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
#elif defined (ADC_CCR_TSEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN, PathInternal);
#endif
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	fe3fffff 	.word	0xfe3fffff

08000b30 <LL_ADC_SetClock>:
  *             cycle).
  *             Refer to reference manual.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	089a      	lsrs	r2, r3, #2
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	2207      	movs	r2, #7
 8000b62:	4393      	bics	r3, r2
 8000b64:	001a      	movs	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	615a      	str	r2, [r3, #20]
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2204      	movs	r2, #4
 8000b86:	4393      	bics	r3, r2
 8000b88:	001a      	movs	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60da      	str	r2, [r3, #12]
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	035b      	lsls	r3, r3, #13
 8000bac:	0b5b      	lsrs	r3, r3, #13
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4393      	bics	r3, r2
 8000bce:	001a      	movs	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	611a      	str	r2, [r3, #16]
}
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <LL_ADC_EnableInternalRegulator+0x24>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	0552      	lsls	r2, r2, #21
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	6fffffe8 	.word	0x6fffffe8

08000c08 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	4393      	bics	r3, r2
 8000c18:	001a      	movs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	605a      	str	r2, [r3, #4]
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2208      	movs	r2, #8
 8000c34:	4393      	bics	r3, r2
 8000c36:	001a      	movs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	605a      	str	r2, [r3, #4]
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <LL_APB2_GRP1_EnableClock+0x28>)
 8000c4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <LL_APB2_GRP1_EnableClock+0x28>)
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <LL_APB2_GRP1_EnableClock+0x28>)
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000

08000c70 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b004      	add	sp, #16
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000

08000c9c <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b090      	sub	sp, #64	@ 0x40
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000ca2:	2428      	movs	r4, #40	@ 0x28
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	2314      	movs	r3, #20
 8000caa:	001a      	movs	r2, r3
 8000cac:	2100      	movs	r1, #0
 8000cae:	f003 f80b 	bl	8003cc8 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000cb2:	2518      	movs	r5, #24
 8000cb4:	197b      	adds	r3, r7, r5
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2310      	movs	r3, #16
 8000cba:	001a      	movs	r2, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f003 f803 	bl	8003cc8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	2318      	movs	r3, #24
 8000cc8:	001a      	movs	r2, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f002 fffc 	bl	8003cc8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000cd0:	2380      	movs	r3, #128	@ 0x80
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ffb5 	bl	8000c44 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff ffc8 	bl	8000c70 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = Vpot_Pin;
 8000ce0:	003b      	movs	r3, r7
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	2203      	movs	r2, #3
 8000cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cec:	003b      	movs	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Vpot_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	003a      	movs	r2, r7
 8000cf4:	23a0      	movs	r3, #160	@ 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f002 f886 	bl	8002e0c <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000d00:	4a41      	ldr	r2, [pc, #260]	@ (8000e08 <MX_ADC_Init+0x16c>)
 8000d02:	4b42      	ldr	r3, [pc, #264]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d04:	0011      	movs	r1, r2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff ff47 	bl	8000b9a <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
 8000d0c:	4a40      	ldr	r2, [pc, #256]	@ (8000e10 <MX_ADC_Init+0x174>)
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff ff41 	bl	8000b9a <LL_ADC_REG_SetSequencerChAdd>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	03db      	lsls	r3, r3, #15
 8000d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e14 <MX_ADC_Init+0x178>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f7ff fef1 	bl	8000b08 <LL_ADC_SetCommonPathInternalCh>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	4a30      	ldr	r2, [pc, #192]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	f001 fe63 	bl	8002a18 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_39CYCLES_5);
 8000d52:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d54:	2105      	movs	r1, #5
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fefb 	bl	8000b52 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ff2b 	bl	8000bbc <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff03 	bl	8000b76 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	049b      	lsls	r3, r3, #18
 8000d74:	4a27      	ldr	r2, [pc, #156]	@ (8000e14 <MX_ADC_Init+0x178>)
 8000d76:	0019      	movs	r1, r3
 8000d78:	0010      	movs	r0, r2
 8000d7a:	f7ff feb1 	bl	8000ae0 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ff41 	bl	8000c08 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff4c 	bl	8000c26 <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d8e:	197b      	adds	r3, r7, r5
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000d94:	197b      	adds	r3, r7, r5
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000d9a:	197b      	adds	r3, r7, r5
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000da0:	197b      	adds	r3, r7, r5
 8000da2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000da4:	0019      	movs	r1, r3
 8000da6:	0010      	movs	r0, r2
 8000da8:	f001 fe00 	bl	80029ac <LL_ADC_Init>
  LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_ASYNC);
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff febd 	bl	8000b30 <LL_ADC_SetClock>
  LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_ASYNC_DIV16);
 8000db6:	23e0      	movs	r3, #224	@ 0xe0
 8000db8:	035b      	lsls	r3, r3, #13
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <MX_ADC_Init+0x178>)
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	f7ff fe7a 	bl	8000ab8 <LL_ADC_SetCommonClock>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_ADC_Init+0x170>)
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff ff0a 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <MX_ADC_Init+0x17c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4912      	ldr	r1, [pc, #72]	@ (8000e1c <MX_ADC_Init+0x180>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f7ff f998 	bl	8000108 <__udivsi3>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	001a      	movs	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	189b      	adds	r3, r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	210a      	movs	r1, #10
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff f98e 	bl	8000108 <__udivsi3>
 8000dec:	0003      	movs	r3, r0
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 8000df0:	e002      	b.n	8000df8 <MX_ADC_Init+0x15c>
  {
    wait_loop_index--;
 8000df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df4:	3b01      	subs	r3, #1
 8000df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 8000df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f9      	bne.n	8000df2 <MX_ADC_Init+0x156>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b010      	add	sp, #64	@ 0x40
 8000e06:	bdb0      	pop	{r4, r5, r7, pc}
 8000e08:	04000002 	.word	0x04000002
 8000e0c:	40012400 	.word	0x40012400
 8000e10:	c4020000 	.word	0xc4020000
 8000e14:	40012708 	.word	0x40012708
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	00030d40 	.word	0x00030d40

08000e20 <LL_IOP_GRP1_EnableClock>:
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b004      	add	sp, #16
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <LL_SYSCFG_SetEXTISource+0x48>)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	21ff      	movs	r1, #255	@ 0xff
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	3302      	adds	r3, #2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	589b      	ldr	r3, [r3, r2]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	0c12      	lsrs	r2, r2, #16
 8000e68:	210f      	movs	r1, #15
 8000e6a:	4091      	lsls	r1, r2
 8000e6c:	000a      	movs	r2, r1
 8000e6e:	43d2      	mvns	r2, r2
 8000e70:	401a      	ands	r2, r3
 8000e72:	0011      	movs	r1, r2
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <LL_SYSCFG_SetEXTISource+0x48>)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	24ff      	movs	r4, #255	@ 0xff
 8000e82:	4023      	ands	r3, r4
 8000e84:	430a      	orrs	r2, r1
 8000e86:	3302      	adds	r3, #2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	501a      	str	r2, [r3, r0]
}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b003      	add	sp, #12
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	40010000 	.word	0x40010000

08000e98 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	435b      	muls	r3, r3
 8000eac:	001a      	movs	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	189b      	adds	r3, r3, r2
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	001a      	movs	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	435b      	muls	r3, r3
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	434b      	muls	r3, r1
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	68d9      	ldr	r1, [r3, #12]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	435b      	muls	r3, r3
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	189b      	adds	r3, r3, r2
 8000eec:	43db      	mvns	r3, r3
 8000eee:	400b      	ands	r3, r1
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	435b      	muls	r3, r3
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	434b      	muls	r3, r1
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60da      	str	r2, [r3, #12]
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f26:	2418      	movs	r4, #24
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	f002 fec9 	bl	8003cc8 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	003b      	movs	r3, r7
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f002 fec2 	bl	8003cc8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000f44:	2004      	movs	r0, #4
 8000f46:	f7ff ff6b 	bl	8000e20 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 8000f4a:	2080      	movs	r0, #128	@ 0x80
 8000f4c:	f7ff ff68 	bl	8000e20 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff ff65 	bl	8000e20 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f7ff ff62 	bl	8000e20 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000f5c:	23a0      	movs	r3, #160	@ 0xa0
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	2120      	movs	r1, #32
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff ffd0 	bl	8000f08 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000f68:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_GPIO_Init+0xc8>)
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff ff6d 	bl	8000e4c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	481d      	ldr	r0, [pc, #116]	@ (8000fec <MX_GPIO_Init+0xcc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	f7ff ffa8 	bl	8000ed0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	019b      	lsls	r3, r3, #6
 8000f84:	4819      	ldr	r0, [pc, #100]	@ (8000fec <MX_GPIO_Init+0xcc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	0019      	movs	r1, r3
 8000f8a:	f7ff ff85 	bl	8000e98 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000f8e:	0021      	movs	r1, r4
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	0192      	lsls	r2, r2, #6
 8000f96:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fded 	bl	8002b8c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2201      	movs	r2, #1
 8000fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fca:	003b      	movs	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	003a      	movs	r2, r7
 8000fd2:	23a0      	movs	r3, #160	@ 0xa0
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 ff17 	bl	8002e0c <LL_GPIO_Init>

}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b009      	add	sp, #36	@ 0x24
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	00040003 	.word	0x00040003
 8000fec:	50000800 	.word	0x50000800

08000ff0 <LL_ADC_Enable>:
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <LL_ADC_Enable+0x20>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	2201      	movs	r2, #1
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	7fffffe8 	.word	0x7fffffe8

08001014 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <LL_RCC_HSE_EnableBypass+0x18>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <LL_RCC_HSE_EnableBypass+0x18>)
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	02c9      	lsls	r1, r1, #11
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <LL_RCC_HSE_Enable+0x18>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <LL_RCC_HSE_Enable+0x18>)
 800103a:	2180      	movs	r1, #128	@ 0x80
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000

0800104c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <LL_RCC_HSE_IsReady+0x24>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	401a      	ands	r2, r3
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	029b      	lsls	r3, r3, #10
 800105e:	429a      	cmp	r2, r3
 8001060:	d101      	bne.n	8001066 <LL_RCC_HSE_IsReady+0x1a>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_RCC_HSE_IsReady+0x1c>
 8001066:	2300      	movs	r3, #0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	40021000 	.word	0x40021000

08001074 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <LL_RCC_HSI_Enable+0x18>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <LL_RCC_HSI_Enable+0x18>)
 800107e:	2101      	movs	r1, #1
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	40021000 	.word	0x40021000

08001090 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <LL_RCC_HSI_IsReady+0x1c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	2b04      	cmp	r3, #4
 800109e:	d101      	bne.n	80010a4 <LL_RCC_HSI_IsReady+0x14>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_RCC_HSI_IsReady+0x16>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000

080010b0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80010be:	4013      	ands	r3, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	021a      	lsls	r2, r3, #8
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80010c8:	430a      	orrs	r2, r1
 80010ca:	605a      	str	r2, [r3, #4]
}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	ffffe0ff 	.word	0xffffe0ff

080010dc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <LL_RCC_SetSysClkSource+0x24>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4393      	bics	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <LL_RCC_SetSysClkSource+0x24>)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	40021000 	.word	0x40021000

08001104 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <LL_RCC_GetSysClkSource+0x14>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	40021000 	.word	0x40021000

0800111c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <LL_RCC_SetAHBPrescaler+0x24>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	22f0      	movs	r2, #240	@ 0xf0
 800112a:	4393      	bics	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <LL_RCC_SetAHBPrescaler+0x24>)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	430a      	orrs	r2, r1
 8001134:	60da      	str	r2, [r3, #12]
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40021000 	.word	0x40021000

08001144 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <LL_RCC_SetAPB1Prescaler+0x24>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a06      	ldr	r2, [pc, #24]	@ (800116c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001152:	4013      	ands	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	430a      	orrs	r2, r1
 800115c:	60da      	str	r2, [r3, #12]
}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	40021000 	.word	0x40021000
 800116c:	fffff8ff 	.word	0xfffff8ff

08001170 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <LL_RCC_SetAPB2Prescaler+0x24>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <LL_RCC_SetAPB2Prescaler+0x28>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	430a      	orrs	r2, r1
 8001188:	60da      	str	r2, [r3, #12]
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	40021000 	.word	0x40021000
 8001198:	ffffc7ff 	.word	0xffffc7ff

0800119c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	0c12      	lsrs	r2, r2, #16
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	401a      	ands	r2, r3
 80011b0:	0011      	movs	r1, r2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c1a      	lsrs	r2, r3, #16
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	40021000 	.word	0x40021000

080011cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <LL_RCC_PLL_Enable+0x18>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <LL_RCC_PLL_Enable+0x18>)
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	0449      	lsls	r1, r1, #17
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000

080011e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <LL_RCC_PLL_IsReady+0x24>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	049b      	lsls	r3, r3, #18
 80011f4:	401a      	ands	r2, r3
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	049b      	lsls	r3, r3, #18
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d101      	bne.n	8001202 <LL_RCC_PLL_IsReady+0x1a>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_RCC_PLL_IsReady+0x1c>
 8001202:	2300      	movs	r3, #0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	40021000 	.word	0x40021000

08001210 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a08      	ldr	r2, [pc, #32]	@ (8001244 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8001222:	4013      	ands	r3, r2
 8001224:	0019      	movs	r1, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	431a      	orrs	r2, r3
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8001232:	430a      	orrs	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	40021000 	.word	0x40021000
 8001244:	ff02ffff 	.word	0xff02ffff

08001248 <LL_APB1_GRP1_EnableClock>:
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <LL_APB1_GRP1_EnableClock+0x28>)
 8001252:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <LL_APB1_GRP1_EnableClock+0x28>)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	430a      	orrs	r2, r1
 800125a:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <LL_APB1_GRP1_EnableClock+0x28>)
 800125e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	46c0      	nop			@ (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <LL_APB2_GRP1_EnableClock>:
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <LL_APB2_GRP1_EnableClock+0x28>)
 800127e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <LL_APB2_GRP1_EnableClock+0x28>)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	430a      	orrs	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <LL_APB2_GRP1_EnableClock+0x28>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000

080012a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <LL_FLASH_SetLatency+0x24>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4393      	bics	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <LL_FLASH_SetLatency+0x24>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	40022000 	.word	0x40022000

080012c8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <LL_FLASH_GetLatency+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	40022000 	.word	0x40022000

080012e0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <LL_SYSTICK_EnableIT+0x18>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <LL_SYSTICK_EnableIT+0x18>)
 80012ea:	2102      	movs	r1, #2
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	e000e010 	.word	0xe000e010

080012fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800130a:	4013      	ands	r3, r2
 800130c:	0019      	movs	r1, r3
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	40007000 	.word	0x40007000
 8001324:	ffffe7ff 	.word	0xffffe7ff

08001328 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	621a      	str	r2, [r3, #32]
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}

08001362 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}

0800137a <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}

08001392 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800139a:	f3ef 8310 	mrs	r3, PRIMASK
 800139e:	60bb      	str	r3, [r7, #8]
  return(result);
 80013a0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	2301      	movs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f383 8810 	msr	PRIMASK, r3
}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2220      	movs	r2, #32
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f383 8810 	msr	PRIMASK, r3
}
 80013c6:	46c0      	nop			@ (mov r8, r8)
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  long nextTimeMs = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff ff4a 	bl	8001274 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff2f 	bl	8001248 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f847 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f7ff fd97 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013f2:	f001 fa23 	bl	800283c <MX_USART2_UART_Init>
  MX_ADC_Init();
 80013f6:	f7ff fc51 	bl	8000c9c <MX_ADC_Init>
  MX_TIM22_Init();
 80013fa:	f001 f89b 	bl	8002534 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  rxFifoInit();
 80013fe:	f000 fef3 	bl	80021e8 <rxFifoInit>
  RetargetInit(USART2);
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <main+0x9c>)
 8001404:	0018      	movs	r0, r3
 8001406:	f000 fdab 	bl	8001f60 <RetargetInit>
  getchInit();
 800140a:	f000 ff55 	bl	80022b8 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <main+0x9c>)
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ffbe 	bl	8001392 <LL_USART_EnableIT_RXNE>
  LL_ADC_Enable(ADC1);
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <main+0xa0>)
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fde9 	bl	8000ff0 <LL_ADC_Enable>
//Configuration : 32kHz
// Compteur ==> 0 à 1000
  LL_TIM_OC_SetCompareCH1(TIM22, 0);
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <main+0xa4>)
 8001420:	2100      	movs	r1, #0
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff ff9d 	bl	8001362 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM22, 0);
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <main+0xa4>)
 800142a:	2100      	movs	r1, #0
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff ffa4 	bl	800137a <LL_TIM_OC_SetCompareCH2>
  LL_TIM_CC_EnableChannel(TIM22, LL_TIM_CHANNEL_CH1); /* Enable output on channel 1*/
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <main+0xa4>)
 8001434:	2101      	movs	r1, #1
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff ff84 	bl	8001344 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM22, LL_TIM_CHANNEL_CH2); /* Enable output on channel 2*/
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <main+0xa4>)
 800143e:	2110      	movs	r1, #16
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff7f 	bl	8001344 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM22);
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <main+0xa4>)
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ff6d 	bl	8001328 <LL_TIM_EnableCounter>

  LL_SYSTICK_EnableIT();
 800144e:	f7ff ff47 	bl	80012e0 <LL_SYSTICK_EnableIT>
  while (1)
  {
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!! NOT TO BE DELETED   !!!!!!!!!!!!!!!!!
//!!*///Protocol management	//!!!!!!!!!!!!!!!!
    protocolMain();
 8001452:	f000 fa7d 	bl	8001950 <protocolMain>
// !!!!!!!!!! NOT TO BE DELETED (END) !!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    // Application main
    //Every 10 ms
    if (nextTimeMs <= timeMs)
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <main+0xa8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	dcf8      	bgt.n	8001452 <main+0x82>
    {
      nextTimeMs += 10;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	330a      	adds	r3, #10
 8001464:	607b      	str	r3, [r7, #4]
      mainApp10ms();
 8001466:	f000 f90f 	bl	8001688 <mainApp10ms>
    protocolMain();
 800146a:	e7f2      	b.n	8001452 <main+0x82>
 800146c:	40004400 	.word	0x40004400
 8001470:	40012400 	.word	0x40012400
 8001474:	40011400 	.word	0x40011400
 8001478:	20000280 	.word	0x20000280

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff ff0d 	bl	80012a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	f7ff ff1e 	bl	80012c8 <LL_FLASH_GetLatency>
 800148c:	0003      	movs	r3, r0
 800148e:	2b01      	cmp	r3, #1
 8001490:	d1fa      	bne.n	8001488 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff30 	bl	80012fc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 800149c:	f7ff fdba 	bl	8001014 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80014a0:	f7ff fdc6 	bl	8001030 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	f7ff fdd1 	bl	800104c <LL_RCC_HSE_IsReady>
 80014aa:	0003      	movs	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d1fa      	bne.n	80014a6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_HSI_Enable();
 80014b0:	f7ff fde0 	bl	8001074 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80014b4:	46c0      	nop			@ (mov r8, r8)
 80014b6:	f7ff fdeb 	bl	8001090 <LL_RCC_HSI_IsReady>
 80014ba:	0003      	movs	r3, r0
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d1fa      	bne.n	80014b6 <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80014c0:	2010      	movs	r0, #16
 80014c2:	f7ff fdf5 	bl	80010b0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLL_MUL_8, LL_RCC_PLL_DIV_2);
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	03da      	lsls	r2, r3, #15
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	0319      	lsls	r1, r3, #12
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff fe9c 	bl	8001210 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80014d8:	f7ff fe78 	bl	80011cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	f7ff fe83 	bl	80011e8 <LL_RCC_PLL_IsReady>
 80014e2:	0003      	movs	r3, r0
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d1fa      	bne.n	80014de <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fe17 	bl	800111c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fe28 	bl	8001144 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fe3b 	bl	8001170 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f7ff fdee 	bl	80010dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	f7ff fdff 	bl	8001104 <LL_RCC_GetSysClkSource>
 8001506:	0003      	movs	r3, r0
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d1fa      	bne.n	8001502 <SystemClock_Config+0x86>
  {

  }

  LL_Init1msTick(32000000);
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <SystemClock_Config+0xb0>)
 800150e:	0018      	movs	r0, r3
 8001510:	f002 f9f6 	bl	8003900 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <SystemClock_Config+0xb0>)
 8001516:	0018      	movs	r0, r3
 8001518:	f002 fa02 	bl	8003920 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800151c:	23c0      	movs	r3, #192	@ 0xc0
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fe3b 	bl	800119c <LL_RCC_SetUSARTClockSource>
}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	01e84800 	.word	0x01e84800

08001530 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4013      	ands	r3, r2
 8001546:	041a      	lsls	r2, r3, #16
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	400b      	ands	r3, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <controlLoop>:

//============================================================
//            PID controller
//============================================================
int controlLoop(int p_refValueIn,int p_motorOut)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	// Soustracteur
	float l_epsilon = (p_refValueIn - p_motorOut * Ab);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fa36 	bl	80009dc <__aeabi_i2f>
 8001570:	1c04      	adds	r4, r0, #0
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f7ff fa32 	bl	80009dc <__aeabi_i2f>
 8001578:	1c02      	adds	r2, r0, #0
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <controlLoop+0x58>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1c19      	adds	r1, r3, #0
 8001580:	1c10      	adds	r0, r2, #0
 8001582:	f7fe fe4d 	bl	8000220 <__aeabi_fmul>
 8001586:	1c03      	adds	r3, r0, #0
 8001588:	1c19      	adds	r1, r3, #0
 800158a:	1c20      	adds	r0, r4, #0
 800158c:	f7fe ffa2 	bl	80004d4 <__aeabi_fsub>
 8001590:	1c03      	adds	r3, r0, #0
 8001592:	617b      	str	r3, [r7, #20]

	// Gain proportionnel
	float l_ADe = l_epsilon;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
	float l_ADs = l_ADe * Ad;
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <controlLoop+0x5c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c19      	adds	r1, r3, #0
 800159e:	6938      	ldr	r0, [r7, #16]
 80015a0:	f7fe fe3e 	bl	8000220 <__aeabi_fmul>
 80015a4:	1c03      	adds	r3, r0, #0
 80015a6:	60fb      	str	r3, [r7, #12]

	//return l_Cs; // Retourne la commande moteur calculée
	return l_ADs; // Retourne la commande moteur calculée
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff f9f7 	bl	800099c <__aeabi_f2iz>
 80015ae:	0003      	movs	r3, r0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b007      	add	sp, #28
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000000 	.word	0x20000000

080015c0 <onNewFrameCommand>:



//On new data frame
void onNewFrameCommand(uint8_t p_frameCode)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	701a      	strb	r2, [r3, #0]
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <onNewFrameByte>:
void onNewFrameByte(uint8_t p_frameCode, int8_t *p_byte, int p_dataCount)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	230f      	movs	r3, #15
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	1c02      	adds	r2, r0, #0
 80015e4:	701a      	strb	r2, [r3, #0]
}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b004      	add	sp, #16
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <onNewFrameShort>:
void onNewFrameShort(uint8_t p_frameCode, int16_t *p_short, int p_dataCount)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	210f      	movs	r1, #15
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	1c02      	adds	r2, r0, #0
 8001600:	701a      	strb	r2, [r3, #0]
  switch (p_frameCode)
 8001602:	187b      	adds	r3, r7, r1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b41      	cmp	r3, #65	@ 0x41
 8001608:	d002      	beq.n	8001610 <onNewFrameShort+0x20>
 800160a:	2b50      	cmp	r3, #80	@ 0x50
 800160c:	d00c      	beq.n	8001628 <onNewFrameShort+0x38>
      break;
    case 'P':
      Ad = p_short[0];
      break;
  }
}
 800160e:	e015      	b.n	800163c <onNewFrameShort+0x4c>
      g_startStep = 1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <onNewFrameShort+0x54>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
      g_motorStep = p_short[0];
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2200      	movs	r2, #0
 800161a:	5e9a      	ldrsh	r2, [r3, r2]
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <onNewFrameShort+0x58>)
 800161e:	801a      	strh	r2, [r3, #0]
      g_data1Cnt = 0;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <onNewFrameShort+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	801a      	strh	r2, [r3, #0]
      break;
 8001626:	e009      	b.n	800163c <onNewFrameShort+0x4c>
      Ad = p_short[0];
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2200      	movs	r2, #0
 800162c:	5e9b      	ldrsh	r3, [r3, r2]
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff f9d4 	bl	80009dc <__aeabi_i2f>
 8001634:	1c02      	adds	r2, r0, #0
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <onNewFrameShort+0x60>)
 8001638:	601a      	str	r2, [r3, #0]
      break;
 800163a:	46c0      	nop			@ (mov r8, r8)
}
 800163c:	46c0      	nop			@ (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000088 	.word	0x20000088
 8001648:	2000008a 	.word	0x2000008a
 800164c:	2000008c 	.word	0x2000008c
 8001650:	20000000 	.word	0x20000000

08001654 <onNewFrameInt>:
void onNewFrameInt(uint8_t p_frameCode, int32_t *p_int, int p_dataCount)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	230f      	movs	r3, #15
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	1c02      	adds	r2, r0, #0
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}

0800166e <onNewFrameFloat>:
void onNewFrameFloat(uint8_t p_frameCodet, float *p_float, int p_dataCount)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	230f      	movs	r3, #15
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	1c02      	adds	r2, r0, #0
 800167e:	701a      	strb	r2, [r3, #0]
}
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <mainApp10ms>:

//called once every 10 ms
void mainApp10ms(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  static int l_refValue = 2048; // Valeur de consigne initiale
  static int l_stepDelay=0;
  int l_motor = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  int l_adcValue;

  // Gestion de l'alternance de la consigne moteur
  //Auto step
  l_stepDelay++;
 8001692:	4b40      	ldr	r3, [pc, #256]	@ (8001794 <mainApp10ms+0x10c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	4b3e      	ldr	r3, [pc, #248]	@ (8001794 <mainApp10ms+0x10c>)
 800169a:	601a      	str	r2, [r3, #0]
  if (l_stepDelay==400) //every 4s
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <mainApp10ms+0x10c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	23c8      	movs	r3, #200	@ 0xc8
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d117      	bne.n	80016d8 <mainApp10ms+0x50>
  {
    l_stepDelay=0;
 80016a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001794 <mainApp10ms+0x10c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    if (g_motorStep==1048)
 80016ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <mainApp10ms+0x110>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	5e9a      	ldrsh	r2, [r3, r2]
 80016b4:	2383      	movs	r3, #131	@ 0x83
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d106      	bne.n	80016ca <mainApp10ms+0x42>
    {
      g_startStep = 1;
 80016bc:	4b37      	ldr	r3, [pc, #220]	@ (800179c <mainApp10ms+0x114>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
      g_motorStep=3048;
 80016c2:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <mainApp10ms+0x110>)
 80016c4:	4a36      	ldr	r2, [pc, #216]	@ (80017a0 <mainApp10ms+0x118>)
 80016c6:	801a      	strh	r2, [r3, #0]
 80016c8:	e006      	b.n	80016d8 <mainApp10ms+0x50>
    }
    else
    {
      g_startStep = 1;
 80016ca:	4b34      	ldr	r3, [pc, #208]	@ (800179c <mainApp10ms+0x114>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
      g_motorStep=1048;
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <mainApp10ms+0x110>)
 80016d2:	2283      	movs	r2, #131	@ 0x83
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	801a      	strh	r2, [r3, #0]
    }
  }


  //Toggle LED state (PA5)
  LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016d8:	23a0      	movs	r3, #160	@ 0xa0
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	2120      	movs	r1, #32
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff ff26 	bl	8001530 <LL_GPIO_TogglePin>

  //Read potentiometer value (0-4095)
  //(1 LSB=3.3V/4096)
  l_adcValue = readADC();
 80016e4:	f000 f8b8 	bl	8001858 <readADC>
 80016e8:	0003      	movs	r3, r0
 80016ea:	603b      	str	r3, [r7, #0]

  // Gestion de la séquence de step moteur
  //l_motor step
  if (g_startStep == 1)
 80016ec:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <mainApp10ms+0x114>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d111      	bne.n	800171a <mainApp10ms+0x92>
  {
    l_refValue = g_motorStep; // Mise à jour de la consigne
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <mainApp10ms+0x110>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	5e9b      	ldrsh	r3, [r3, r2]
 80016fc:	001a      	movs	r2, r3
 80016fe:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <mainApp10ms+0x11c>)
 8001700:	601a      	str	r2, [r3, #0]
    g_data1Cnt = 0;
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <mainApp10ms+0x120>)
 8001704:	2200      	movs	r2, #0
 8001706:	801a      	strh	r2, [r3, #0]
    g_startStep++;
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <mainApp10ms+0x114>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	b25a      	sxtb	r2, r3
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <mainApp10ms+0x114>)
 8001718:	701a      	strb	r2, [r3, #0]
  }
  if (g_startStep == 2)
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <mainApp10ms+0x114>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d125      	bne.n	8001770 <mainApp10ms+0xe8>
  {
    g_data1[g_data1Cnt] = l_adcValue; // Enregistrement de la valeur ADC
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <mainApp10ms+0x120>)
 8001726:	2200      	movs	r2, #0
 8001728:	5e9b      	ldrsh	r3, [r3, r2]
 800172a:	001a      	movs	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b219      	sxth	r1, r3
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <mainApp10ms+0x124>)
 8001732:	0052      	lsls	r2, r2, #1
 8001734:	52d1      	strh	r1, [r2, r3]
    g_data1Cnt++;
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <mainApp10ms+0x120>)
 8001738:	2200      	movs	r2, #0
 800173a:	5e9b      	ldrsh	r3, [r3, r2]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	b21a      	sxth	r2, r3
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <mainApp10ms+0x120>)
 8001746:	801a      	strh	r2, [r3, #0]
    if (g_data1Cnt >= MAX_DATA1)
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <mainApp10ms+0x120>)
 800174a:	2200      	movs	r2, #0
 800174c:	5e9b      	ldrsh	r3, [r3, r2]
 800174e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001750:	dd0e      	ble.n	8001770 <mainApp10ms+0xe8>
    {
      g_startStep = 0;
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <mainApp10ms+0x114>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
      writeFrameShort('A', g_data1, g_data1Cnt); // Envoi des données
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <mainApp10ms+0x120>)
 800175a:	2200      	movs	r2, #0
 800175c:	5e9b      	ldrsh	r3, [r3, r2]
 800175e:	001a      	movs	r2, r3
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <mainApp10ms+0x124>)
 8001762:	0019      	movs	r1, r3
 8001764:	2041      	movs	r0, #65	@ 0x41
 8001766:	f000 f9da 	bl	8001b1e <writeFrameShort>
      g_startStep = 0;
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <mainApp10ms+0x114>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

  }

  // Calcul de la commande moteur
  //Calculate new l_motor voltage
  l_motor=controlLoop(l_refValue,l_adcValue);
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <mainApp10ms+0x11c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	0011      	movs	r1, r2
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff fef1 	bl	8001560 <controlLoop>
 800177e:	0003      	movs	r3, r0
 8001780:	607b      	str	r3, [r7, #4]
  // Application de la tension moteur
    //set motor voltage
  setMotor(l_motor);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	b21b      	sxth	r3, r3
 8001786:	0018      	movs	r0, r3
 8001788:	f000 f88c 	bl	80018a4 <setMotor>
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000224 	.word	0x20000224
 8001798:	2000008a 	.word	0x2000008a
 800179c:	20000088 	.word	0x20000088
 80017a0:	00000be8 	.word	0x00000be8
 80017a4:	20000008 	.word	0x20000008
 80017a8:	2000008c 	.word	0x2000008c
 80017ac:	20000090 	.word	0x20000090

080017b0 <LL_ADC_REG_SetSequencerChannels>:
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	035b      	lsls	r3, r3, #13
 80017be:	0b5a      	lsrs	r2, r3, #13
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_ADC_REG_StartConversion>:
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <LL_ADC_REG_StartConversion+0x20>)
 80017da:	4013      	ands	r3, r2
 80017dc:	2204      	movs	r2, #4
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
}
 80017e4:	46c0      	nop			@ (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	7fffffe8 	.word	0x7fffffe8

080017f0 <LL_ADC_REG_ReadConversionData12>:
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	b29b      	uxth	r3, r3
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}

08001806 <LL_ADC_IsActiveFlag_EOC>:
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2204      	movs	r2, #4
 8001814:	4013      	ands	r3, r2
 8001816:	3b04      	subs	r3, #4
 8001818:	425a      	negs	r2, r3
 800181a:	4153      	adcs	r3, r2
 800181c:	b2db      	uxtb	r3, r3
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}

08001826 <LL_TIM_OC_SetCompareCH1>:
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}

0800183e <LL_TIM_OC_SetCompareCH2>:
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <readADC>:
//#define DISPLAY_V_ADC //Print ADC voltage on serial port
//#define DISPLAY_V_MOTOR //Print motor voltage on serial port

//Return ADC converter value (0-4095) (1 LSB=3.3V/4096)
uint16_t readADC(void)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  uint16_t l_value;
  LL_ADC_REG_SetSequencerChannels(ADC1,LL_ADC_CHANNEL_1);
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <readADC+0x44>)
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <readADC+0x48>)
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ffa3 	bl	80017b0 <LL_ADC_REG_SetSequencerChannels>
  LL_ADC_REG_StartConversion(ADC1);
 800186a:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <readADC+0x48>)
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff ffad 	bl	80017cc <LL_ADC_REG_StartConversion>
  while (LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <readADC+0x48>)
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff ffc5 	bl	8001806 <LL_ADC_IsActiveFlag_EOC>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d0f9      	beq.n	8001874 <readADC+0x1c>
  l_value=LL_ADC_REG_ReadConversionData12(ADC1);
 8001880:	1dbc      	adds	r4, r7, #6
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <readADC+0x48>)
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff ffb3 	bl	80017f0 <LL_ADC_REG_ReadConversionData12>
 800188a:	0003      	movs	r3, r0
 800188c:	8023      	strh	r3, [r4, #0]
    IntPartADC=((long)adcValue*33)/40960;
    RemainPartADC=(((((long)adcValue*330))%409600)*10)/4096;
    printf("Vpot=%d.%3.3d\r\n",IntPartADC,RemainPartADC );
  }
#endif //DISPLAY_V_ADC
  return l_value;
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	881b      	ldrh	r3, [r3, #0]
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b003      	add	sp, #12
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	04000002 	.word	0x04000002
 80018a0:	40012400 	.word	0x40012400

080018a4 <setMotor>:


//Set motor voltage ratio (-MAX_MOTOR to +MAX_MOTOR)
void setMotor(int16_t p_value)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	0002      	movs	r2, r0
 80018ac:	1dbb      	adds	r3, r7, #6
 80018ae:	801a      	strh	r2, [r3, #0]
  if (p_value>=MAX_MOTOR)
 80018b0:	1dbb      	adds	r3, r7, #6
 80018b2:	2200      	movs	r2, #0
 80018b4:	5e9a      	ldrsh	r2, [r3, r2]
 80018b6:	23fa      	movs	r3, #250	@ 0xfa
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	429a      	cmp	r2, r3
 80018bc:	db03      	blt.n	80018c6 <setMotor+0x22>
	p_value=MAX_MOTOR;
 80018be:	1dbb      	adds	r3, r7, #6
 80018c0:	22fa      	movs	r2, #250	@ 0xfa
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	801a      	strh	r2, [r3, #0]
  if (p_value<=-MAX_MOTOR)
 80018c6:	1dbb      	adds	r3, r7, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	5e9b      	ldrsh	r3, [r3, r2]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <setMotor+0xa0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	da02      	bge.n	80018d8 <setMotor+0x34>
	p_value=-(MAX_MOTOR);
 80018d2:	1dbb      	adds	r3, r7, #6
 80018d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001948 <setMotor+0xa4>)
 80018d6:	801a      	strh	r2, [r3, #0]
  if (p_value==0)
 80018d8:	1dbb      	adds	r3, r7, #6
 80018da:	2200      	movs	r2, #0
 80018dc:	5e9b      	ldrsh	r3, [r3, r2]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <setMotor+0x54>
  {
    LL_TIM_OC_SetCompareCH1(TIM22,0);
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <setMotor+0xa8>)
 80018e4:	2100      	movs	r1, #0
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff ff9d 	bl	8001826 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM22,0);
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <setMotor+0xa8>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7ff ffa4 	bl	800183e <LL_TIM_OC_SetCompareCH2>
    RemainPartADC=((((long)p_value*1200))%(MAX_MOTOR*100)*10)/MAX_MOTOR;
    if (RemainPartADC<0) RemainPartADC=-RemainPartADC;
    printf("Vmotor=%d.%3.3d\r",IntPartADC,RemainPartADC );
  }
#endif //DISPLAY_V_MOTOR
}
 80018f6:	e021      	b.n	800193c <setMotor+0x98>
  else if (p_value>0) //>0
 80018f8:	1dbb      	adds	r3, r7, #6
 80018fa:	2200      	movs	r2, #0
 80018fc:	5e9b      	ldrsh	r3, [r3, r2]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dd0d      	ble.n	800191e <setMotor+0x7a>
    LL_TIM_OC_SetCompareCH1(TIM22,p_value);
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	2200      	movs	r2, #0
 8001906:	5e9b      	ldrsh	r3, [r3, r2]
 8001908:	4a10      	ldr	r2, [pc, #64]	@ (800194c <setMotor+0xa8>)
 800190a:	0019      	movs	r1, r3
 800190c:	0010      	movs	r0, r2
 800190e:	f7ff ff8a 	bl	8001826 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM22,0);
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <setMotor+0xa8>)
 8001914:	2100      	movs	r1, #0
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff ff91 	bl	800183e <LL_TIM_OC_SetCompareCH2>
}
 800191c:	e00e      	b.n	800193c <setMotor+0x98>
    LL_TIM_OC_SetCompareCH1(TIM22,0);
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <setMotor+0xa8>)
 8001920:	2100      	movs	r1, #0
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff ff7f 	bl	8001826 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM22,-p_value);
 8001928:	1dbb      	adds	r3, r7, #6
 800192a:	2200      	movs	r2, #0
 800192c:	5e9b      	ldrsh	r3, [r3, r2]
 800192e:	425b      	negs	r3, r3
 8001930:	001a      	movs	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <setMotor+0xa8>)
 8001934:	0011      	movs	r1, r2
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff ff81 	bl	800183e <LL_TIM_OC_SetCompareCH2>
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	fffffc19 	.word	0xfffffc19
 8001948:	fffffc18 	.word	0xfffffc18
 800194c:	40011400 	.word	0x40011400

08001950 <protocolMain>:


//Protocol main function
void protocolMain(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  int l_car;
  l_car = rxFifoRead ();
 8001956:	f000 fc81 	bl	800225c <rxFifoRead>
 800195a:	0003      	movs	r3, r0
 800195c:	607b      	str	r3, [r7, #4]
  if (l_car != -1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3301      	adds	r3, #1
 8001962:	d004      	beq.n	800196e <protocolMain+0x1e>
  {
    onReceiveCar (l_car);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	0018      	movs	r0, r3
 800196a:	f000 f95b 	bl	8001c24 <onReceiveCar>
  }
}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}

08001976 <writeByte>:
  float f32[MAX_DATA_f32];
}dataParameter;

//Write a byte in "pseudo hexa" ascii format
void writeByte(int8_t p_byte )
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	0002      	movs	r2, r0
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	701a      	strb	r2, [r3, #0]
  serialWrite(0x30 | ((p_byte>>4)&0x0F));
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	b2db      	uxtb	r3, r3
 800198a:	b25b      	sxtb	r3, r3
 800198c:	2230      	movs	r2, #48	@ 0x30
 800198e:	4313      	orrs	r3, r2
 8001990:	b25b      	sxtb	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	0018      	movs	r0, r3
 8001996:	f000 fc95 	bl	80022c4 <serialWrite>
  serialWrite(0x30 | (p_byte&0x0F));
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	220f      	movs	r2, #15
 80019a0:	4013      	ands	r3, r2
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	2230      	movs	r2, #48	@ 0x30
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 fc89 	bl	80022c4 <serialWrite>
}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}

080019ba <writeShort>:
//Write a short in "pseudo hexa" ascii format - little-endian
void writeShort(int16_t p_short)
{
 80019ba:	b590      	push	{r4, r7, lr}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	0002      	movs	r2, r0
 80019c2:	1dbb      	adds	r3, r7, #6
 80019c4:	801a      	strh	r2, [r3, #0]
  convNumByte l_conv;
  l_conv.i16=p_short;
 80019c6:	240c      	movs	r4, #12
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	1dba      	adds	r2, r7, #6
 80019cc:	8812      	ldrh	r2, [r2, #0]
 80019ce:	801a      	strh	r2, [r3, #0]
  writeByte(l_conv.bytes[0]); //Little-indian
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff ffcd 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[1]);
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff ffc7 	bl	8001976 <writeByte>
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b005      	add	sp, #20
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <writeInt>:
//Write an int in "pseudo hexa" ascii format - little-endian
void writeInt(int32_t p_int)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  convNumByte l_conv;
  l_conv.i32=p_int;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
  writeByte(l_conv.bytes[0]);
 80019fc:	240c      	movs	r4, #12
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff ffb6 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[1]);
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff ffb0 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[2]);
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	789b      	ldrb	r3, [r3, #2]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff ffaa 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[3]);
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	78db      	ldrb	r3, [r3, #3]
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff ffa4 	bl	8001976 <writeByte>
}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b005      	add	sp, #20
 8001a34:	bd90      	pop	{r4, r7, pc}

08001a36 <writeFloat>:
//Write a float in "pseudo hexa" ascii format - little-endian
void writeFloat(float p_float)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  convNumByte l_conv;
  l_conv.f32=p_float;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
  writeByte(l_conv.bytes[0]);
 8001a42:	240c      	movs	r4, #12
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff ff93 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[1]);
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff8d 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[2]);
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff ff87 	bl	8001976 <writeByte>
  writeByte(l_conv.bytes[3]);
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	78db      	ldrb	r3, [r3, #3]
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff ff81 	bl	8001976 <writeByte>
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b005      	add	sp, #20
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <writeFrameStart>:
//Write start frame byte
void writeFrameStart(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  serialWrite(FRAME_START);
 8001a80:	2055      	movs	r0, #85	@ 0x55
 8001a82:	f000 fc1f 	bl	80022c4 <serialWrite>
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <writeFrameStop>:
//Write end frame byte
void writeFrameStop(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  serialWrite(FRAME_STOP);
 8001a90:	20aa      	movs	r0, #170	@ 0xaa
 8001a92:	f000 fc17 	bl	80022c4 <serialWrite>
}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <writeFrame>:

//Write a frame without any data
void writeFrame(uint8_t p_code)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	701a      	strb	r2, [r3, #0]
  writeFrameStart();
 8001aa8:	f7ff ffe8 	bl	8001a7c <writeFrameStart>
  serialWrite(p_code);
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 fc07 	bl	80022c4 <serialWrite>
  serialWrite('e');
 8001ab6:	2065      	movs	r0, #101	@ 0x65
 8001ab8:	f000 fc04 	bl	80022c4 <serialWrite>
  writeFrameStop();
 8001abc:	f7ff ffe6 	bl	8001a8c <writeFrameStop>
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <writeFrameByte>:
//Write a frame with p_size bytes
void writeFrameByte(uint8_t p_code, int8_t * p_bytes, int p_size)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	240f      	movs	r4, #15
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	1c02      	adds	r2, r0, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8001ada:	f7ff ffcf 	bl	8001a7c <writeFrameStart>
  serialWrite(p_code);
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 fbee 	bl	80022c4 <serialWrite>
  serialWrite('b');
 8001ae8:	2062      	movs	r0, #98	@ 0x62
 8001aea:	f000 fbeb 	bl	80022c4 <serialWrite>
  for(i=0;i<p_size;i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e00a      	b.n	8001b0a <writeFrameByte+0x42>
  {
    writeByte(p_bytes[i]);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff ff39 	bl	8001976 <writeByte>
  for(i=0;i<p_size;i++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbf0      	blt.n	8001af4 <writeFrameByte+0x2c>
  }
  writeFrameStop();
 8001b12:	f7ff ffbb 	bl	8001a8c <writeFrameStop>
}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b007      	add	sp, #28
 8001b1c:	bd90      	pop	{r4, r7, pc}

08001b1e <writeFrameShort>:
//Write a frame with p_size shorts
void writeFrameShort(uint8_t p_code, int16_t * p_short, int p_size)
{
 8001b1e:	b590      	push	{r4, r7, lr}
 8001b20:	b087      	sub	sp, #28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	240f      	movs	r4, #15
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	1c02      	adds	r2, r0, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8001b30:	f7ff ffa4 	bl	8001a7c <writeFrameStart>
  serialWrite(p_code);
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f000 fbc3 	bl	80022c4 <serialWrite>
  serialWrite('s');
 8001b3e:	2073      	movs	r0, #115	@ 0x73
 8001b40:	f000 fbc0 	bl	80022c4 <serialWrite>
  for(i=0;i<p_size;i++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e00b      	b.n	8001b62 <writeFrameShort+0x44>
  {
    writeShort(p_short[i]);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	2200      	movs	r2, #0
 8001b54:	5e9b      	ldrsh	r3, [r3, r2]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff ff2f 	bl	80019ba <writeShort>
  for(i=0;i<p_size;i++)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dbef      	blt.n	8001b4a <writeFrameShort+0x2c>
  }
  writeFrameStop();
 8001b6a:	f7ff ff8f 	bl	8001a8c <writeFrameStop>
}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b007      	add	sp, #28
 8001b74:	bd90      	pop	{r4, r7, pc}

08001b76 <writeFrameInt>:
//Write a frame with p_size ints
void writeFrameInt(uint8_t p_code, int32_t * p_int, int p_size)
{
 8001b76:	b590      	push	{r4, r7, lr}
 8001b78:	b087      	sub	sp, #28
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	240f      	movs	r4, #15
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	1c02      	adds	r2, r0, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8001b88:	f7ff ff78 	bl	8001a7c <writeFrameStart>
  serialWrite(p_code);
 8001b8c:	193b      	adds	r3, r7, r4
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 fb97 	bl	80022c4 <serialWrite>
  serialWrite('i');
 8001b96:	2069      	movs	r0, #105	@ 0x69
 8001b98:	f000 fb94 	bl	80022c4 <serialWrite>
  for(i=0;i<p_size;i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <writeFrameInt+0x42>
  {
    writeInt(p_int[i]);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff ff1f 	bl	80019f0 <writeInt>
  for(i=0;i<p_size;i++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <writeFrameInt+0x2c>
  }
  writeFrameStop();
 8001bc0:	f7ff ff64 	bl	8001a8c <writeFrameStop>
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b007      	add	sp, #28
 8001bca:	bd90      	pop	{r4, r7, pc}

08001bcc <writeFrameFloat>:
//Write a frame with p_size ints
void writeFrameFloat(uint8_t p_code, float * p_float, int p_size)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	240f      	movs	r4, #15
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
  int i;
  writeFrameStart();
 8001bde:	f7ff ff4d 	bl	8001a7c <writeFrameStart>
  serialWrite(p_code);
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 fb6c 	bl	80022c4 <serialWrite>
  serialWrite('f');
 8001bec:	2066      	movs	r0, #102	@ 0x66
 8001bee:	f000 fb69 	bl	80022c4 <serialWrite>
  for(i=0;i<p_size;i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e00a      	b.n	8001c0e <writeFrameFloat+0x42>
  {
    writeFloat(p_float[i]);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	1c18      	adds	r0, r3, #0
 8001c04:	f7ff ff17 	bl	8001a36 <writeFloat>
  for(i=0;i<p_size;i++)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf0      	blt.n	8001bf8 <writeFrameFloat+0x2c>
  }
  writeFrameStop();
 8001c16:	f7ff ff39 	bl	8001a8c <writeFrameStop>
}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b007      	add	sp, #28
 8001c20:	bd90      	pop	{r4, r7, pc}
	...

08001c24 <onReceiveCar>:
}rxState;


//Protocol management
void onReceiveCar(uint8_t p_car)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	701a      	strb	r2, [r3, #0]
  static uint8_t l_dataCount=0;
  static uint8_t l_pseudoHexa[2];
  static uint8_t l_pseudoHexaCnt=0;


  if (p_car==FRAME_STOP)
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2baa      	cmp	r3, #170	@ 0xaa
 8001c36:	d102      	bne.n	8001c3e <onReceiveCar+0x1a>
  {
      l_stateRx=R_FRAME_STOP;
 8001c38:	4bbd      	ldr	r3, [pc, #756]	@ (8001f30 <onReceiveCar+0x30c>)
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	701a      	strb	r2, [r3, #0]
  }

  switch(l_stateRx)
 8001c3e:	4bbc      	ldr	r3, [pc, #752]	@ (8001f30 <onReceiveCar+0x30c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d900      	bls.n	8001c48 <onReceiveCar+0x24>
 8001c46:	e16e      	b.n	8001f26 <onReceiveCar+0x302>
 8001c48:	009a      	lsls	r2, r3, #2
 8001c4a:	4bba      	ldr	r3, [pc, #744]	@ (8001f34 <onReceiveCar+0x310>)
 8001c4c:	18d3      	adds	r3, r2, r3
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	469f      	mov	pc, r3
  {
    case R_FRAME_STOP:  //end of frame
      switch(l_frameType)
 8001c52:	4bb9      	ldr	r3, [pc, #740]	@ (8001f38 <onReceiveCar+0x314>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b62      	subs	r3, #98	@ 0x62
 8001c58:	2b11      	cmp	r3, #17
 8001c5a:	d900      	bls.n	8001c5e <onReceiveCar+0x3a>
 8001c5c:	e089      	b.n	8001d72 <onReceiveCar+0x14e>
 8001c5e:	009a      	lsls	r2, r3, #2
 8001c60:	4bb6      	ldr	r3, [pc, #728]	@ (8001f3c <onReceiveCar+0x318>)
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	469f      	mov	pc, r3
      {
	//    'e' (0x65) = command frame
	case 'e':
	  //mode test
	  if (l_frameCode == 254)
 8001c68:	4bb5      	ldr	r3, [pc, #724]	@ (8001f40 <onReceiveCar+0x31c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c6e:	d103      	bne.n	8001c78 <onReceiveCar+0x54>
	  {
	    testProtocol=1;  //library test mode
 8001c70:	4bb4      	ldr	r3, [pc, #720]	@ (8001f44 <onReceiveCar+0x320>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
	  }
	  else if (testProtocol==0) //test mode?
	    onNewFrameCommand(l_frameCode);
	  else
	    writeFrame(l_frameCode); //echo
	  break;
 8001c76:	e07c      	b.n	8001d72 <onReceiveCar+0x14e>
	  else if (l_frameCode == 255)
 8001c78:	4bb1      	ldr	r3, [pc, #708]	@ (8001f40 <onReceiveCar+0x31c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2bff      	cmp	r3, #255	@ 0xff
 8001c7e:	d103      	bne.n	8001c88 <onReceiveCar+0x64>
	    testProtocol=0;  //library test mode end
 8001c80:	4bb0      	ldr	r3, [pc, #704]	@ (8001f44 <onReceiveCar+0x320>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
	  break;
 8001c86:	e074      	b.n	8001d72 <onReceiveCar+0x14e>
	  else if (testProtocol==0) //test mode?
 8001c88:	4bae      	ldr	r3, [pc, #696]	@ (8001f44 <onReceiveCar+0x320>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <onReceiveCar+0x7a>
	    onNewFrameCommand(l_frameCode);
 8001c92:	4bab      	ldr	r3, [pc, #684]	@ (8001f40 <onReceiveCar+0x31c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff fc92 	bl	80015c0 <onNewFrameCommand>
	  break;
 8001c9c:	e069      	b.n	8001d72 <onReceiveCar+0x14e>
	    writeFrame(l_frameCode); //echo
 8001c9e:	4ba8      	ldr	r3, [pc, #672]	@ (8001f40 <onReceiveCar+0x31c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff fefa 	bl	8001a9c <writeFrame>
	  break;
 8001ca8:	e063      	b.n	8001d72 <onReceiveCar+0x14e>
	//    'b' (0x62) = integer 8 bits
	case 'b':
	  if (testProtocol==0) //test mode?
 8001caa:	4ba6      	ldr	r3, [pc, #664]	@ (8001f44 <onReceiveCar+0x320>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <onReceiveCar+0xa4>
	    onNewFrameByte(l_frameCode,l_data.i8,l_dataCount);
 8001cb4:	4ba2      	ldr	r3, [pc, #648]	@ (8001f40 <onReceiveCar+0x31c>)
 8001cb6:	7818      	ldrb	r0, [r3, #0]
 8001cb8:	4ba3      	ldr	r3, [pc, #652]	@ (8001f48 <onReceiveCar+0x324>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	4ba3      	ldr	r3, [pc, #652]	@ (8001f4c <onReceiveCar+0x328>)
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	f7ff fc87 	bl	80015d4 <onNewFrameByte>
	  else
	    writeFrameByte(l_frameCode,l_data.i8,l_dataCount); //echo for test
	  break;
 8001cc6:	e054      	b.n	8001d72 <onReceiveCar+0x14e>
	    writeFrameByte(l_frameCode,l_data.i8,l_dataCount); //echo for test
 8001cc8:	4b9d      	ldr	r3, [pc, #628]	@ (8001f40 <onReceiveCar+0x31c>)
 8001cca:	7818      	ldrb	r0, [r3, #0]
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	@ (8001f48 <onReceiveCar+0x324>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8001f4c <onReceiveCar+0x328>)
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	f7ff fef7 	bl	8001ac8 <writeFrameByte>
	  break;
 8001cda:	e04a      	b.n	8001d72 <onReceiveCar+0x14e>
	//    's' (0x73) = integer 16 bits
	case 's':
	  if (testProtocol==0) //test mode?
 8001cdc:	4b99      	ldr	r3, [pc, #612]	@ (8001f44 <onReceiveCar+0x320>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <onReceiveCar+0xd6>
	    onNewFrameShort(l_frameCode,l_data.i16,l_dataCount);
 8001ce6:	4b96      	ldr	r3, [pc, #600]	@ (8001f40 <onReceiveCar+0x31c>)
 8001ce8:	7818      	ldrb	r0, [r3, #0]
 8001cea:	4b97      	ldr	r3, [pc, #604]	@ (8001f48 <onReceiveCar+0x324>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	001a      	movs	r2, r3
 8001cf0:	4b96      	ldr	r3, [pc, #600]	@ (8001f4c <onReceiveCar+0x328>)
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	f7ff fc7c 	bl	80015f0 <onNewFrameShort>
	  else
	    writeFrameShort(l_frameCode,l_data.i16,l_dataCount); //echo for test
	  break;
 8001cf8:	e03b      	b.n	8001d72 <onReceiveCar+0x14e>
	    writeFrameShort(l_frameCode,l_data.i16,l_dataCount); //echo for test
 8001cfa:	4b91      	ldr	r3, [pc, #580]	@ (8001f40 <onReceiveCar+0x31c>)
 8001cfc:	7818      	ldrb	r0, [r3, #0]
 8001cfe:	4b92      	ldr	r3, [pc, #584]	@ (8001f48 <onReceiveCar+0x324>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	001a      	movs	r2, r3
 8001d04:	4b91      	ldr	r3, [pc, #580]	@ (8001f4c <onReceiveCar+0x328>)
 8001d06:	0019      	movs	r1, r3
 8001d08:	f7ff ff09 	bl	8001b1e <writeFrameShort>
	  break;
 8001d0c:	e031      	b.n	8001d72 <onReceiveCar+0x14e>
	//    'i' (0x6C) = integer 32 bits
	case 'i':
	  if (testProtocol==0) //test mode?
 8001d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f44 <onReceiveCar+0x320>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <onReceiveCar+0x108>
	    onNewFrameInt(l_frameCode,l_data.i32,l_dataCount);
 8001d18:	4b89      	ldr	r3, [pc, #548]	@ (8001f40 <onReceiveCar+0x31c>)
 8001d1a:	7818      	ldrb	r0, [r3, #0]
 8001d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8001f48 <onReceiveCar+0x324>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	001a      	movs	r2, r3
 8001d22:	4b8a      	ldr	r3, [pc, #552]	@ (8001f4c <onReceiveCar+0x328>)
 8001d24:	0019      	movs	r1, r3
 8001d26:	f7ff fc95 	bl	8001654 <onNewFrameInt>
	  else
	    writeFrameInt(l_frameCode,l_data.i32,l_dataCount); //echo for test
	  break;
 8001d2a:	e022      	b.n	8001d72 <onReceiveCar+0x14e>
	    writeFrameInt(l_frameCode,l_data.i32,l_dataCount); //echo for test
 8001d2c:	4b84      	ldr	r3, [pc, #528]	@ (8001f40 <onReceiveCar+0x31c>)
 8001d2e:	7818      	ldrb	r0, [r3, #0]
 8001d30:	4b85      	ldr	r3, [pc, #532]	@ (8001f48 <onReceiveCar+0x324>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	001a      	movs	r2, r3
 8001d36:	4b85      	ldr	r3, [pc, #532]	@ (8001f4c <onReceiveCar+0x328>)
 8001d38:	0019      	movs	r1, r3
 8001d3a:	f7ff ff1c 	bl	8001b76 <writeFrameInt>
	  break;
 8001d3e:	e018      	b.n	8001d72 <onReceiveCar+0x14e>
	//    'f' (0x66) = float 32 bits
	case 'f':
	  if (testProtocol==0) //test mode?
 8001d40:	4b80      	ldr	r3, [pc, #512]	@ (8001f44 <onReceiveCar+0x320>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <onReceiveCar+0x13a>
	    onNewFrameFloat(l_frameCode,l_data.f32,l_dataCount);
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <onReceiveCar+0x31c>)
 8001d4c:	7818      	ldrb	r0, [r3, #0]
 8001d4e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f48 <onReceiveCar+0x324>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	001a      	movs	r2, r3
 8001d54:	4b7d      	ldr	r3, [pc, #500]	@ (8001f4c <onReceiveCar+0x328>)
 8001d56:	0019      	movs	r1, r3
 8001d58:	f7ff fc89 	bl	800166e <onNewFrameFloat>
	  else
	    writeFrameFloat(l_frameCode,l_data.f32,l_dataCount); //echo for test
	  break;
 8001d5c:	e008      	b.n	8001d70 <onReceiveCar+0x14c>
	    writeFrameFloat(l_frameCode,l_data.f32,l_dataCount); //echo for test
 8001d5e:	4b78      	ldr	r3, [pc, #480]	@ (8001f40 <onReceiveCar+0x31c>)
 8001d60:	7818      	ldrb	r0, [r3, #0]
 8001d62:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <onReceiveCar+0x324>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	001a      	movs	r2, r3
 8001d68:	4b78      	ldr	r3, [pc, #480]	@ (8001f4c <onReceiveCar+0x328>)
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	f7ff ff2e 	bl	8001bcc <writeFrameFloat>
	  break;
 8001d70:	46c0      	nop			@ (mov r8, r8)
      }
      l_receiveCount=0;
 8001d72:	4b77      	ldr	r3, [pc, #476]	@ (8001f50 <onReceiveCar+0x32c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
      l_dataCount=0;
 8001d78:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <onReceiveCar+0x324>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
      l_pseudoHexaCnt=0;
 8001d7e:	4b75      	ldr	r3, [pc, #468]	@ (8001f54 <onReceiveCar+0x330>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
      l_stateRx=IDLE;
 8001d84:	4b6a      	ldr	r3, [pc, #424]	@ (8001f30 <onReceiveCar+0x30c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
      break;
 8001d8a:	e0cc      	b.n	8001f26 <onReceiveCar+0x302>
    case IDLE:
      if (p_car==FRAME_START)
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b55      	cmp	r3, #85	@ 0x55
 8001d92:	d000      	beq.n	8001d96 <onReceiveCar+0x172>
 8001d94:	e0c4      	b.n	8001f20 <onReceiveCar+0x2fc>
	l_stateRx=R_FRAME_START;
 8001d96:	4b66      	ldr	r3, [pc, #408]	@ (8001f30 <onReceiveCar+0x30c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
      break;
 8001d9c:	e0c0      	b.n	8001f20 <onReceiveCar+0x2fc>
    case R_FRAME_START:  //receive frame code
      l_frameCode=p_car;
 8001d9e:	4b68      	ldr	r3, [pc, #416]	@ (8001f40 <onReceiveCar+0x31c>)
 8001da0:	1dfa      	adds	r2, r7, #7
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
      l_stateRx=R_FRAME_CODE;
 8001da6:	4b62      	ldr	r3, [pc, #392]	@ (8001f30 <onReceiveCar+0x30c>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]
      break;
 8001dac:	e0bb      	b.n	8001f26 <onReceiveCar+0x302>
    case R_FRAME_CODE:  //receive frame type
      l_frameType=p_car;
 8001dae:	4b62      	ldr	r3, [pc, #392]	@ (8001f38 <onReceiveCar+0x314>)
 8001db0:	1dfa      	adds	r2, r7, #7
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	701a      	strb	r2, [r3, #0]
      l_stateRx=R_FRAME_TYPE;
 8001db6:	4b5e      	ldr	r3, [pc, #376]	@ (8001f30 <onReceiveCar+0x30c>)
 8001db8:	2203      	movs	r2, #3
 8001dba:	701a      	strb	r2, [r3, #0]
      break;
 8001dbc:	e0b3      	b.n	8001f26 <onReceiveCar+0x302>
    case R_FRAME_TYPE:  //receive data
      if (l_pseudoHexaCnt==0)
 8001dbe:	4b65      	ldr	r3, [pc, #404]	@ (8001f54 <onReceiveCar+0x330>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <onReceiveCar+0x1b2>
      {
	l_pseudoHexaCnt=1;
 8001dc6:	4b63      	ldr	r3, [pc, #396]	@ (8001f54 <onReceiveCar+0x330>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
	l_pseudoHexa[0]=p_car;
 8001dcc:	4b62      	ldr	r3, [pc, #392]	@ (8001f58 <onReceiveCar+0x334>)
 8001dce:	1dfa      	adds	r2, r7, #7
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	701a      	strb	r2, [r3, #0]
	break;
 8001dd4:	e0a7      	b.n	8001f26 <onReceiveCar+0x302>
      }
      else
      {
	l_pseudoHexa[1]=p_car;
 8001dd6:	4b60      	ldr	r3, [pc, #384]	@ (8001f58 <onReceiveCar+0x334>)
 8001dd8:	1dfa      	adds	r2, r7, #7
 8001dda:	7812      	ldrb	r2, [r2, #0]
 8001ddc:	705a      	strb	r2, [r3, #1]
	l_pseudoHexaCnt=0;
 8001dde:	4b5d      	ldr	r3, [pc, #372]	@ (8001f54 <onReceiveCar+0x330>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
	//pseudo hexa to char conv
	p_car=((l_pseudoHexa[0]&0x0F)<<4) | (l_pseudoHexa[1]&0x0F);
 8001de4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <onReceiveCar+0x334>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	b25a      	sxtb	r2, r3
 8001dee:	4b5a      	ldr	r3, [pc, #360]	@ (8001f58 <onReceiveCar+0x334>)
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	210f      	movs	r1, #15
 8001df6:	400b      	ands	r3, r1
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b25a      	sxtb	r2, r3
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	701a      	strb	r2, [r3, #0]
      }

      l_conv.bytes[l_receiveCount]=p_car;
 8001e02:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <onReceiveCar+0x32c>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	0019      	movs	r1, r3
 8001e08:	4b54      	ldr	r3, [pc, #336]	@ (8001f5c <onReceiveCar+0x338>)
 8001e0a:	1dfa      	adds	r2, r7, #7
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	545a      	strb	r2, [r3, r1]
      l_receiveCount++;
 8001e10:	4b4f      	ldr	r3, [pc, #316]	@ (8001f50 <onReceiveCar+0x32c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b4d      	ldr	r3, [pc, #308]	@ (8001f50 <onReceiveCar+0x32c>)
 8001e1a:	701a      	strb	r2, [r3, #0]
      switch(l_frameType)
 8001e1c:	4b46      	ldr	r3, [pc, #280]	@ (8001f38 <onReceiveCar+0x314>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b73      	cmp	r3, #115	@ 0x73
 8001e22:	d020      	beq.n	8001e66 <onReceiveCar+0x242>
 8001e24:	dd00      	ble.n	8001e28 <onReceiveCar+0x204>
 8001e26:	e07d      	b.n	8001f24 <onReceiveCar+0x300>
 8001e28:	2b69      	cmp	r3, #105	@ 0x69
 8001e2a:	d037      	beq.n	8001e9c <onReceiveCar+0x278>
 8001e2c:	dd00      	ble.n	8001e30 <onReceiveCar+0x20c>
 8001e2e:	e079      	b.n	8001f24 <onReceiveCar+0x300>
 8001e30:	2b62      	cmp	r3, #98	@ 0x62
 8001e32:	d002      	beq.n	8001e3a <onReceiveCar+0x216>
 8001e34:	2b66      	cmp	r3, #102	@ 0x66
 8001e36:	d04b      	beq.n	8001ed0 <onReceiveCar+0x2ac>
	    l_dataCount++;
	    l_receiveCount=0;
	  }
	  break;
      }
      break;
 8001e38:	e074      	b.n	8001f24 <onReceiveCar+0x300>
	  if (l_dataCount==MAX_DATA_i8) // rejects the parameter: too many data parameters
 8001e3a:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <onReceiveCar+0x324>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b40      	cmp	r3, #64	@ 0x40
 8001e40:	d060      	beq.n	8001f04 <onReceiveCar+0x2e0>
	  l_data.i8[l_dataCount]=p_car;
 8001e42:	4b41      	ldr	r3, [pc, #260]	@ (8001f48 <onReceiveCar+0x324>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	001a      	movs	r2, r3
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	5659      	ldrsb	r1, [r3, r1]
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <onReceiveCar+0x328>)
 8001e50:	5499      	strb	r1, [r3, r2]
	  l_dataCount++;
 8001e52:	4b3d      	ldr	r3, [pc, #244]	@ (8001f48 <onReceiveCar+0x324>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <onReceiveCar+0x324>)
 8001e5c:	701a      	strb	r2, [r3, #0]
	  l_receiveCount=0;
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f50 <onReceiveCar+0x32c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
	  break;
 8001e64:	e05b      	b.n	8001f1e <onReceiveCar+0x2fa>
	  if (l_dataCount==MAX_DATA_i16) // rejects the parameter: too many data parameters
 8001e66:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <onReceiveCar+0x324>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d04c      	beq.n	8001f08 <onReceiveCar+0x2e4>
	  if (l_receiveCount==2)
 8001e6e:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <onReceiveCar+0x32c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d14a      	bne.n	8001f0c <onReceiveCar+0x2e8>
	    l_data.i16[l_dataCount]=l_conv.i16;
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <onReceiveCar+0x324>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <onReceiveCar+0x338>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5e59      	ldrsh	r1, [r3, r1]
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <onReceiveCar+0x328>)
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	52d1      	strh	r1, [r2, r3]
	    l_dataCount++;
 8001e88:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <onReceiveCar+0x324>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b2d      	ldr	r3, [pc, #180]	@ (8001f48 <onReceiveCar+0x324>)
 8001e92:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 8001e94:	4b2e      	ldr	r3, [pc, #184]	@ (8001f50 <onReceiveCar+0x32c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
	  break;
 8001e9a:	e037      	b.n	8001f0c <onReceiveCar+0x2e8>
	  if (l_dataCount==MAX_DATA_i32) // rejects the parameter: too many data parameters
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <onReceiveCar+0x324>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d035      	beq.n	8001f10 <onReceiveCar+0x2ec>
	  if (l_receiveCount==4)
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <onReceiveCar+0x32c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d133      	bne.n	8001f14 <onReceiveCar+0x2f0>
	    l_data.i32[l_dataCount]=l_conv.i32;;
 8001eac:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <onReceiveCar+0x324>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <onReceiveCar+0x338>)
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <onReceiveCar+0x328>)
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	50d1      	str	r1, [r2, r3]
	    l_dataCount++;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <onReceiveCar+0x324>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <onReceiveCar+0x324>)
 8001ec6:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <onReceiveCar+0x32c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	  break;
 8001ece:	e021      	b.n	8001f14 <onReceiveCar+0x2f0>
	  if (l_dataCount==MAX_DATA_f32) // rejects the parameter: too many data parameters
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <onReceiveCar+0x324>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d01f      	beq.n	8001f18 <onReceiveCar+0x2f4>
	  if (l_receiveCount==4)
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <onReceiveCar+0x32c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11d      	bne.n	8001f1c <onReceiveCar+0x2f8>
	    l_data.f32[l_dataCount]=l_conv.f32;;
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <onReceiveCar+0x324>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <onReceiveCar+0x338>)
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <onReceiveCar+0x328>)
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	50d1      	str	r1, [r2, r3]
	    l_dataCount++;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <onReceiveCar+0x324>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <onReceiveCar+0x324>)
 8001efa:	701a      	strb	r2, [r3, #0]
	    l_receiveCount=0;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <onReceiveCar+0x32c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
	  break;
 8001f02:	e00b      	b.n	8001f1c <onReceiveCar+0x2f8>
	    break;
 8001f04:	46c0      	nop			@ (mov r8, r8)
 8001f06:	e00d      	b.n	8001f24 <onReceiveCar+0x300>
	    break;
 8001f08:	46c0      	nop			@ (mov r8, r8)
 8001f0a:	e00b      	b.n	8001f24 <onReceiveCar+0x300>
	  break;
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	e009      	b.n	8001f24 <onReceiveCar+0x300>
	    break;
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	e007      	b.n	8001f24 <onReceiveCar+0x300>
	  break;
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	e005      	b.n	8001f24 <onReceiveCar+0x300>
	    break;
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	e003      	b.n	8001f24 <onReceiveCar+0x300>
	  break;
 8001f1c:	46c0      	nop			@ (mov r8, r8)
      break;
 8001f1e:	e001      	b.n	8001f24 <onReceiveCar+0x300>
      break;
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	e000      	b.n	8001f26 <onReceiveCar+0x302>
      break;
 8001f24:	46c0      	nop			@ (mov r8, r8)
  }

}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000229 	.word	0x20000229
 8001f34:	080041f4 	.word	0x080041f4
 8001f38:	2000022a 	.word	0x2000022a
 8001f3c:	08004208 	.word	0x08004208
 8001f40:	2000022b 	.word	0x2000022b
 8001f44:	20000228 	.word	0x20000228
 8001f48:	2000022c 	.word	0x2000022c
 8001f4c:	20000230 	.word	0x20000230
 8001f50:	20000270 	.word	0x20000270
 8001f54:	20000271 	.word	0x20000271
 8001f58:	20000274 	.word	0x20000274
 8001f5c:	20000278 	.word	0x20000278

08001f60 <RetargetInit>:
#define STDERR_FILENO 2

USART_TypeDef *gHuart;
extern  uint8_t g_rxCarUSART2;

void RetargetInit(USART_TypeDef *huart) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <RetargetInit+0x28>)
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <RetargetInit+0x2c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6898      	ldr	r0, [r3, #8]
 8001f74:	2300      	movs	r3, #0
 8001f76:	2202      	movs	r2, #2
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f001 fda3 	bl	8003ac4 <setvbuf>
}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b002      	add	sp, #8
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	2000027c 	.word	0x2000027c
 8001f8c:	2000001c 	.word	0x2000001c

08001f90 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d002      	beq.n	8001fa8 <_write+0x18>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d113      	bne.n	8001fd0 <_write+0x40>
      for (int i=0; i<len;i++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e00a      	b.n	8001fc4 <_write+0x34>
      {
        serialWrite(*ptr);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f986 	bl	80022c4 <serialWrite>
        ptr++;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
      for (int i=0; i<len;i++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf0      	blt.n	8001fae <_write+0x1e>
      }
    return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	e006      	b.n	8001fde <_write+0x4e>
  }
  errno = EBADF;
 8001fd0:	f001 fed0 	bl	8003d74 <__errno>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	2209      	movs	r2, #9
 8001fd8:	601a      	str	r2, [r3, #0]
  return -1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	425b      	negs	r3, r3
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_close>:

int _close(int fd) {
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db04      	blt.n	8001ffe <_close+0x18>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	dc01      	bgt.n	8001ffe <_close+0x18>
    return 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e006      	b.n	800200c <_close+0x26>

  errno = EBADF;
 8001ffe:	f001 feb9 	bl	8003d74 <__errno>
 8002002:	0003      	movs	r3, r0
 8002004:	2209      	movs	r2, #9
 8002006:	601a      	str	r2, [r3, #0]
  return -1;
 8002008:	2301      	movs	r3, #1
 800200a:	425b      	negs	r3, r3
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002020:	f001 fea8 	bl	8003d74 <__errno>
 8002024:	0003      	movs	r3, r0
 8002026:	2209      	movs	r2, #9
 8002028:	601a      	str	r2, [r3, #0]
  return -1;
 800202a:	2301      	movs	r3, #1
 800202c:	425b      	negs	r3, r3
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}

08002036 <_read>:

int _read(int fd, char* ptr, int len) {
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]

  int l_car=0;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  if (fd == STDIN_FILENO) {
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d110      	bne.n	800206e <_read+0x38>
      do
      {
	  l_car=rxFifoRead();
 800204c:	f000 f906 	bl	800225c <rxFifoRead>
 8002050:	0003      	movs	r3, r0
 8002052:	617b      	str	r3, [r7, #20]
	  if (l_car==-1)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	d100      	bne.n	800205c <_read+0x26>
	  {
    	    __WFI(); //wait for interrupt (for a key ==> data RX)
 800205a:	bf30      	wfi
    	  }
      }
      while(l_car==-1); //while no char received
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	d0f4      	beq.n	800204c <_read+0x16>
      *ptr=l_car;  //save received data
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	701a      	strb	r2, [r3, #0]
      return 1;
 800206a:	2301      	movs	r3, #1
 800206c:	e006      	b.n	800207c <_read+0x46>
  }
  errno = EBADF;
 800206e:	f001 fe81 	bl	8003d74 <__errno>
 8002072:	0003      	movs	r3, r0
 8002074:	2209      	movs	r2, #9
 8002076:	601a      	str	r2, [r3, #0]
  return -1;
 8002078:	2301      	movs	r3, #1
 800207a:	425b      	negs	r3, r3
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b006      	add	sp, #24
 8002082:	bd80      	pop	{r7, pc}

08002084 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db08      	blt.n	80020a6 <_fstat+0x22>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	dc05      	bgt.n	80020a6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	0192      	lsls	r2, r2, #6
 80020a0:	605a      	str	r2, [r3, #4]
    return 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e005      	b.n	80020b2 <_fstat+0x2e>
  }

  errno = EBADF;
 80020a6:	f001 fe65 	bl	8003d74 <__errno>
 80020aa:	0003      	movs	r3, r0
 80020ac:	2209      	movs	r2, #9
 80020ae:	601a      	str	r2, [r3, #0]
  return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}

080020ba <LL_USART_IsActiveFlag_ORE>:
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2208      	movs	r2, #8
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d101      	bne.n	80020d2 <LL_USART_IsActiveFlag_ORE+0x18>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_USART_IsActiveFlag_ORE+0x1a>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <LL_USART_IsActiveFlag_RXNE>:
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2220      	movs	r2, #32
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d101      	bne.n	80020f4 <LL_USART_IsActiveFlag_RXNE+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LL_USART_IsActiveFlag_TXE>:
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	4013      	ands	r3, r2
 800210e:	2b80      	cmp	r3, #128	@ 0x80
 8002110:	d101      	bne.n	8002116 <LL_USART_IsActiveFlag_TXE+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_USART_IsActiveFlag_TXE+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <LL_USART_ClearFlag_ORE>:
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2208      	movs	r2, #8
 800212c:	621a      	str	r2, [r3, #32]
}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	000a      	movs	r2, r1
 8002156:	1cfb      	adds	r3, r7, #3
 8002158:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800215a:	1cfb      	adds	r3, r7, #3
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}

0800216a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	e7fd      	b.n	800216e <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	e7fd      	b.n	8002176 <HardFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timeMs++;
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <SysTick_Handler+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4b02      	ldr	r3, [pc, #8]	@ (80021a4 <SysTick_Handler+0x14>)
 800219c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000280 	.word	0x20000280

080021a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 80021ac:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <USART2_IRQHandler+0x3c>)
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff ff94 	bl	80020dc <LL_USART_IsActiveFlag_RXNE>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d007      	beq.n	80021c8 <USART2_IRQHandler+0x20>
  {
      rxFifoWrite(LL_USART_ReceiveData8(USART2));
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <USART2_IRQHandler+0x3c>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff ffbb 	bl	8002136 <LL_USART_ReceiveData8>
 80021c0:	0003      	movs	r3, r0
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f820 	bl	8002208 <rxFifoWrite>
  }

  /* Clear overrun error flag */
  if (LL_USART_IsActiveFlag_ORE(USART2))
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <USART2_IRQHandler+0x3c>)
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff ff75 	bl	80020ba <LL_USART_IsActiveFlag_ORE>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d003      	beq.n	80021dc <USART2_IRQHandler+0x34>
    {
      LL_USART_ClearFlag_ORE(USART2);
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <USART2_IRQHandler+0x3c>)
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff ffa2 	bl	8002120 <LL_USART_ClearFlag_ORE>
    }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	40004400 	.word	0x40004400

080021e8 <rxFifoInit>:
   int writePos;
   int count;
   uint8_t buffer[FIFO_LENGTH];
}g_rxFifo;
void rxFifoInit(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  g_rxFifo.readPos=0;
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <rxFifoInit+0x1c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
  g_rxFifo.writePos=0;
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <rxFifoInit+0x1c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
  g_rxFifo.count=0;
 80021f8:	4b02      	ldr	r3, [pc, #8]	@ (8002204 <rxFifoInit+0x1c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000284 	.word	0x20000284

08002208 <rxFifoWrite>:
void rxFifoWrite(uint8_t p_car)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	0002      	movs	r2, r0
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	701a      	strb	r2, [r3, #0]
 if (g_rxFifo.count==FIFO_LENGTH) return;  // buffer full
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <rxFifoWrite+0x50>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b1e      	cmp	r3, #30
 800221a:	d018      	beq.n	800224e <rxFifoWrite+0x46>
 g_rxFifo.buffer[g_rxFifo.writePos]=p_car;
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <rxFifoWrite+0x50>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <rxFifoWrite+0x50>)
 8002222:	18d3      	adds	r3, r2, r3
 8002224:	1dfa      	adds	r2, r7, #7
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	731a      	strb	r2, [r3, #12]
 g_rxFifo.writePos++;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <rxFifoWrite+0x50>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <rxFifoWrite+0x50>)
 8002232:	605a      	str	r2, [r3, #4]
 g_rxFifo.count++;
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <rxFifoWrite+0x50>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <rxFifoWrite+0x50>)
 800223c:	609a      	str	r2, [r3, #8]
 if (g_rxFifo.writePos==FIFO_LENGTH) g_rxFifo.writePos=0;
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <rxFifoWrite+0x50>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b1e      	cmp	r3, #30
 8002244:	d104      	bne.n	8002250 <rxFifoWrite+0x48>
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <rxFifoWrite+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	e000      	b.n	8002250 <rxFifoWrite+0x48>
 if (g_rxFifo.count==FIFO_LENGTH) return;  // buffer full
 800224e:	46c0      	nop			@ (mov r8, r8)
}
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	20000284 	.word	0x20000284

0800225c <rxFifoRead>:
int rxFifoRead(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002262:	b672      	cpsid	i
}
 8002264:	46c0      	nop			@ (mov r8, r8)
  int l_car;
  __disable_irq();
  if (g_rxFifo.count==0)
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <rxFifoRead+0x58>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <rxFifoRead+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800226e:	b662      	cpsie	i
}
 8002270:	46c0      	nop			@ (mov r8, r8)
  {
      __enable_irq();
      return -1; //empty
 8002272:	2301      	movs	r3, #1
 8002274:	425b      	negs	r3, r3
 8002276:	e019      	b.n	80022ac <rxFifoRead+0x50>
  }
  l_car=g_rxFifo.buffer[g_rxFifo.readPos];
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <rxFifoRead+0x58>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <rxFifoRead+0x58>)
 800227e:	18d3      	adds	r3, r2, r3
 8002280:	7b1b      	ldrb	r3, [r3, #12]
 8002282:	607b      	str	r3, [r7, #4]
  g_rxFifo.count--;
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <rxFifoRead+0x58>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <rxFifoRead+0x58>)
 800228c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800228e:	b662      	cpsie	i
}
 8002290:	46c0      	nop			@ (mov r8, r8)
  __enable_irq();
  g_rxFifo.readPos++;
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <rxFifoRead+0x58>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <rxFifoRead+0x58>)
 800229a:	601a      	str	r2, [r3, #0]
  if (g_rxFifo.readPos==FIFO_LENGTH) g_rxFifo.readPos=0;
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <rxFifoRead+0x58>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b1e      	cmp	r3, #30
 80022a2:	d102      	bne.n	80022aa <rxFifoRead+0x4e>
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <rxFifoRead+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  return l_car;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000284 	.word	0x20000284

080022b8 <getchInit>:

void getchInit(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
}
 80022bc:	46c0      	nop			@ (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <serialWrite>:
   return 0;
 else
   return 1;
}
void serialWrite(uint8_t p_car)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	0002      	movs	r2, r0
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	701a      	strb	r2, [r3, #0]
  while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 80022d0:	46c0      	nop			@ (mov r8, r8)
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <serialWrite+0x30>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ff12 	bl	80020fe <LL_USART_IsActiveFlag_TXE>
 80022da:	1e03      	subs	r3, r0, #0
 80022dc:	d0f9      	beq.n	80022d2 <serialWrite+0xe>
  LL_USART_TransmitData8(USART2,p_car);
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <serialWrite+0x30>)
 80022e4:	0019      	movs	r1, r3
 80022e6:	0010      	movs	r0, r2
 80022e8:	f7ff ff30 	bl	800214c <LL_USART_TransmitData8>
}
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40004400 	.word	0x40004400

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f001 fd24 	bl	8003d74 <__errno>
 800232c:	0003      	movs	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	2301      	movs	r3, #1
 8002334:	425b      	negs	r3, r3
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	@ (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	18d2      	adds	r2, r2, r3
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <_sbrk+0x64>)
 8002348:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20002000 	.word	0x20002000
 8002358:	00000400 	.word	0x00000400
 800235c:	200002b0 	.word	0x200002b0
 8002360:	20000400 	.word	0x20000400

08002364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <LL_APB2_GRP1_EnableClock>:
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002378:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <LL_APB2_GRP1_EnableClock+0x28>)
 800237a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <LL_APB2_GRP1_EnableClock+0x28>)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	430a      	orrs	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <LL_APB2_GRP1_EnableClock+0x28>)
 8002386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	46c0      	nop			@ (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <LL_IOP_GRP1_EnableClock>:
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80023a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <LL_TIM_DisableARRPreload>:
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2280      	movs	r2, #128	@ 0x80
 80023d6:	4393      	bics	r3, r2
 80023d8:	001a      	movs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <LL_TIM_OC_DisableFast>:
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d00d      	beq.n	8002414 <LL_TIM_OC_DisableFast+0x2c>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d008      	beq.n	8002410 <LL_TIM_OC_DisableFast+0x28>
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	429a      	cmp	r2, r3
 8002406:	d101      	bne.n	800240c <LL_TIM_OC_DisableFast+0x24>
 8002408:	2304      	movs	r3, #4
 800240a:	e004      	b.n	8002416 <LL_TIM_OC_DisableFast+0x2e>
 800240c:	2306      	movs	r3, #6
 800240e:	e002      	b.n	8002416 <LL_TIM_OC_DisableFast+0x2e>
 8002410:	2302      	movs	r3, #2
 8002412:	e000      	b.n	8002416 <LL_TIM_OC_DisableFast+0x2e>
 8002414:	2300      	movs	r3, #0
 8002416:	200f      	movs	r0, #15
 8002418:	183a      	adds	r2, r7, r0
 800241a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3318      	adds	r3, #24
 8002420:	0019      	movs	r1, r3
 8002422:	183b      	adds	r3, r7, r0
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <LL_TIM_OC_DisableFast+0x68>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	18cb      	adds	r3, r1, r3
 800242c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	183a      	adds	r2, r7, r0
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	4907      	ldr	r1, [pc, #28]	@ (8002454 <LL_TIM_OC_DisableFast+0x6c>)
 8002438:	5c8a      	ldrb	r2, [r1, r2]
 800243a:	0011      	movs	r1, r2
 800243c:	2204      	movs	r2, #4
 800243e:	408a      	lsls	r2, r1
 8002440:	43d2      	mvns	r2, r2
 8002442:	401a      	ands	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	46c0      	nop			@ (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}
 8002450:	08004274 	.word	0x08004274
 8002454:	0800427c 	.word	0x0800427c

08002458 <LL_TIM_OC_EnablePreload>:
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d00d      	beq.n	8002484 <LL_TIM_OC_EnablePreload+0x2c>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d008      	beq.n	8002480 <LL_TIM_OC_EnablePreload+0x28>
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	429a      	cmp	r2, r3
 8002476:	d101      	bne.n	800247c <LL_TIM_OC_EnablePreload+0x24>
 8002478:	2304      	movs	r3, #4
 800247a:	e004      	b.n	8002486 <LL_TIM_OC_EnablePreload+0x2e>
 800247c:	2306      	movs	r3, #6
 800247e:	e002      	b.n	8002486 <LL_TIM_OC_EnablePreload+0x2e>
 8002480:	2302      	movs	r3, #2
 8002482:	e000      	b.n	8002486 <LL_TIM_OC_EnablePreload+0x2e>
 8002484:	2300      	movs	r3, #0
 8002486:	200f      	movs	r0, #15
 8002488:	183a      	adds	r2, r7, r0
 800248a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3318      	adds	r3, #24
 8002490:	0019      	movs	r1, r3
 8002492:	183b      	adds	r3, r7, r0
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <LL_TIM_OC_EnablePreload+0x68>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	18cb      	adds	r3, r1, r3
 800249c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	183b      	adds	r3, r7, r0
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	4907      	ldr	r1, [pc, #28]	@ (80024c4 <LL_TIM_OC_EnablePreload+0x6c>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	0019      	movs	r1, r3
 80024ac:	2308      	movs	r3, #8
 80024ae:	408b      	lsls	r3, r1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	08004274 	.word	0x08004274
 80024c4:	0800427c 	.word	0x0800427c

080024c8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <LL_TIM_SetClockSource+0x24>)
 80024d8:	401a      	ands	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	ffffbff8 	.word	0xffffbff8

080024f0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2270      	movs	r2, #112	@ 0x70
 8002500:	4393      	bics	r3, r2
 8002502:	001a      	movs	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	605a      	str	r2, [r3, #4]
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2280      	movs	r2, #128	@ 0x80
 8002522:	4393      	bics	r3, r2
 8002524:	001a      	movs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <MX_TIM22_Init>:

/* USER CODE END 0 */

/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800253a:	2528      	movs	r5, #40	@ 0x28
 800253c:	197b      	adds	r3, r7, r5
 800253e:	0018      	movs	r0, r3
 8002540:	2310      	movs	r3, #16
 8002542:	001a      	movs	r2, r3
 8002544:	2100      	movs	r1, #0
 8002546:	f001 fbbf 	bl	8003cc8 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800254a:	2418      	movs	r4, #24
 800254c:	193b      	adds	r3, r7, r4
 800254e:	0018      	movs	r0, r3
 8002550:	2310      	movs	r3, #16
 8002552:	001a      	movs	r2, r3
 8002554:	2100      	movs	r1, #0
 8002556:	f001 fbb7 	bl	8003cc8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	003b      	movs	r3, r7
 800255c:	0018      	movs	r0, r3
 800255e:	2318      	movs	r3, #24
 8002560:	001a      	movs	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	f001 fbb0 	bl	8003cc8 <memset>
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM22);
 8002568:	2020      	movs	r0, #32
 800256a:	f7ff ff01 	bl	8002370 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800256e:	197b      	adds	r3, r7, r5
 8002570:	2200      	movs	r2, #0
 8002572:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002574:	197b      	adds	r3, r7, r5
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 800257a:	197b      	adds	r3, r7, r5
 800257c:	22fa      	movs	r2, #250	@ 0xfa
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002582:	197b      	adds	r3, r7, r5
 8002584:	2200      	movs	r2, #0
 8002586:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 8002588:	197b      	adds	r3, r7, r5
 800258a:	4a3d      	ldr	r2, [pc, #244]	@ (8002680 <MX_TIM22_Init+0x14c>)
 800258c:	0019      	movs	r1, r3
 800258e:	0010      	movs	r0, r2
 8002590:	f000 feec 	bl	800336c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM22);
 8002594:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <MX_TIM22_Init+0x14c>)
 8002596:	0018      	movs	r0, r3
 8002598:	f7ff ff16 	bl	80023c8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
 800259c:	4b38      	ldr	r3, [pc, #224]	@ (8002680 <MX_TIM22_Init+0x14c>)
 800259e:	2100      	movs	r1, #0
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff ff91 	bl	80024c8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM22, LL_TIM_CHANNEL_CH1);
 80025a6:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <MX_TIM22_Init+0x14c>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7ff ff54 	bl	8002458 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	2260      	movs	r2, #96	@ 0x60
 80025b4:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	2202      	movs	r2, #2
 80025c6:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	482d      	ldr	r0, [pc, #180]	@ (8002680 <MX_TIM22_Init+0x14c>)
 80025cc:	001a      	movs	r2, r3
 80025ce:	2101      	movs	r1, #1
 80025d0:	f000 ff1e 	bl	8003410 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM22, LL_TIM_CHANNEL_CH1);
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <MX_TIM22_Init+0x14c>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ff05 	bl	80023e8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM22, LL_TIM_CHANNEL_CH2);
 80025de:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <MX_TIM22_Init+0x14c>)
 80025e0:	2110      	movs	r1, #16
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ff38 	bl	8002458 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	4825      	ldr	r0, [pc, #148]	@ (8002680 <MX_TIM22_Init+0x14c>)
 80025ec:	001a      	movs	r2, r3
 80025ee:	2110      	movs	r1, #16
 80025f0:	f000 ff0e 	bl	8003410 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM22, LL_TIM_CHANNEL_CH2);
 80025f4:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <MX_TIM22_Init+0x14c>)
 80025f6:	2110      	movs	r1, #16
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fef5 	bl	80023e8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM22, LL_TIM_TRGO_RESET);
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <MX_TIM22_Init+0x14c>)
 8002600:	2100      	movs	r1, #0
 8002602:	0018      	movs	r0, r3
 8002604:	f7ff ff74 	bl	80024f0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM22);
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <MX_TIM22_Init+0x14c>)
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff ff82 	bl	8002514 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002610:	2002      	movs	r0, #2
 8002612:	f7ff fec3 	bl	800239c <LL_IOP_GRP1_EnableClock>
    /**TIM22 GPIO Configuration
    PB4     ------> TIM22_CH1
    PB5     ------> TIM22_CH2
    */
  GPIO_InitStruct.Pin = PWM1_Pin;
 8002616:	003b      	movs	r3, r7
 8002618:	2210      	movs	r2, #16
 800261a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800261c:	003b      	movs	r3, r7
 800261e:	2202      	movs	r2, #2
 8002620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002622:	003b      	movs	r3, r7
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002628:	003b      	movs	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800262e:	003b      	movs	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002634:	003b      	movs	r3, r7
 8002636:	2204      	movs	r2, #4
 8002638:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 800263a:	003b      	movs	r3, r7
 800263c:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <MX_TIM22_Init+0x150>)
 800263e:	0019      	movs	r1, r3
 8002640:	0010      	movs	r0, r2
 8002642:	f000 fbe3 	bl	8002e0c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PWM2_Pin;
 8002646:	003b      	movs	r3, r7
 8002648:	2220      	movs	r2, #32
 800264a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800264c:	003b      	movs	r3, r7
 800264e:	2202      	movs	r2, #2
 8002650:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002652:	003b      	movs	r3, r7
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002658:	003b      	movs	r3, r7
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800265e:	003b      	movs	r3, r7
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002664:	003b      	movs	r3, r7
 8002666:	2204      	movs	r2, #4
 8002668:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 800266a:	003b      	movs	r3, r7
 800266c:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <MX_TIM22_Init+0x150>)
 800266e:	0019      	movs	r1, r3
 8002670:	0010      	movs	r0, r2
 8002672:	f000 fbcb 	bl	8002e0c <LL_GPIO_Init>

}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b00e      	add	sp, #56	@ 0x38
 800267c:	bdb0      	pop	{r4, r5, r7, pc}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	40011400 	.word	0x40011400
 8002684:	50000400 	.word	0x50000400

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	0002      	movs	r2, r0
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b7f      	cmp	r3, #127	@ 0x7f
 800269a:	d809      	bhi.n	80026b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269c:	1dfb      	adds	r3, r7, #7
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	001a      	movs	r2, r3
 80026a2:	231f      	movs	r3, #31
 80026a4:	401a      	ands	r2, r3
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <__NVIC_EnableIRQ+0x30>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	4091      	lsls	r1, r2
 80026ac:	000a      	movs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
  }
}
 80026b0:	46c0      	nop			@ (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	0002      	movs	r2, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80026d0:	d828      	bhi.n	8002724 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002790 <__NVIC_SetPriority+0xd4>)
 80026d4:	1dfb      	adds	r3, r7, #7
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	33c0      	adds	r3, #192	@ 0xc0
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	589b      	ldr	r3, [r3, r2]
 80026e2:	1dfa      	adds	r2, r7, #7
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	0011      	movs	r1, r2
 80026e8:	2203      	movs	r2, #3
 80026ea:	400a      	ands	r2, r1
 80026ec:	00d2      	lsls	r2, r2, #3
 80026ee:	21ff      	movs	r1, #255	@ 0xff
 80026f0:	4091      	lsls	r1, r2
 80026f2:	000a      	movs	r2, r1
 80026f4:	43d2      	mvns	r2, r2
 80026f6:	401a      	ands	r2, r3
 80026f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	22ff      	movs	r2, #255	@ 0xff
 8002700:	401a      	ands	r2, r3
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	0018      	movs	r0, r3
 8002708:	2303      	movs	r3, #3
 800270a:	4003      	ands	r3, r0
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002710:	481f      	ldr	r0, [pc, #124]	@ (8002790 <__NVIC_SetPriority+0xd4>)
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b25b      	sxtb	r3, r3
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	430a      	orrs	r2, r1
 800271c:	33c0      	adds	r3, #192	@ 0xc0
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002722:	e031      	b.n	8002788 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002724:	4a1b      	ldr	r2, [pc, #108]	@ (8002794 <__NVIC_SetPriority+0xd8>)
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	0019      	movs	r1, r3
 800272c:	230f      	movs	r3, #15
 800272e:	400b      	ands	r3, r1
 8002730:	3b08      	subs	r3, #8
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3306      	adds	r3, #6
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	3304      	adds	r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1dfa      	adds	r2, r7, #7
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	0011      	movs	r1, r2
 8002744:	2203      	movs	r2, #3
 8002746:	400a      	ands	r2, r1
 8002748:	00d2      	lsls	r2, r2, #3
 800274a:	21ff      	movs	r1, #255	@ 0xff
 800274c:	4091      	lsls	r1, r2
 800274e:	000a      	movs	r2, r1
 8002750:	43d2      	mvns	r2, r2
 8002752:	401a      	ands	r2, r3
 8002754:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	22ff      	movs	r2, #255	@ 0xff
 800275c:	401a      	ands	r2, r3
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	0018      	movs	r0, r3
 8002764:	2303      	movs	r3, #3
 8002766:	4003      	ands	r3, r0
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800276c:	4809      	ldr	r0, [pc, #36]	@ (8002794 <__NVIC_SetPriority+0xd8>)
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	001c      	movs	r4, r3
 8002774:	230f      	movs	r3, #15
 8002776:	4023      	ands	r3, r4
 8002778:	3b08      	subs	r3, #8
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	430a      	orrs	r2, r1
 800277e:	3306      	adds	r3, #6
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	18c3      	adds	r3, r0, r3
 8002784:	3304      	adds	r3, #4
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b003      	add	sp, #12
 800278e:	bd90      	pop	{r4, r7, pc}
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <LL_APB1_GRP1_EnableClock>:
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027a0:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80027a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4013      	ands	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b004      	add	sp, #16
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000

080027c4 <LL_IOP_GRP1_EnableClock>:
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80027cc:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <LL_IOP_GRP1_EnableClock+0x28>)
 80027ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <LL_IOP_GRP1_EnableClock+0x28>)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <LL_IOP_GRP1_EnableClock+0x28>)
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000

080027f0 <LL_USART_Enable>:
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}

0800280c <LL_USART_ConfigAsyncMode>:
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a07      	ldr	r2, [pc, #28]	@ (8002838 <LL_USART_ConfigAsyncMode+0x2c>)
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	222a      	movs	r2, #42	@ 0x2a
 8002826:	4393      	bics	r3, r2
 8002828:	001a      	movs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	ffffb7ff 	.word	0xffffb7ff

0800283c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b08f      	sub	sp, #60	@ 0x3c
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002842:	241c      	movs	r4, #28
 8002844:	193b      	adds	r3, r7, r4
 8002846:	0018      	movs	r0, r3
 8002848:	231c      	movs	r3, #28
 800284a:	001a      	movs	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f001 fa3b 	bl	8003cc8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	0018      	movs	r0, r3
 8002856:	2318      	movs	r3, #24
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f001 fa34 	bl	8003cc8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff ff97 	bl	8002798 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800286a:	2001      	movs	r0, #1
 800286c:	f7ff ffaa 	bl	80027c4 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2204      	movs	r2, #4
 8002874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2202      	movs	r2, #2
 800287a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2203      	movs	r2, #3
 8002880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2204      	movs	r2, #4
 8002892:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002894:	1d3a      	adds	r2, r7, #4
 8002896:	23a0      	movs	r3, #160	@ 0xa0
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f000 fab5 	bl	8002e0c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2208      	movs	r2, #8
 80028a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2202      	movs	r2, #2
 80028ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2203      	movs	r2, #3
 80028b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2204      	movs	r2, #4
 80028c4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80028c6:	1d3a      	adds	r2, r7, #4
 80028c8:	23a0      	movs	r3, #160	@ 0xa0
 80028ca:	05db      	lsls	r3, r3, #23
 80028cc:	0011      	movs	r1, r2
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 fa9c 	bl	8002e0c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80028d4:	2100      	movs	r1, #0
 80028d6:	201c      	movs	r0, #28
 80028d8:	f7ff fef0 	bl	80026bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80028dc:	201c      	movs	r0, #28
 80028de:	f7ff fed3 	bl	8002688 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	22e1      	movs	r2, #225	@ 0xe1
 80028e6:	0252      	lsls	r2, r2, #9
 80028e8:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80028ea:	0021      	movs	r1, r4
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2200      	movs	r2, #0
 80028f0:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	220c      	movs	r2, #12
 8002902:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002910:	187b      	adds	r3, r7, r1
 8002912:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <MX_USART2_UART_Init+0xf8>)
 8002914:	0019      	movs	r1, r3
 8002916:	0010      	movs	r0, r2
 8002918:	f000 ff74 	bl	8003804 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <MX_USART2_UART_Init+0xf8>)
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff ff74 	bl	800280c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002924:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <MX_USART2_UART_Init+0xf8>)
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff ff62 	bl	80027f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b00f      	add	sp, #60	@ 0x3c
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	40004400 	.word	0x40004400

08002938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002938:	480d      	ldr	r0, [pc, #52]	@ (8002970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800293a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480d      	ldr	r0, [pc, #52]	@ (8002974 <LoopForever+0x6>)
  ldr r1, =_edata
 800293e:	490e      	ldr	r1, [pc, #56]	@ (8002978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002940:	4a0e      	ldr	r2, [pc, #56]	@ (800297c <LoopForever+0xe>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002954:	4c0b      	ldr	r4, [pc, #44]	@ (8002984 <LoopForever+0x16>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002962:	f7ff fcff 	bl	8002364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002966:	f001 fa0b 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296a:	f7fe fd31 	bl	80013d0 <main>

0800296e <LoopForever>:

LoopForever:
    b LoopForever
 800296e:	e7fe      	b.n	800296e <LoopForever>
  ldr   r0, =_estack
 8002970:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002978:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800297c:	0800428c 	.word	0x0800428c
  ldr r2, =_sbss
 8002980:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002984:	20000400 	.word	0x20000400

08002988 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC1_COMP_IRQHandler>

0800298a <LL_ADC_IsEnabled>:
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	3b01      	subs	r3, #1
 800299c:	425a      	negs	r2, r3
 800299e:	4153      	adcs	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b002      	add	sp, #8
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80029b6:	230f      	movs	r3, #15
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ffe2 	bl	800298a <LL_ADC_IsEnabled>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d118      	bne.n	80029fc <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <LL_ADC_Init+0x68>)
 80029d0:	401a      	ands	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4319      	orrs	r1, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	089a      	lsrs	r2, r3, #2
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e003      	b.n	8002a04 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80029fc:	230f      	movs	r3, #15
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002a04:	230f      	movs	r3, #15
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	781b      	ldrb	r3, [r3, #0]
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	ffff3fc7 	.word	0xffff3fc7

08002a18 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002a22:	230f      	movs	r3, #15
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff ffac 	bl	800298a <LL_ADC_IsEnabled>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d115      	bne.n	8002a62 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a78 <LL_ADC_REG_Init+0x60>)
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4319      	orrs	r1, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4319      	orrs	r1, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4319      	orrs	r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	e003      	b.n	8002a6a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a62:	230f      	movs	r3, #15
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	fffec23c 	.word	0xfffec23c

08002a7c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40010400 	.word	0x40010400

08002a9c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <LL_EXTI_DisableIT_0_31+0x20>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <LL_EXTI_DisableIT_0_31+0x20>)
 8002aae:	400a      	ands	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b002      	add	sp, #8
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	40010400 	.word	0x40010400

08002ac0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]

}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40010400 	.word	0x40010400

08002ae0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	43d9      	mvns	r1, r3
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	40010400 	.word	0x40010400

08002b04 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002b0c:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]

}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010400 	.word	0x40010400

08002b24 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	40010400 	.word	0x40010400

08002b48 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002b52:	68d9      	ldr	r1, [r3, #12]
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]
}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40010400 	.word	0x40010400

08002b68 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	60da      	str	r2, [r3, #12]
}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	40010400 	.word	0x40010400

08002b8c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	791b      	ldrb	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d100      	bne.n	8002ba6 <LL_EXTI_Init+0x1a>
 8002ba4:	e068      	b.n	8002c78 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d100      	bne.n	8002bb0 <LL_EXTI_Init+0x24>
 8002bae:	e06d      	b.n	8002c8c <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	795b      	ldrb	r3, [r3, #5]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d01b      	beq.n	8002bf0 <LL_EXTI_Init+0x64>
 8002bb8:	dc25      	bgt.n	8002c06 <LL_EXTI_Init+0x7a>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <LL_EXTI_Init+0x38>
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d00b      	beq.n	8002bda <LL_EXTI_Init+0x4e>
 8002bc2:	e020      	b.n	8002c06 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ff89 	bl	8002ae0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff ff52 	bl	8002a7c <LL_EXTI_EnableIT_0_31>
          break;
 8002bd8:	e01a      	b.n	8002c10 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff ff5c 	bl	8002a9c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff ff69 	bl	8002ac0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bee:	e00f      	b.n	8002c10 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff ff41 	bl	8002a7c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff ff5e 	bl	8002ac0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002c04:	e004      	b.n	8002c10 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
          break;
 8002c0e:	46c0      	nop			@ (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	799b      	ldrb	r3, [r3, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d039      	beq.n	8002c8c <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	799b      	ldrb	r3, [r3, #6]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d01b      	beq.n	8002c58 <LL_EXTI_Init+0xcc>
 8002c20:	dc25      	bgt.n	8002c6e <LL_EXTI_Init+0xe2>
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d002      	beq.n	8002c2c <LL_EXTI_Init+0xa0>
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d00b      	beq.n	8002c42 <LL_EXTI_Init+0xb6>
 8002c2a:	e020      	b.n	8002c6e <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff ff99 	bl	8002b68 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff ff62 	bl	8002b04 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002c40:	e024      	b.n	8002c8c <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7ff ff6c 	bl	8002b24 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff ff79 	bl	8002b48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c56:	e019      	b.n	8002c8c <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7ff ff51 	bl	8002b04 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff ff6e 	bl	8002b48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c6c:	e00e      	b.n	8002c8c <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 8002c6e:	230f      	movs	r3, #15
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
            break;
 8002c76:	e009      	b.n	8002c8c <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff ff0d 	bl	8002a9c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff2a 	bl	8002ae0 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002c8c:	230f      	movs	r3, #15
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <LL_GPIO_SetPinMode>:
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	435b      	muls	r3, r3
 8002cae:	001a      	movs	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	189b      	adds	r3, r3, r2
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	400b      	ands	r3, r1
 8002cba:	001a      	movs	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	435b      	muls	r3, r3
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	434b      	muls	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <LL_GPIO_SetPinOutputType>:
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	43d2      	mvns	r2, r2
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	434b      	muls	r3, r1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <LL_GPIO_SetPinSpeed>:
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	435b      	muls	r3, r3
 8002d10:	001a      	movs	r2, r3
 8002d12:	0013      	movs	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	435b      	muls	r3, r3
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	434b      	muls	r3, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <LL_GPIO_SetPinPull>:
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	435b      	muls	r3, r3
 8002d48:	001a      	movs	r2, r3
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	43db      	mvns	r3, r3
 8002d52:	400b      	ands	r3, r1
 8002d54:	001a      	movs	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	435b      	muls	r3, r3
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	434b      	muls	r3, r1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	60da      	str	r2, [r3, #12]
}
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b004      	add	sp, #16
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <LL_GPIO_SetAFPin_0_7>:
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	435b      	muls	r3, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4353      	muls	r3, r2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	435a      	muls	r2, r3
 8002d88:	0013      	movs	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	400b      	ands	r3, r1
 8002d92:	001a      	movs	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	435b      	muls	r3, r3
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	434b      	muls	r3, r1
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	434b      	muls	r3, r1
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	434b      	muls	r3, r1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <LL_GPIO_SetAFPin_8_15>:
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	0a12      	lsrs	r2, r2, #8
 8002dca:	4353      	muls	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	0a12      	lsrs	r2, r2, #8
 8002dd0:	4353      	muls	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	0a12      	lsrs	r2, r2, #8
 8002dd6:	435a      	muls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	43db      	mvns	r3, r3
 8002de0:	400b      	ands	r3, r1
 8002de2:	001a      	movs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	0a09      	lsrs	r1, r1, #8
 8002dec:	434b      	muls	r3, r1
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	0a09      	lsrs	r1, r1, #8
 8002df2:	434b      	muls	r3, r1
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	0a09      	lsrs	r1, r1, #8
 8002df8:	434b      	muls	r3, r1
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	434b      	muls	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e04:	46c0      	nop			@ (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e1e:	e048      	b.n	8002eb2 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4091      	lsls	r1, r2
 8002e2a:	000a      	movs	r2, r1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d03a      	beq.n	8002eac <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d003      	beq.n	8002e46 <LL_GPIO_Init+0x3a>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d10e      	bne.n	8002e64 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7ff ff54 	bl	8002cfc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff ff37 	bl	8002cd2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff ff61 	bl	8002d34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d111      	bne.n	8002e9e <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2bff      	cmp	r3, #255	@ 0xff
 8002e7e:	d807      	bhi.n	8002e90 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff ff6f 	bl	8002d6c <LL_GPIO_SetAFPin_0_7>
 8002e8e:	e006      	b.n	8002e9e <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ff8a 	bl	8002db2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff fef7 	bl	8002c9a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	40da      	lsrs	r2, r3
 8002eba:	1e13      	subs	r3, r2, #0
 8002ebc:	d1b0      	bne.n	8002e20 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <LL_RCC_HSI_IsReady>:
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <LL_RCC_HSI_IsReady+0x1c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d101      	bne.n	8002edc <LL_RCC_HSI_IsReady+0x14>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <LL_RCC_HSI_IsReady+0x16>
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <LL_RCC_LSE_IsReady>:
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002eec:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <LL_RCC_LSE_IsReady+0x24>)
 8002eee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d101      	bne.n	8002f02 <LL_RCC_LSE_IsReady+0x1a>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <LL_RCC_LSE_IsReady+0x1c>
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	40021000 	.word	0x40021000

08002f10 <LL_RCC_MSI_GetRange>:
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002f14:	4b03      	ldr	r3, [pc, #12]	@ (8002f24 <LL_RCC_MSI_GetRange+0x14>)
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	23e0      	movs	r3, #224	@ 0xe0
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	4013      	ands	r3, r2
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <LL_RCC_GetSysClkSource>:
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <LL_RCC_GetSysClkSource+0x14>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	220c      	movs	r2, #12
 8002f32:	4013      	ands	r3, r2
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	40021000 	.word	0x40021000

08002f40 <LL_RCC_GetAHBPrescaler>:
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <LL_RCC_GetAHBPrescaler+0x14>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	22f0      	movs	r2, #240	@ 0xf0
 8002f4a:	4013      	ands	r3, r2
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	40021000 	.word	0x40021000

08002f58 <LL_RCC_GetAPB1Prescaler>:
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	23e0      	movs	r3, #224	@ 0xe0
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4013      	ands	r3, r2
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000

08002f70 <LL_RCC_GetAPB2Prescaler>:
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002f74:	4b03      	ldr	r3, [pc, #12]	@ (8002f84 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	23e0      	movs	r3, #224	@ 0xe0
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	4013      	ands	r3, r2
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000

08002f88 <LL_RCC_GetUSARTClockSource>:
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <LL_RCC_GetUSARTClockSource+0x20>)
 8002f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	401a      	ands	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	4313      	orrs	r3, r2
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000

08002fac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <LL_RCC_PLL_GetMainSource+0x14>)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	025b      	lsls	r3, r3, #9
 8002fb8:	4013      	ands	r3, r2
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	23f0      	movs	r3, #240	@ 0xf0
 8002fce:	039b      	lsls	r3, r3, #14
 8002fd0:	4013      	ands	r3, r2
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000

08002fdc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <LL_RCC_PLL_GetDivider+0x14>)
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	23c0      	movs	r3, #192	@ 0xc0
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	4013      	ands	r3, r2
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b10      	cmp	r3, #16
 8003002:	d101      	bne.n	8003008 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8003008:	2300      	movs	r3, #0
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000

08003014 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d13c      	bne.n	80030a0 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff ffad 	bl	8002f88 <LL_RCC_GetUSARTClockSource>
 800302e:	0003      	movs	r3, r0
 8003030:	4a3e      	ldr	r2, [pc, #248]	@ (800312c <LL_RCC_GetUSARTClockFreq+0x118>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01c      	beq.n	8003070 <LL_RCC_GetUSARTClockFreq+0x5c>
 8003036:	4a3d      	ldr	r2, [pc, #244]	@ (800312c <LL_RCC_GetUSARTClockFreq+0x118>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d821      	bhi.n	8003080 <LL_RCC_GetUSARTClockFreq+0x6c>
 800303c:	4a3c      	ldr	r2, [pc, #240]	@ (8003130 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <LL_RCC_GetUSARTClockFreq+0x36>
 8003042:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <LL_RCC_GetUSARTClockFreq+0x120>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d005      	beq.n	8003054 <LL_RCC_GetUSARTClockFreq+0x40>
 8003048:	e01a      	b.n	8003080 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800304a:	f000 f87f 	bl	800314c <RCC_GetSystemClockFreq>
 800304e:	0003      	movs	r3, r0
 8003050:	60fb      	str	r3, [r7, #12]
        break;
 8003052:	e025      	b.n	80030a0 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003054:	f7ff ff38 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d01e      	beq.n	800309a <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800305c:	f7ff ffca 	bl	8002ff4 <LL_RCC_IsActiveFlag_HSIDIV>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d002      	beq.n	800306a <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8003064:	4b34      	ldr	r3, [pc, #208]	@ (8003138 <LL_RCC_GetUSARTClockFreq+0x124>)
 8003066:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8003068:	e017      	b.n	800309a <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <LL_RCC_GetUSARTClockFreq+0x128>)
 800306c:	60fb      	str	r3, [r7, #12]
        break;
 800306e:	e014      	b.n	800309a <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003070:	f7ff ff3a 	bl	8002ee8 <LL_RCC_LSE_IsReady>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d012      	beq.n	800309e <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800307e:	e00e      	b.n	800309e <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003080:	f000 f864 	bl	800314c <RCC_GetSystemClockFreq>
 8003084:	0003      	movs	r3, r0
 8003086:	0018      	movs	r0, r3
 8003088:	f000 f8a4 	bl	80031d4 <RCC_GetHCLKClockFreq>
 800308c:	0003      	movs	r3, r0
 800308e:	0018      	movs	r0, r3
 8003090:	f000 f8ca 	bl	8003228 <RCC_GetPCLK2ClockFreq>
 8003094:	0003      	movs	r3, r0
 8003096:	60fb      	str	r3, [r7, #12]
        break;
 8003098:	e002      	b.n	80030a0 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	e000      	b.n	80030a0 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 800309e:	46c0      	nop			@ (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d13c      	bne.n	8003120 <LL_RCC_GetUSARTClockFreq+0x10c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7ff ff6d 	bl	8002f88 <LL_RCC_GetUSARTClockSource>
 80030ae:	0003      	movs	r3, r0
 80030b0:	4a23      	ldr	r2, [pc, #140]	@ (8003140 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01c      	beq.n	80030f0 <LL_RCC_GetUSARTClockFreq+0xdc>
 80030b6:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d821      	bhi.n	8003100 <LL_RCC_GetUSARTClockFreq+0xec>
 80030bc:	4a21      	ldr	r2, [pc, #132]	@ (8003144 <LL_RCC_GetUSARTClockFreq+0x130>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <LL_RCC_GetUSARTClockFreq+0xb6>
 80030c2:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <LL_RCC_GetUSARTClockFreq+0x134>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d005      	beq.n	80030d4 <LL_RCC_GetUSARTClockFreq+0xc0>
 80030c8:	e01a      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0xec>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80030ca:	f000 f83f 	bl	800314c <RCC_GetSystemClockFreq>
 80030ce:	0003      	movs	r3, r0
 80030d0:	60fb      	str	r3, [r7, #12]
        break;
 80030d2:	e025      	b.n	8003120 <LL_RCC_GetUSARTClockFreq+0x10c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80030d4:	f7ff fef8 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d01e      	beq.n	800311a <LL_RCC_GetUSARTClockFreq+0x106>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80030dc:	f7ff ff8a 	bl	8002ff4 <LL_RCC_IsActiveFlag_HSIDIV>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d002      	beq.n	80030ea <LL_RCC_GetUSARTClockFreq+0xd6>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80030e4:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <LL_RCC_GetUSARTClockFreq+0x124>)
 80030e6:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80030e8:	e017      	b.n	800311a <LL_RCC_GetUSARTClockFreq+0x106>
            usart_frequency = HSI_VALUE;
 80030ea:	4b14      	ldr	r3, [pc, #80]	@ (800313c <LL_RCC_GetUSARTClockFreq+0x128>)
 80030ec:	60fb      	str	r3, [r7, #12]
        break;
 80030ee:	e014      	b.n	800311a <LL_RCC_GetUSARTClockFreq+0x106>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80030f0:	f7ff fefa 	bl	8002ee8 <LL_RCC_LSE_IsReady>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d012      	beq.n	800311e <LL_RCC_GetUSARTClockFreq+0x10a>
        {
          usart_frequency = LSE_VALUE;
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80030fe:	e00e      	b.n	800311e <LL_RCC_GetUSARTClockFreq+0x10a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003100:	f000 f824 	bl	800314c <RCC_GetSystemClockFreq>
 8003104:	0003      	movs	r3, r0
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f864 	bl	80031d4 <RCC_GetHCLKClockFreq>
 800310c:	0003      	movs	r3, r0
 800310e:	0018      	movs	r0, r3
 8003110:	f000 f876 	bl	8003200 <RCC_GetPCLK1ClockFreq>
 8003114:	0003      	movs	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
        break;
 8003118:	e002      	b.n	8003120 <LL_RCC_GetUSARTClockFreq+0x10c>
        break;
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	e000      	b.n	8003120 <LL_RCC_GetUSARTClockFreq+0x10c>
        break;
 800311e:	46c0      	nop			@ (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8003120:	68fb      	ldr	r3, [r7, #12]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	00030003 	.word	0x00030003
 8003130:	00030001 	.word	0x00030001
 8003134:	00030002 	.word	0x00030002
 8003138:	003d0900 	.word	0x003d0900
 800313c:	00f42400 	.word	0x00f42400
 8003140:	000c000c 	.word	0x000c000c
 8003144:	000c0004 	.word	0x000c0004
 8003148:	000c0008 	.word	0x000c0008

0800314c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003152:	f7ff fee9 	bl	8002f28 <LL_RCC_GetSysClkSource>
 8003156:	0003      	movs	r3, r0
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d020      	beq.n	800319e <RCC_GetSystemClockFreq+0x52>
 800315c:	d824      	bhi.n	80031a8 <RCC_GetSystemClockFreq+0x5c>
 800315e:	2b08      	cmp	r3, #8
 8003160:	d01a      	beq.n	8003198 <RCC_GetSystemClockFreq+0x4c>
 8003162:	d821      	bhi.n	80031a8 <RCC_GetSystemClockFreq+0x5c>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <RCC_GetSystemClockFreq+0x22>
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00b      	beq.n	8003184 <RCC_GetSystemClockFreq+0x38>
 800316c:	e01c      	b.n	80031a8 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800316e:	f7ff fecf 	bl	8002f10 <LL_RCC_MSI_GetRange>
 8003172:	0003      	movs	r3, r0
 8003174:	0b5b      	lsrs	r3, r3, #13
 8003176:	3301      	adds	r3, #1
 8003178:	2280      	movs	r2, #128	@ 0x80
 800317a:	0212      	lsls	r2, r2, #8
 800317c:	409a      	lsls	r2, r3
 800317e:	0013      	movs	r3, r2
 8003180:	607b      	str	r3, [r7, #4]
      break;
 8003182:	e01c      	b.n	80031be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003184:	f7ff ff36 	bl	8002ff4 <LL_RCC_IsActiveFlag_HSIDIV>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d002      	beq.n	8003192 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 800318c:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <RCC_GetSystemClockFreq+0x7c>)
 800318e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8003190:	e015      	b.n	80031be <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8003192:	4b0e      	ldr	r3, [pc, #56]	@ (80031cc <RCC_GetSystemClockFreq+0x80>)
 8003194:	607b      	str	r3, [r7, #4]
      break;
 8003196:	e012      	b.n	80031be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <RCC_GetSystemClockFreq+0x84>)
 800319a:	607b      	str	r3, [r7, #4]
      break;
 800319c:	e00f      	b.n	80031be <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800319e:	f000 f857 	bl	8003250 <RCC_PLL_GetFreqDomain_SYS>
 80031a2:	0003      	movs	r3, r0
 80031a4:	607b      	str	r3, [r7, #4]
      break;
 80031a6:	e00a      	b.n	80031be <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80031a8:	f7ff feb2 	bl	8002f10 <LL_RCC_MSI_GetRange>
 80031ac:	0003      	movs	r3, r0
 80031ae:	0b5b      	lsrs	r3, r3, #13
 80031b0:	3301      	adds	r3, #1
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	0212      	lsls	r2, r2, #8
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	607b      	str	r3, [r7, #4]
      break;
 80031bc:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80031be:	687b      	ldr	r3, [r7, #4]
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	003d0900 	.word	0x003d0900
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	007a1200 	.word	0x007a1200

080031d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80031dc:	f7ff feb0 	bl	8002f40 <LL_RCC_GetAHBPrescaler>
 80031e0:	0003      	movs	r3, r0
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	220f      	movs	r2, #15
 80031e6:	4013      	ands	r3, r2
 80031e8:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <RCC_GetHCLKClockFreq+0x28>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	001a      	movs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	40d3      	lsrs	r3, r2
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	08004250 	.word	0x08004250

08003200 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003208:	f7ff fea6 	bl	8002f58 <LL_RCC_GetAPB1Prescaler>
 800320c:	0003      	movs	r3, r0
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <RCC_GetPCLK1ClockFreq+0x24>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	001a      	movs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	40d3      	lsrs	r3, r2
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	08004260 	.word	0x08004260

08003228 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003230:	f7ff fe9e 	bl	8002f70 <LL_RCC_GetAPB2Prescaler>
 8003234:	0003      	movs	r3, r0
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	4a04      	ldr	r2, [pc, #16]	@ (800324c <RCC_GetPCLK2ClockFreq+0x24>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	001a      	movs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	40d3      	lsrs	r3, r2
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	08004260 	.word	0x08004260

08003250 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003256:	f7ff fea9 	bl	8002fac <LL_RCC_PLL_GetMainSource>
 800325a:	0003      	movs	r3, r0
 800325c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003264:	f7ff fec6 	bl	8002ff4 <LL_RCC_IsActiveFlag_HSIDIV>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d002      	beq.n	8003272 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800326c:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800326e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8003270:	e005      	b.n	800327e <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003274:	607b      	str	r3, [r7, #4]
      break;
 8003276:	e002      	b.n	800327e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800327a:	607b      	str	r3, [r7, #4]
      break;
 800327c:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800327e:	f7ff fea1 	bl	8002fc4 <LL_RCC_PLL_GetMultiplicator>
 8003282:	0003      	movs	r3, r0
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8003288:	5cd3      	ldrb	r3, [r2, r3]
 800328a:	001a      	movs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4353      	muls	r3, r2
 8003290:	001c      	movs	r4, r3
 8003292:	f7ff fea3 	bl	8002fdc <LL_RCC_PLL_GetDivider>
 8003296:	0003      	movs	r3, r0
 8003298:	0d9b      	lsrs	r3, r3, #22
 800329a:	3301      	adds	r3, #1
 800329c:	0019      	movs	r1, r3
 800329e:	0020      	movs	r0, r4
 80032a0:	f7fc ff32 	bl	8000108 <__udivsi3>
 80032a4:	0003      	movs	r3, r0
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b003      	add	sp, #12
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	003d0900 	.word	0x003d0900
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200
 80032bc:	08004268 	.word	0x08004268

080032c0 <LL_TIM_SetPrescaler>:
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <LL_TIM_SetAutoReload>:
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032e8:	46c0      	nop			@ (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <LL_TIM_OC_SetCompareCH1>:
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <LL_TIM_OC_SetCompareCH2>:
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003318:	46c0      	nop			@ (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}

08003320 <LL_TIM_OC_SetCompareCH3>:
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <LL_TIM_OC_SetCompareCH4>:
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003348:	46c0      	nop			@ (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bd80      	pop	{r7, pc}

08003350 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2201      	movs	r2, #1
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	615a      	str	r2, [r3, #20]
}
 8003364:	46c0      	nop			@ (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	429a      	cmp	r2, r3
 8003384:	d007      	beq.n	8003396 <LL_TIM_Init+0x2a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1e      	ldr	r2, [pc, #120]	@ (8003404 <LL_TIM_Init+0x98>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <LL_TIM_Init+0x2a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <LL_TIM_Init+0x9c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d107      	bne.n	80033a6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2270      	movs	r2, #112	@ 0x70
 800339a:	4393      	bics	r3, r2
 800339c:	001a      	movs	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	05db      	lsls	r3, r3, #23
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d007      	beq.n	80033c0 <LL_TIM_Init+0x54>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a14      	ldr	r2, [pc, #80]	@ (8003404 <LL_TIM_Init+0x98>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <LL_TIM_Init+0x54>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <LL_TIM_Init+0x9c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <LL_TIM_Init+0x62>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a12      	ldr	r2, [pc, #72]	@ (800340c <LL_TIM_Init+0xa0>)
 80033c4:	401a      	ands	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f7ff ff7b 	bl	80032d8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	001a      	movs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7ff ff67 	bl	80032c0 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff ffab 	bl	8003350 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b004      	add	sp, #16
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40010800 	.word	0x40010800
 8003408:	40011400 	.word	0x40011400
 800340c:	fffffcff 	.word	0xfffffcff

08003410 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800341c:	2317      	movs	r3, #23
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	015b      	lsls	r3, r3, #5
 800342a:	429a      	cmp	r2, r3
 800342c:	d036      	beq.n	800349c <LL_TIM_OC_Init+0x8c>
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	015b      	lsls	r3, r3, #5
 8003434:	429a      	cmp	r2, r3
 8003436:	d83c      	bhi.n	80034b2 <LL_TIM_OC_Init+0xa2>
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	429a      	cmp	r2, r3
 8003440:	d021      	beq.n	8003486 <LL_TIM_OC_Init+0x76>
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	429a      	cmp	r2, r3
 800344a:	d832      	bhi.n	80034b2 <LL_TIM_OC_Init+0xa2>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d003      	beq.n	800345a <LL_TIM_OC_Init+0x4a>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d00b      	beq.n	8003470 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003458:	e02b      	b.n	80034b2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800345a:	2317      	movs	r3, #23
 800345c:	18fc      	adds	r4, r7, r3
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	0011      	movs	r1, r2
 8003464:	0018      	movs	r0, r3
 8003466:	f000 f82c 	bl	80034c2 <OC1Config>
 800346a:	0003      	movs	r3, r0
 800346c:	7023      	strb	r3, [r4, #0]
      break;
 800346e:	e021      	b.n	80034b4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003470:	2317      	movs	r3, #23
 8003472:	18fc      	adds	r4, r7, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0011      	movs	r1, r2
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f868 	bl	8003550 <OC2Config>
 8003480:	0003      	movs	r3, r0
 8003482:	7023      	strb	r3, [r4, #0]
      break;
 8003484:	e016      	b.n	80034b4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003486:	2317      	movs	r3, #23
 8003488:	18fc      	adds	r4, r7, r3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0011      	movs	r1, r2
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f8a9 	bl	80035e8 <OC3Config>
 8003496:	0003      	movs	r3, r0
 8003498:	7023      	strb	r3, [r4, #0]
      break;
 800349a:	e00b      	b.n	80034b4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800349c:	2317      	movs	r3, #23
 800349e:	18fc      	adds	r4, r7, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0011      	movs	r1, r2
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 f8e8 	bl	800367c <OC4Config>
 80034ac:	0003      	movs	r3, r0
 80034ae:	7023      	strb	r3, [r4, #0]
      break;
 80034b0:	e000      	b.n	80034b4 <LL_TIM_OC_Init+0xa4>
      break;
 80034b2:	46c0      	nop			@ (mov r8, r8)
  }

  return result;
 80034b4:	2317      	movs	r3, #23
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b007      	add	sp, #28
 80034c0:	bd90      	pop	{r4, r7, pc}

080034c2 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4393      	bics	r3, r2
 80034d4:	001a      	movs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2203      	movs	r2, #3
 80034f0:	4393      	bics	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2270      	movs	r2, #112	@ 0x70
 80034f8:	4393      	bics	r3, r2
 80034fa:	001a      	movs	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2202      	movs	r2, #2
 8003508:	4393      	bics	r3, r2
 800350a:	001a      	movs	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2201      	movs	r2, #1
 8003518:	4393      	bics	r3, r2
 800351a:	001a      	movs	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0011      	movs	r1, r2
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff fed9 	bl	80032f0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003544:	2300      	movs	r3, #0
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b006      	add	sp, #24
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	2210      	movs	r2, #16
 8003560:	4393      	bics	r3, r2
 8003562:	001a      	movs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <OC2Config+0x90>)
 800357e:	4013      	ands	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a17      	ldr	r2, [pc, #92]	@ (80035e4 <OC2Config+0x94>)
 8003586:	401a      	ands	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2220      	movs	r2, #32
 8003596:	4393      	bics	r3, r2
 8003598:	001a      	movs	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2210      	movs	r2, #16
 80035a8:	4393      	bics	r3, r2
 80035aa:	001a      	movs	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	0011      	movs	r1, r2
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7ff fe9c 	bl	8003308 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fffffcff 	.word	0xfffffcff
 80035e4:	ffff8fff 	.word	0xffff8fff

080035e8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <OC3Config+0x8c>)
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2203      	movs	r2, #3
 8003614:	4393      	bics	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2270      	movs	r2, #112	@ 0x70
 800361c:	4393      	bics	r3, r2
 800361e:	001a      	movs	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4a13      	ldr	r2, [pc, #76]	@ (8003678 <OC3Config+0x90>)
 800362c:	401a      	ands	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	4a0e      	ldr	r2, [pc, #56]	@ (8003674 <OC3Config+0x8c>)
 800363c:	401a      	ands	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff fe5f 	bl	8003320 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003668:	2300      	movs	r3, #0
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b006      	add	sp, #24
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	fffffeff 	.word	0xfffffeff
 8003678:	fffffdff 	.word	0xfffffdff

0800367c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a1f      	ldr	r2, [pc, #124]	@ (8003708 <OC4Config+0x8c>)
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a19      	ldr	r2, [pc, #100]	@ (800370c <OC4Config+0x90>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <OC4Config+0x94>)
 80036b0:	401a      	ands	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a15      	ldr	r2, [pc, #84]	@ (8003714 <OC4Config+0x98>)
 80036c0:	401a      	ands	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003708 <OC4Config+0x8c>)
 80036d0:	401a      	ands	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0011      	movs	r1, r2
 80036f0:	0018      	movs	r0, r3
 80036f2:	f7ff fe21 	bl	8003338 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b006      	add	sp, #24
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	ffffefff 	.word	0xffffefff
 800370c:	fffffcff 	.word	0xfffffcff
 8003710:	ffff8fff 	.word	0xffff8fff
 8003714:	ffffdfff 	.word	0xffffdfff

08003718 <LL_USART_IsEnabled>:
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	4013      	ands	r3, r2
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <LL_USART_IsEnabled+0x18>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <LL_USART_IsEnabled+0x1a>
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <LL_USART_SetStopBitsLength>:
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a05      	ldr	r2, [pc, #20]	@ (8003760 <LL_USART_SetStopBitsLength+0x24>)
 800374c:	401a      	ands	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	605a      	str	r2, [r3, #4]
}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	ffffcfff 	.word	0xffffcfff

08003764 <LL_USART_SetHWFlowCtrl>:
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a05      	ldr	r2, [pc, #20]	@ (8003788 <LL_USART_SetHWFlowCtrl+0x24>)
 8003774:	401a      	ands	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	fffffcff 	.word	0xfffffcff

0800378c <LL_USART_SetBaudRate>:
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d11c      	bne.n	80037de <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	005a      	lsls	r2, r3, #1
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fc fca9 	bl	8000108 <__udivsi3>
 80037b6:	0003      	movs	r3, r0
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4a10      	ldr	r2, [pc, #64]	@ (8003800 <LL_USART_SetBaudRate+0x74>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	001a      	movs	r2, r3
 80037cc:	2307      	movs	r3, #7
 80037ce:	4013      	ands	r3, r2
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	60da      	str	r2, [r3, #12]
}
 80037dc:	e00c      	b.n	80037f8 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	085a      	lsrs	r2, r3, #1
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	6839      	ldr	r1, [r7, #0]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fc fc8d 	bl	8000108 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	001a      	movs	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	60da      	str	r2, [r3, #12]
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0000fff0 	.word	0x0000fff0

08003804 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f7ff ff7b 	bl	8003718 <LL_USART_IsEnabled>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d145      	bne.n	80038b2 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a25      	ldr	r2, [pc, #148]	@ (80038c0 <LL_USART_Init+0xbc>)
 800382c:	401a      	ands	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4319      	orrs	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4319      	orrs	r1, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	430b      	orrs	r3, r1
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0011      	movs	r1, r2
 8003852:	0018      	movs	r0, r3
 8003854:	f7ff ff72 	bl	800373c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f7ff ff7f 	bl	8003764 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <LL_USART_Init+0xc0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d105      	bne.n	800387a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800386e:	2003      	movs	r0, #3
 8003870:	f7ff fbd0 	bl	8003014 <LL_RCC_GetUSARTClockFreq>
 8003874:	0003      	movs	r3, r0
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e008      	b.n	800388c <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <LL_USART_Init+0xc4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d104      	bne.n	800388c <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003882:	200c      	movs	r0, #12
 8003884:	f7ff fbc6 	bl	8003014 <LL_RCC_GetUSARTClockFreq>
 8003888:	0003      	movs	r3, r0
 800388a:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00f      	beq.n	80038b2 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 800389a:	230f      	movs	r3, #15
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff6d 	bl	800378c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80038b2:	230f      	movs	r3, #15
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	781b      	ldrb	r3, [r3, #0]
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b004      	add	sp, #16
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	efff69f3 	.word	0xefff69f3
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40004400 	.word	0x40004400

080038cc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80038d6:	6839      	ldr	r1, [r7, #0]
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fc fc15 	bl	8000108 <__udivsi3>
 80038de:	0003      	movs	r3, r0
 80038e0:	001a      	movs	r2, r3
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <LL_InitTick+0x30>)
 80038e4:	3a01      	subs	r2, #1
 80038e6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80038e8:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <LL_InitTick+0x30>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <LL_InitTick+0x30>)
 80038f0:	2205      	movs	r2, #5
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	e000e010 	.word	0xe000e010

08003900 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003908:	23fa      	movs	r3, #250	@ 0xfa
 800390a:	009a      	lsls	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff ffdb 	bl	80038cc <LL_InitTick>
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <LL_SetSystemCoreClock+0x18>)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	2000000c 	.word	0x2000000c

0800393c <std>:
 800393c:	2300      	movs	r3, #0
 800393e:	b510      	push	{r4, lr}
 8003940:	0004      	movs	r4, r0
 8003942:	6003      	str	r3, [r0, #0]
 8003944:	6043      	str	r3, [r0, #4]
 8003946:	6083      	str	r3, [r0, #8]
 8003948:	8181      	strh	r1, [r0, #12]
 800394a:	6643      	str	r3, [r0, #100]	@ 0x64
 800394c:	81c2      	strh	r2, [r0, #14]
 800394e:	6103      	str	r3, [r0, #16]
 8003950:	6143      	str	r3, [r0, #20]
 8003952:	6183      	str	r3, [r0, #24]
 8003954:	0019      	movs	r1, r3
 8003956:	2208      	movs	r2, #8
 8003958:	305c      	adds	r0, #92	@ 0x5c
 800395a:	f000 f9b5 	bl	8003cc8 <memset>
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <std+0x50>)
 8003960:	6224      	str	r4, [r4, #32]
 8003962:	6263      	str	r3, [r4, #36]	@ 0x24
 8003964:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <std+0x54>)
 8003966:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003968:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <std+0x58>)
 800396a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <std+0x5c>)
 800396e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <std+0x60>)
 8003972:	429c      	cmp	r4, r3
 8003974:	d005      	beq.n	8003982 <std+0x46>
 8003976:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <std+0x64>)
 8003978:	429c      	cmp	r4, r3
 800397a:	d002      	beq.n	8003982 <std+0x46>
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <std+0x68>)
 800397e:	429c      	cmp	r4, r3
 8003980:	d103      	bne.n	800398a <std+0x4e>
 8003982:	0020      	movs	r0, r4
 8003984:	3058      	adds	r0, #88	@ 0x58
 8003986:	f000 fa1f 	bl	8003dc8 <__retarget_lock_init_recursive>
 800398a:	bd10      	pop	{r4, pc}
 800398c:	08003c31 	.word	0x08003c31
 8003990:	08003c59 	.word	0x08003c59
 8003994:	08003c91 	.word	0x08003c91
 8003998:	08003cbd 	.word	0x08003cbd
 800399c:	200002b4 	.word	0x200002b4
 80039a0:	2000031c 	.word	0x2000031c
 80039a4:	20000384 	.word	0x20000384

080039a8 <stdio_exit_handler>:
 80039a8:	b510      	push	{r4, lr}
 80039aa:	4a03      	ldr	r2, [pc, #12]	@ (80039b8 <stdio_exit_handler+0x10>)
 80039ac:	4903      	ldr	r1, [pc, #12]	@ (80039bc <stdio_exit_handler+0x14>)
 80039ae:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <stdio_exit_handler+0x18>)
 80039b0:	f000 f86c 	bl	8003a8c <_fwalk_sglue>
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	20000010 	.word	0x20000010
 80039bc:	080040e9 	.word	0x080040e9
 80039c0:	20000020 	.word	0x20000020

080039c4 <cleanup_stdio>:
 80039c4:	6841      	ldr	r1, [r0, #4]
 80039c6:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <cleanup_stdio+0x30>)
 80039c8:	b510      	push	{r4, lr}
 80039ca:	0004      	movs	r4, r0
 80039cc:	4299      	cmp	r1, r3
 80039ce:	d001      	beq.n	80039d4 <cleanup_stdio+0x10>
 80039d0:	f000 fb8a 	bl	80040e8 <_fflush_r>
 80039d4:	68a1      	ldr	r1, [r4, #8]
 80039d6:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <cleanup_stdio+0x34>)
 80039d8:	4299      	cmp	r1, r3
 80039da:	d002      	beq.n	80039e2 <cleanup_stdio+0x1e>
 80039dc:	0020      	movs	r0, r4
 80039de:	f000 fb83 	bl	80040e8 <_fflush_r>
 80039e2:	68e1      	ldr	r1, [r4, #12]
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <cleanup_stdio+0x38>)
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d002      	beq.n	80039f0 <cleanup_stdio+0x2c>
 80039ea:	0020      	movs	r0, r4
 80039ec:	f000 fb7c 	bl	80040e8 <_fflush_r>
 80039f0:	bd10      	pop	{r4, pc}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	200002b4 	.word	0x200002b4
 80039f8:	2000031c 	.word	0x2000031c
 80039fc:	20000384 	.word	0x20000384

08003a00 <global_stdio_init.part.0>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <global_stdio_init.part.0+0x28>)
 8003a04:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <global_stdio_init.part.0+0x2c>)
 8003a06:	2104      	movs	r1, #4
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	4809      	ldr	r0, [pc, #36]	@ (8003a30 <global_stdio_init.part.0+0x30>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f7ff ff95 	bl	800393c <std>
 8003a12:	2201      	movs	r2, #1
 8003a14:	2109      	movs	r1, #9
 8003a16:	4807      	ldr	r0, [pc, #28]	@ (8003a34 <global_stdio_init.part.0+0x34>)
 8003a18:	f7ff ff90 	bl	800393c <std>
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	2112      	movs	r1, #18
 8003a20:	4805      	ldr	r0, [pc, #20]	@ (8003a38 <global_stdio_init.part.0+0x38>)
 8003a22:	f7ff ff8b 	bl	800393c <std>
 8003a26:	bd10      	pop	{r4, pc}
 8003a28:	200003ec 	.word	0x200003ec
 8003a2c:	080039a9 	.word	0x080039a9
 8003a30:	200002b4 	.word	0x200002b4
 8003a34:	2000031c 	.word	0x2000031c
 8003a38:	20000384 	.word	0x20000384

08003a3c <__sfp_lock_acquire>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4802      	ldr	r0, [pc, #8]	@ (8003a48 <__sfp_lock_acquire+0xc>)
 8003a40:	f000 f9c3 	bl	8003dca <__retarget_lock_acquire_recursive>
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	200003f5 	.word	0x200003f5

08003a4c <__sfp_lock_release>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4802      	ldr	r0, [pc, #8]	@ (8003a58 <__sfp_lock_release+0xc>)
 8003a50:	f000 f9bc 	bl	8003dcc <__retarget_lock_release_recursive>
 8003a54:	bd10      	pop	{r4, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	200003f5 	.word	0x200003f5

08003a5c <__sinit>:
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	0004      	movs	r4, r0
 8003a60:	f7ff ffec 	bl	8003a3c <__sfp_lock_acquire>
 8003a64:	6a23      	ldr	r3, [r4, #32]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <__sinit+0x14>
 8003a6a:	f7ff ffef 	bl	8003a4c <__sfp_lock_release>
 8003a6e:	bd10      	pop	{r4, pc}
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <__sinit+0x28>)
 8003a72:	6223      	str	r3, [r4, #32]
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <__sinit+0x2c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f6      	bne.n	8003a6a <__sinit+0xe>
 8003a7c:	f7ff ffc0 	bl	8003a00 <global_stdio_init.part.0>
 8003a80:	e7f3      	b.n	8003a6a <__sinit+0xe>
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	080039c5 	.word	0x080039c5
 8003a88:	200003ec 	.word	0x200003ec

08003a8c <_fwalk_sglue>:
 8003a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a8e:	0014      	movs	r4, r2
 8003a90:	2600      	movs	r6, #0
 8003a92:	9000      	str	r0, [sp, #0]
 8003a94:	9101      	str	r1, [sp, #4]
 8003a96:	68a5      	ldr	r5, [r4, #8]
 8003a98:	6867      	ldr	r7, [r4, #4]
 8003a9a:	3f01      	subs	r7, #1
 8003a9c:	d504      	bpl.n	8003aa8 <_fwalk_sglue+0x1c>
 8003a9e:	6824      	ldr	r4, [r4, #0]
 8003aa0:	2c00      	cmp	r4, #0
 8003aa2:	d1f8      	bne.n	8003a96 <_fwalk_sglue+0xa>
 8003aa4:	0030      	movs	r0, r6
 8003aa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aa8:	89ab      	ldrh	r3, [r5, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d908      	bls.n	8003ac0 <_fwalk_sglue+0x34>
 8003aae:	220e      	movs	r2, #14
 8003ab0:	5eab      	ldrsh	r3, [r5, r2]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d004      	beq.n	8003ac0 <_fwalk_sglue+0x34>
 8003ab6:	0029      	movs	r1, r5
 8003ab8:	9800      	ldr	r0, [sp, #0]
 8003aba:	9b01      	ldr	r3, [sp, #4]
 8003abc:	4798      	blx	r3
 8003abe:	4306      	orrs	r6, r0
 8003ac0:	3568      	adds	r5, #104	@ 0x68
 8003ac2:	e7ea      	b.n	8003a9a <_fwalk_sglue+0xe>

08003ac4 <setvbuf>:
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	001d      	movs	r5, r3
 8003ac8:	4b57      	ldr	r3, [pc, #348]	@ (8003c28 <setvbuf+0x164>)
 8003aca:	b085      	sub	sp, #20
 8003acc:	681e      	ldr	r6, [r3, #0]
 8003ace:	0004      	movs	r4, r0
 8003ad0:	000f      	movs	r7, r1
 8003ad2:	9200      	str	r2, [sp, #0]
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	d005      	beq.n	8003ae4 <setvbuf+0x20>
 8003ad8:	6a33      	ldr	r3, [r6, #32]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <setvbuf+0x20>
 8003ade:	0030      	movs	r0, r6
 8003ae0:	f7ff ffbc 	bl	8003a5c <__sinit>
 8003ae4:	9b00      	ldr	r3, [sp, #0]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d005      	beq.n	8003af6 <setvbuf+0x32>
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d900      	bls.n	8003af0 <setvbuf+0x2c>
 8003aee:	e097      	b.n	8003c20 <setvbuf+0x15c>
 8003af0:	2d00      	cmp	r5, #0
 8003af2:	da00      	bge.n	8003af6 <setvbuf+0x32>
 8003af4:	e094      	b.n	8003c20 <setvbuf+0x15c>
 8003af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003af8:	07db      	lsls	r3, r3, #31
 8003afa:	d405      	bmi.n	8003b08 <setvbuf+0x44>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	059b      	lsls	r3, r3, #22
 8003b00:	d402      	bmi.n	8003b08 <setvbuf+0x44>
 8003b02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b04:	f000 f961 	bl	8003dca <__retarget_lock_acquire_recursive>
 8003b08:	0021      	movs	r1, r4
 8003b0a:	0030      	movs	r0, r6
 8003b0c:	f000 faec 	bl	80040e8 <_fflush_r>
 8003b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b12:	2900      	cmp	r1, #0
 8003b14:	d008      	beq.n	8003b28 <setvbuf+0x64>
 8003b16:	0023      	movs	r3, r4
 8003b18:	3344      	adds	r3, #68	@ 0x44
 8003b1a:	4299      	cmp	r1, r3
 8003b1c:	d002      	beq.n	8003b24 <setvbuf+0x60>
 8003b1e:	0030      	movs	r0, r6
 8003b20:	f000 f956 	bl	8003dd0 <_free_r>
 8003b24:	2300      	movs	r3, #0
 8003b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61a3      	str	r3, [r4, #24]
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	d503      	bpl.n	8003b3c <setvbuf+0x78>
 8003b34:	0030      	movs	r0, r6
 8003b36:	6921      	ldr	r1, [r4, #16]
 8003b38:	f000 f94a 	bl	8003dd0 <_free_r>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <setvbuf+0x168>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	9b00      	ldr	r3, [sp, #0]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d060      	beq.n	8003c0c <setvbuf+0x148>
 8003b4a:	ab03      	add	r3, sp, #12
 8003b4c:	0021      	movs	r1, r4
 8003b4e:	0030      	movs	r0, r6
 8003b50:	aa02      	add	r2, sp, #8
 8003b52:	f000 faf5 	bl	8004140 <__swhatbuf_r>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	4303      	orrs	r3, r0
 8003b5a:	81a3      	strh	r3, [r4, #12]
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	d124      	bne.n	8003baa <setvbuf+0xe6>
 8003b60:	9d02      	ldr	r5, [sp, #8]
 8003b62:	0028      	movs	r0, r5
 8003b64:	f000 f97e 	bl	8003e64 <malloc>
 8003b68:	9501      	str	r5, [sp, #4]
 8003b6a:	1e07      	subs	r7, r0, #0
 8003b6c:	d148      	bne.n	8003c00 <setvbuf+0x13c>
 8003b6e:	9b02      	ldr	r3, [sp, #8]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	42ab      	cmp	r3, r5
 8003b74:	d13f      	bne.n	8003bf6 <setvbuf+0x132>
 8003b76:	2501      	movs	r5, #1
 8003b78:	426d      	negs	r5, r5
 8003b7a:	220c      	movs	r2, #12
 8003b7c:	5ea3      	ldrsh	r3, [r4, r2]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	431a      	orrs	r2, r3
 8003b82:	81a2      	strh	r2, [r4, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	60a2      	str	r2, [r4, #8]
 8003b88:	0022      	movs	r2, r4
 8003b8a:	3247      	adds	r2, #71	@ 0x47
 8003b8c:	6022      	str	r2, [r4, #0]
 8003b8e:	6122      	str	r2, [r4, #16]
 8003b90:	2201      	movs	r2, #1
 8003b92:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003b94:	6162      	str	r2, [r4, #20]
 8003b96:	4211      	tst	r1, r2
 8003b98:	d104      	bne.n	8003ba4 <setvbuf+0xe0>
 8003b9a:	059b      	lsls	r3, r3, #22
 8003b9c:	d402      	bmi.n	8003ba4 <setvbuf+0xe0>
 8003b9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ba0:	f000 f914 	bl	8003dcc <__retarget_lock_release_recursive>
 8003ba4:	0028      	movs	r0, r5
 8003ba6:	b005      	add	sp, #20
 8003ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003baa:	2f00      	cmp	r7, #0
 8003bac:	d0d9      	beq.n	8003b62 <setvbuf+0x9e>
 8003bae:	6a33      	ldr	r3, [r6, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <setvbuf+0xf6>
 8003bb4:	0030      	movs	r0, r6
 8003bb6:	f7ff ff51 	bl	8003a5c <__sinit>
 8003bba:	9b00      	ldr	r3, [sp, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d103      	bne.n	8003bc8 <setvbuf+0x104>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	9a00      	ldr	r2, [sp, #0]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	81a2      	strh	r2, [r4, #12]
 8003bc8:	220c      	movs	r2, #12
 8003bca:	5ea3      	ldrsh	r3, [r4, r2]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	0019      	movs	r1, r3
 8003bd0:	6027      	str	r7, [r4, #0]
 8003bd2:	6127      	str	r7, [r4, #16]
 8003bd4:	6165      	str	r5, [r4, #20]
 8003bd6:	4011      	ands	r1, r2
 8003bd8:	4213      	tst	r3, r2
 8003bda:	d01b      	beq.n	8003c14 <setvbuf+0x150>
 8003bdc:	07da      	lsls	r2, r3, #31
 8003bde:	d517      	bpl.n	8003c10 <setvbuf+0x14c>
 8003be0:	2200      	movs	r2, #0
 8003be2:	426d      	negs	r5, r5
 8003be4:	60a2      	str	r2, [r4, #8]
 8003be6:	61a5      	str	r5, [r4, #24]
 8003be8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003bea:	07d2      	lsls	r2, r2, #31
 8003bec:	d401      	bmi.n	8003bf2 <setvbuf+0x12e>
 8003bee:	059b      	lsls	r3, r3, #22
 8003bf0:	d512      	bpl.n	8003c18 <setvbuf+0x154>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	e7d6      	b.n	8003ba4 <setvbuf+0xe0>
 8003bf6:	9801      	ldr	r0, [sp, #4]
 8003bf8:	f000 f934 	bl	8003e64 <malloc>
 8003bfc:	1e07      	subs	r7, r0, #0
 8003bfe:	d0ba      	beq.n	8003b76 <setvbuf+0xb2>
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	89a2      	ldrh	r2, [r4, #12]
 8003c04:	9d01      	ldr	r5, [sp, #4]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	81a3      	strh	r3, [r4, #12]
 8003c0a:	e7d0      	b.n	8003bae <setvbuf+0xea>
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	e7b4      	b.n	8003b7a <setvbuf+0xb6>
 8003c10:	60a5      	str	r5, [r4, #8]
 8003c12:	e7e9      	b.n	8003be8 <setvbuf+0x124>
 8003c14:	60a1      	str	r1, [r4, #8]
 8003c16:	e7e7      	b.n	8003be8 <setvbuf+0x124>
 8003c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c1a:	f000 f8d7 	bl	8003dcc <__retarget_lock_release_recursive>
 8003c1e:	e7e8      	b.n	8003bf2 <setvbuf+0x12e>
 8003c20:	2501      	movs	r5, #1
 8003c22:	426d      	negs	r5, r5
 8003c24:	e7be      	b.n	8003ba4 <setvbuf+0xe0>
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	2000001c 	.word	0x2000001c
 8003c2c:	fffff35c 	.word	0xfffff35c

08003c30 <__sread>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	000c      	movs	r4, r1
 8003c34:	250e      	movs	r5, #14
 8003c36:	5f49      	ldrsh	r1, [r1, r5]
 8003c38:	f000 f874 	bl	8003d24 <_read_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	db03      	blt.n	8003c48 <__sread+0x18>
 8003c40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c42:	181b      	adds	r3, r3, r0
 8003c44:	6563      	str	r3, [r4, #84]	@ 0x54
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	89a3      	ldrh	r3, [r4, #12]
 8003c4a:	4a02      	ldr	r2, [pc, #8]	@ (8003c54 <__sread+0x24>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	e7f9      	b.n	8003c46 <__sread+0x16>
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	ffffefff 	.word	0xffffefff

08003c58 <__swrite>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	001f      	movs	r7, r3
 8003c5c:	898b      	ldrh	r3, [r1, #12]
 8003c5e:	0005      	movs	r5, r0
 8003c60:	000c      	movs	r4, r1
 8003c62:	0016      	movs	r6, r2
 8003c64:	05db      	lsls	r3, r3, #23
 8003c66:	d505      	bpl.n	8003c74 <__swrite+0x1c>
 8003c68:	230e      	movs	r3, #14
 8003c6a:	5ec9      	ldrsh	r1, [r1, r3]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f000 f844 	bl	8003cfc <_lseek_r>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	4a05      	ldr	r2, [pc, #20]	@ (8003c8c <__swrite+0x34>)
 8003c78:	0028      	movs	r0, r5
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	81a3      	strh	r3, [r4, #12]
 8003c7e:	0032      	movs	r2, r6
 8003c80:	230e      	movs	r3, #14
 8003c82:	5ee1      	ldrsh	r1, [r4, r3]
 8003c84:	003b      	movs	r3, r7
 8003c86:	f000 f861 	bl	8003d4c <_write_r>
 8003c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8c:	ffffefff 	.word	0xffffefff

08003c90 <__sseek>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	000c      	movs	r4, r1
 8003c94:	250e      	movs	r5, #14
 8003c96:	5f49      	ldrsh	r1, [r1, r5]
 8003c98:	f000 f830 	bl	8003cfc <_lseek_r>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	1c42      	adds	r2, r0, #1
 8003ca0:	d103      	bne.n	8003caa <__sseek+0x1a>
 8003ca2:	4a05      	ldr	r2, [pc, #20]	@ (8003cb8 <__sseek+0x28>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
 8003caa:	2280      	movs	r2, #128	@ 0x80
 8003cac:	0152      	lsls	r2, r2, #5
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	81a3      	strh	r3, [r4, #12]
 8003cb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003cb4:	e7f8      	b.n	8003ca8 <__sseek+0x18>
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	ffffefff 	.word	0xffffefff

08003cbc <__sclose>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	230e      	movs	r3, #14
 8003cc0:	5ec9      	ldrsh	r1, [r1, r3]
 8003cc2:	f000 f809 	bl	8003cd8 <_close_r>
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <memset>:
 8003cc8:	0003      	movs	r3, r0
 8003cca:	1882      	adds	r2, r0, r2
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	7019      	strb	r1, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <_close_r>:
 8003cd8:	2300      	movs	r3, #0
 8003cda:	b570      	push	{r4, r5, r6, lr}
 8003cdc:	4d06      	ldr	r5, [pc, #24]	@ (8003cf8 <_close_r+0x20>)
 8003cde:	0004      	movs	r4, r0
 8003ce0:	0008      	movs	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fe f97f 	bl	8001fe6 <_close>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d103      	bne.n	8003cf4 <_close_r+0x1c>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d000      	beq.n	8003cf4 <_close_r+0x1c>
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	bd70      	pop	{r4, r5, r6, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	200003f0 	.word	0x200003f0

08003cfc <_lseek_r>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	0004      	movs	r4, r0
 8003d00:	0008      	movs	r0, r1
 8003d02:	0011      	movs	r1, r2
 8003d04:	001a      	movs	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	4d05      	ldr	r5, [pc, #20]	@ (8003d20 <_lseek_r+0x24>)
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	f7fe f982 	bl	8002014 <_lseek>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d103      	bne.n	8003d1c <_lseek_r+0x20>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d000      	beq.n	8003d1c <_lseek_r+0x20>
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	200003f0 	.word	0x200003f0

08003d24 <_read_r>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	0004      	movs	r4, r0
 8003d28:	0008      	movs	r0, r1
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	4d05      	ldr	r5, [pc, #20]	@ (8003d48 <_read_r+0x24>)
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	f7fe f97f 	bl	8002036 <_read>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d103      	bne.n	8003d44 <_read_r+0x20>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d000      	beq.n	8003d44 <_read_r+0x20>
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	200003f0 	.word	0x200003f0

08003d4c <_write_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	0004      	movs	r4, r0
 8003d50:	0008      	movs	r0, r1
 8003d52:	0011      	movs	r1, r2
 8003d54:	001a      	movs	r2, r3
 8003d56:	2300      	movs	r3, #0
 8003d58:	4d05      	ldr	r5, [pc, #20]	@ (8003d70 <_write_r+0x24>)
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fe f918 	bl	8001f90 <_write>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d103      	bne.n	8003d6c <_write_r+0x20>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d000      	beq.n	8003d6c <_write_r+0x20>
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	200003f0 	.word	0x200003f0

08003d74 <__errno>:
 8003d74:	4b01      	ldr	r3, [pc, #4]	@ (8003d7c <__errno+0x8>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	4770      	bx	lr
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	2000001c 	.word	0x2000001c

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	2600      	movs	r6, #0
 8003d84:	4c0c      	ldr	r4, [pc, #48]	@ (8003db8 <__libc_init_array+0x38>)
 8003d86:	4d0d      	ldr	r5, [pc, #52]	@ (8003dbc <__libc_init_array+0x3c>)
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	2600      	movs	r6, #0
 8003d92:	f000 fa23 	bl	80041dc <_init>
 8003d96:	4c0a      	ldr	r4, [pc, #40]	@ (8003dc0 <__libc_init_array+0x40>)
 8003d98:	4d0a      	ldr	r5, [pc, #40]	@ (8003dc4 <__libc_init_array+0x44>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	00b3      	lsls	r3, r6, #2
 8003da6:	58eb      	ldr	r3, [r5, r3]
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	00b3      	lsls	r3, r6, #2
 8003db0:	58eb      	ldr	r3, [r5, r3]
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	08004284 	.word	0x08004284
 8003dbc:	08004284 	.word	0x08004284
 8003dc0:	08004288 	.word	0x08004288
 8003dc4:	08004284 	.word	0x08004284

08003dc8 <__retarget_lock_init_recursive>:
 8003dc8:	4770      	bx	lr

08003dca <__retarget_lock_acquire_recursive>:
 8003dca:	4770      	bx	lr

08003dcc <__retarget_lock_release_recursive>:
 8003dcc:	4770      	bx	lr
	...

08003dd0 <_free_r>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0005      	movs	r5, r0
 8003dd4:	1e0c      	subs	r4, r1, #0
 8003dd6:	d010      	beq.n	8003dfa <_free_r+0x2a>
 8003dd8:	3c04      	subs	r4, #4
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da00      	bge.n	8003de2 <_free_r+0x12>
 8003de0:	18e4      	adds	r4, r4, r3
 8003de2:	0028      	movs	r0, r5
 8003de4:	f000 f8ea 	bl	8003fbc <__malloc_lock>
 8003de8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <_free_r+0x90>)
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <_free_r+0x2c>
 8003df0:	6063      	str	r3, [r4, #4]
 8003df2:	6014      	str	r4, [r2, #0]
 8003df4:	0028      	movs	r0, r5
 8003df6:	f000 f8e9 	bl	8003fcc <__malloc_unlock>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	d908      	bls.n	8003e12 <_free_r+0x42>
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	1821      	adds	r1, r4, r0
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d1f3      	bne.n	8003df0 <_free_r+0x20>
 8003e08:	6819      	ldr	r1, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	1809      	adds	r1, r1, r0
 8003e0e:	6021      	str	r1, [r4, #0]
 8003e10:	e7ee      	b.n	8003df0 <_free_r+0x20>
 8003e12:	001a      	movs	r2, r3
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <_free_r+0x4e>
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	d9f9      	bls.n	8003e12 <_free_r+0x42>
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	1850      	adds	r0, r2, r1
 8003e22:	42a0      	cmp	r0, r4
 8003e24:	d10b      	bne.n	8003e3e <_free_r+0x6e>
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	1809      	adds	r1, r1, r0
 8003e2a:	1850      	adds	r0, r2, r1
 8003e2c:	6011      	str	r1, [r2, #0]
 8003e2e:	4283      	cmp	r3, r0
 8003e30:	d1e0      	bne.n	8003df4 <_free_r+0x24>
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	1841      	adds	r1, r0, r1
 8003e38:	6011      	str	r1, [r2, #0]
 8003e3a:	6053      	str	r3, [r2, #4]
 8003e3c:	e7da      	b.n	8003df4 <_free_r+0x24>
 8003e3e:	42a0      	cmp	r0, r4
 8003e40:	d902      	bls.n	8003e48 <_free_r+0x78>
 8003e42:	230c      	movs	r3, #12
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	e7d5      	b.n	8003df4 <_free_r+0x24>
 8003e48:	6820      	ldr	r0, [r4, #0]
 8003e4a:	1821      	adds	r1, r4, r0
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d103      	bne.n	8003e58 <_free_r+0x88>
 8003e50:	6819      	ldr	r1, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	1809      	adds	r1, r1, r0
 8003e56:	6021      	str	r1, [r4, #0]
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	6054      	str	r4, [r2, #4]
 8003e5c:	e7ca      	b.n	8003df4 <_free_r+0x24>
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	200003fc 	.word	0x200003fc

08003e64 <malloc>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <malloc+0x10>)
 8003e68:	0001      	movs	r1, r0
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	f000 f826 	bl	8003ebc <_malloc_r>
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	2000001c 	.word	0x2000001c

08003e78 <sbrk_aligned>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4e0f      	ldr	r6, [pc, #60]	@ (8003eb8 <sbrk_aligned+0x40>)
 8003e7c:	000d      	movs	r5, r1
 8003e7e:	6831      	ldr	r1, [r6, #0]
 8003e80:	0004      	movs	r4, r0
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d102      	bne.n	8003e8c <sbrk_aligned+0x14>
 8003e86:	f000 f997 	bl	80041b8 <_sbrk_r>
 8003e8a:	6030      	str	r0, [r6, #0]
 8003e8c:	0029      	movs	r1, r5
 8003e8e:	0020      	movs	r0, r4
 8003e90:	f000 f992 	bl	80041b8 <_sbrk_r>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d103      	bne.n	8003ea0 <sbrk_aligned+0x28>
 8003e98:	2501      	movs	r5, #1
 8003e9a:	426d      	negs	r5, r5
 8003e9c:	0028      	movs	r0, r5
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	1cc5      	adds	r5, r0, #3
 8003ea4:	439d      	bics	r5, r3
 8003ea6:	42a8      	cmp	r0, r5
 8003ea8:	d0f8      	beq.n	8003e9c <sbrk_aligned+0x24>
 8003eaa:	1a29      	subs	r1, r5, r0
 8003eac:	0020      	movs	r0, r4
 8003eae:	f000 f983 	bl	80041b8 <_sbrk_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d1f2      	bne.n	8003e9c <sbrk_aligned+0x24>
 8003eb6:	e7ef      	b.n	8003e98 <sbrk_aligned+0x20>
 8003eb8:	200003f8 	.word	0x200003f8

08003ebc <_malloc_r>:
 8003ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	1ccb      	adds	r3, r1, #3
 8003ec2:	4393      	bics	r3, r2
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	0005      	movs	r5, r0
 8003ec8:	001f      	movs	r7, r3
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d234      	bcs.n	8003f38 <_malloc_r+0x7c>
 8003ece:	270c      	movs	r7, #12
 8003ed0:	42b9      	cmp	r1, r7
 8003ed2:	d833      	bhi.n	8003f3c <_malloc_r+0x80>
 8003ed4:	0028      	movs	r0, r5
 8003ed6:	f000 f871 	bl	8003fbc <__malloc_lock>
 8003eda:	4e37      	ldr	r6, [pc, #220]	@ (8003fb8 <_malloc_r+0xfc>)
 8003edc:	6833      	ldr	r3, [r6, #0]
 8003ede:	001c      	movs	r4, r3
 8003ee0:	2c00      	cmp	r4, #0
 8003ee2:	d12f      	bne.n	8003f44 <_malloc_r+0x88>
 8003ee4:	0039      	movs	r1, r7
 8003ee6:	0028      	movs	r0, r5
 8003ee8:	f7ff ffc6 	bl	8003e78 <sbrk_aligned>
 8003eec:	0004      	movs	r4, r0
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d15f      	bne.n	8003fb2 <_malloc_r+0xf6>
 8003ef2:	6834      	ldr	r4, [r6, #0]
 8003ef4:	9400      	str	r4, [sp, #0]
 8003ef6:	9b00      	ldr	r3, [sp, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d14a      	bne.n	8003f92 <_malloc_r+0xd6>
 8003efc:	2c00      	cmp	r4, #0
 8003efe:	d052      	beq.n	8003fa6 <_malloc_r+0xea>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	0028      	movs	r0, r5
 8003f04:	18e3      	adds	r3, r4, r3
 8003f06:	9900      	ldr	r1, [sp, #0]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	f000 f955 	bl	80041b8 <_sbrk_r>
 8003f0e:	9b01      	ldr	r3, [sp, #4]
 8003f10:	4283      	cmp	r3, r0
 8003f12:	d148      	bne.n	8003fa6 <_malloc_r+0xea>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	0028      	movs	r0, r5
 8003f18:	1aff      	subs	r7, r7, r3
 8003f1a:	0039      	movs	r1, r7
 8003f1c:	f7ff ffac 	bl	8003e78 <sbrk_aligned>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d040      	beq.n	8003fa6 <_malloc_r+0xea>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	6833      	ldr	r3, [r6, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	d133      	bne.n	8003f9a <_malloc_r+0xde>
 8003f32:	9b00      	ldr	r3, [sp, #0]
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	e019      	b.n	8003f6c <_malloc_r+0xb0>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dac9      	bge.n	8003ed0 <_malloc_r+0x14>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	2000      	movs	r0, #0
 8003f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	1bc9      	subs	r1, r1, r7
 8003f48:	d420      	bmi.n	8003f8c <_malloc_r+0xd0>
 8003f4a:	290b      	cmp	r1, #11
 8003f4c:	d90a      	bls.n	8003f64 <_malloc_r+0xa8>
 8003f4e:	19e2      	adds	r2, r4, r7
 8003f50:	6027      	str	r7, [r4, #0]
 8003f52:	42a3      	cmp	r3, r4
 8003f54:	d104      	bne.n	8003f60 <_malloc_r+0xa4>
 8003f56:	6032      	str	r2, [r6, #0]
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	6011      	str	r1, [r2, #0]
 8003f5c:	6053      	str	r3, [r2, #4]
 8003f5e:	e005      	b.n	8003f6c <_malloc_r+0xb0>
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	e7f9      	b.n	8003f58 <_malloc_r+0x9c>
 8003f64:	6862      	ldr	r2, [r4, #4]
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	d10e      	bne.n	8003f88 <_malloc_r+0xcc>
 8003f6a:	6032      	str	r2, [r6, #0]
 8003f6c:	0028      	movs	r0, r5
 8003f6e:	f000 f82d 	bl	8003fcc <__malloc_unlock>
 8003f72:	0020      	movs	r0, r4
 8003f74:	2207      	movs	r2, #7
 8003f76:	300b      	adds	r0, #11
 8003f78:	1d23      	adds	r3, r4, #4
 8003f7a:	4390      	bics	r0, r2
 8003f7c:	1ac2      	subs	r2, r0, r3
 8003f7e:	4298      	cmp	r0, r3
 8003f80:	d0df      	beq.n	8003f42 <_malloc_r+0x86>
 8003f82:	1a1b      	subs	r3, r3, r0
 8003f84:	50a3      	str	r3, [r4, r2]
 8003f86:	e7dc      	b.n	8003f42 <_malloc_r+0x86>
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	e7ef      	b.n	8003f6c <_malloc_r+0xb0>
 8003f8c:	0023      	movs	r3, r4
 8003f8e:	6864      	ldr	r4, [r4, #4]
 8003f90:	e7a6      	b.n	8003ee0 <_malloc_r+0x24>
 8003f92:	9c00      	ldr	r4, [sp, #0]
 8003f94:	6863      	ldr	r3, [r4, #4]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	e7ad      	b.n	8003ef6 <_malloc_r+0x3a>
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	d1fb      	bne.n	8003f9a <_malloc_r+0xde>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e7da      	b.n	8003f5c <_malloc_r+0xa0>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	0028      	movs	r0, r5
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	f000 f80e 	bl	8003fcc <__malloc_unlock>
 8003fb0:	e7c6      	b.n	8003f40 <_malloc_r+0x84>
 8003fb2:	6007      	str	r7, [r0, #0]
 8003fb4:	e7da      	b.n	8003f6c <_malloc_r+0xb0>
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	200003fc 	.word	0x200003fc

08003fbc <__malloc_lock>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <__malloc_lock+0xc>)
 8003fc0:	f7ff ff03 	bl	8003dca <__retarget_lock_acquire_recursive>
 8003fc4:	bd10      	pop	{r4, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	200003f4 	.word	0x200003f4

08003fcc <__malloc_unlock>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	4802      	ldr	r0, [pc, #8]	@ (8003fd8 <__malloc_unlock+0xc>)
 8003fd0:	f7ff fefc 	bl	8003dcc <__retarget_lock_release_recursive>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	200003f4 	.word	0x200003f4

08003fdc <__sflush_r>:
 8003fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fde:	220c      	movs	r2, #12
 8003fe0:	5e8b      	ldrsh	r3, [r1, r2]
 8003fe2:	0005      	movs	r5, r0
 8003fe4:	000c      	movs	r4, r1
 8003fe6:	071a      	lsls	r2, r3, #28
 8003fe8:	d456      	bmi.n	8004098 <__sflush_r+0xbc>
 8003fea:	684a      	ldr	r2, [r1, #4]
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	dc02      	bgt.n	8003ff6 <__sflush_r+0x1a>
 8003ff0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	dd4e      	ble.n	8004094 <__sflush_r+0xb8>
 8003ff6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003ff8:	2f00      	cmp	r7, #0
 8003ffa:	d04b      	beq.n	8004094 <__sflush_r+0xb8>
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2080      	movs	r0, #128	@ 0x80
 8004000:	682e      	ldr	r6, [r5, #0]
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	001a      	movs	r2, r3
 8004006:	0140      	lsls	r0, r0, #5
 8004008:	6a21      	ldr	r1, [r4, #32]
 800400a:	4002      	ands	r2, r0
 800400c:	4203      	tst	r3, r0
 800400e:	d033      	beq.n	8004078 <__sflush_r+0x9c>
 8004010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	075b      	lsls	r3, r3, #29
 8004016:	d506      	bpl.n	8004026 <__sflush_r+0x4a>
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	1ad2      	subs	r2, r2, r3
 800401c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <__sflush_r+0x4a>
 8004022:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004024:	1ad2      	subs	r2, r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	0028      	movs	r0, r5
 800402a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800402c:	6a21      	ldr	r1, [r4, #32]
 800402e:	47b8      	blx	r7
 8004030:	89a2      	ldrh	r2, [r4, #12]
 8004032:	1c43      	adds	r3, r0, #1
 8004034:	d106      	bne.n	8004044 <__sflush_r+0x68>
 8004036:	6829      	ldr	r1, [r5, #0]
 8004038:	291d      	cmp	r1, #29
 800403a:	d846      	bhi.n	80040ca <__sflush_r+0xee>
 800403c:	4b29      	ldr	r3, [pc, #164]	@ (80040e4 <__sflush_r+0x108>)
 800403e:	40cb      	lsrs	r3, r1
 8004040:	07db      	lsls	r3, r3, #31
 8004042:	d542      	bpl.n	80040ca <__sflush_r+0xee>
 8004044:	2300      	movs	r3, #0
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	04d2      	lsls	r2, r2, #19
 800404e:	d505      	bpl.n	800405c <__sflush_r+0x80>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <__sflush_r+0x7e>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d100      	bne.n	800405c <__sflush_r+0x80>
 800405a:	6560      	str	r0, [r4, #84]	@ 0x54
 800405c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800405e:	602e      	str	r6, [r5, #0]
 8004060:	2900      	cmp	r1, #0
 8004062:	d017      	beq.n	8004094 <__sflush_r+0xb8>
 8004064:	0023      	movs	r3, r4
 8004066:	3344      	adds	r3, #68	@ 0x44
 8004068:	4299      	cmp	r1, r3
 800406a:	d002      	beq.n	8004072 <__sflush_r+0x96>
 800406c:	0028      	movs	r0, r5
 800406e:	f7ff feaf 	bl	8003dd0 <_free_r>
 8004072:	2300      	movs	r3, #0
 8004074:	6363      	str	r3, [r4, #52]	@ 0x34
 8004076:	e00d      	b.n	8004094 <__sflush_r+0xb8>
 8004078:	2301      	movs	r3, #1
 800407a:	0028      	movs	r0, r5
 800407c:	47b8      	blx	r7
 800407e:	0002      	movs	r2, r0
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d1c6      	bne.n	8004012 <__sflush_r+0x36>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0c3      	beq.n	8004012 <__sflush_r+0x36>
 800408a:	2b1d      	cmp	r3, #29
 800408c:	d001      	beq.n	8004092 <__sflush_r+0xb6>
 800408e:	2b16      	cmp	r3, #22
 8004090:	d11a      	bne.n	80040c8 <__sflush_r+0xec>
 8004092:	602e      	str	r6, [r5, #0]
 8004094:	2000      	movs	r0, #0
 8004096:	e01e      	b.n	80040d6 <__sflush_r+0xfa>
 8004098:	690e      	ldr	r6, [r1, #16]
 800409a:	2e00      	cmp	r6, #0
 800409c:	d0fa      	beq.n	8004094 <__sflush_r+0xb8>
 800409e:	680f      	ldr	r7, [r1, #0]
 80040a0:	600e      	str	r6, [r1, #0]
 80040a2:	1bba      	subs	r2, r7, r6
 80040a4:	9201      	str	r2, [sp, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d100      	bne.n	80040ae <__sflush_r+0xd2>
 80040ac:	694a      	ldr	r2, [r1, #20]
 80040ae:	60a2      	str	r2, [r4, #8]
 80040b0:	9b01      	ldr	r3, [sp, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	ddee      	ble.n	8004094 <__sflush_r+0xb8>
 80040b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80040b8:	0032      	movs	r2, r6
 80040ba:	001f      	movs	r7, r3
 80040bc:	0028      	movs	r0, r5
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	6a21      	ldr	r1, [r4, #32]
 80040c2:	47b8      	blx	r7
 80040c4:	2800      	cmp	r0, #0
 80040c6:	dc07      	bgt.n	80040d8 <__sflush_r+0xfc>
 80040c8:	89a2      	ldrh	r2, [r4, #12]
 80040ca:	2340      	movs	r3, #64	@ 0x40
 80040cc:	2001      	movs	r0, #1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b21b      	sxth	r3, r3
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	4240      	negs	r0, r0
 80040d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040d8:	9b01      	ldr	r3, [sp, #4]
 80040da:	1836      	adds	r6, r6, r0
 80040dc:	1a1b      	subs	r3, r3, r0
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	e7e6      	b.n	80040b0 <__sflush_r+0xd4>
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	20400001 	.word	0x20400001

080040e8 <_fflush_r>:
 80040e8:	690b      	ldr	r3, [r1, #16]
 80040ea:	b570      	push	{r4, r5, r6, lr}
 80040ec:	0005      	movs	r5, r0
 80040ee:	000c      	movs	r4, r1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <_fflush_r+0x12>
 80040f4:	2500      	movs	r5, #0
 80040f6:	0028      	movs	r0, r5
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d004      	beq.n	8004108 <_fflush_r+0x20>
 80040fe:	6a03      	ldr	r3, [r0, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <_fflush_r+0x20>
 8004104:	f7ff fcaa 	bl	8003a5c <__sinit>
 8004108:	220c      	movs	r2, #12
 800410a:	5ea3      	ldrsh	r3, [r4, r2]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f1      	beq.n	80040f4 <_fflush_r+0xc>
 8004110:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004112:	07d2      	lsls	r2, r2, #31
 8004114:	d404      	bmi.n	8004120 <_fflush_r+0x38>
 8004116:	059b      	lsls	r3, r3, #22
 8004118:	d402      	bmi.n	8004120 <_fflush_r+0x38>
 800411a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800411c:	f7ff fe55 	bl	8003dca <__retarget_lock_acquire_recursive>
 8004120:	0028      	movs	r0, r5
 8004122:	0021      	movs	r1, r4
 8004124:	f7ff ff5a 	bl	8003fdc <__sflush_r>
 8004128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800412a:	0005      	movs	r5, r0
 800412c:	07db      	lsls	r3, r3, #31
 800412e:	d4e2      	bmi.n	80040f6 <_fflush_r+0xe>
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	059b      	lsls	r3, r3, #22
 8004134:	d4df      	bmi.n	80040f6 <_fflush_r+0xe>
 8004136:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004138:	f7ff fe48 	bl	8003dcc <__retarget_lock_release_recursive>
 800413c:	e7db      	b.n	80040f6 <_fflush_r+0xe>
	...

08004140 <__swhatbuf_r>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	000e      	movs	r6, r1
 8004144:	001d      	movs	r5, r3
 8004146:	230e      	movs	r3, #14
 8004148:	5ec9      	ldrsh	r1, [r1, r3]
 800414a:	0014      	movs	r4, r2
 800414c:	b096      	sub	sp, #88	@ 0x58
 800414e:	2900      	cmp	r1, #0
 8004150:	da0c      	bge.n	800416c <__swhatbuf_r+0x2c>
 8004152:	89b2      	ldrh	r2, [r6, #12]
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	0011      	movs	r1, r2
 8004158:	4019      	ands	r1, r3
 800415a:	421a      	tst	r2, r3
 800415c:	d114      	bne.n	8004188 <__swhatbuf_r+0x48>
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	2000      	movs	r0, #0
 8004164:	6029      	str	r1, [r5, #0]
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	b016      	add	sp, #88	@ 0x58
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	466a      	mov	r2, sp
 800416e:	f000 f811 	bl	8004194 <_fstat_r>
 8004172:	2800      	cmp	r0, #0
 8004174:	dbed      	blt.n	8004152 <__swhatbuf_r+0x12>
 8004176:	23f0      	movs	r3, #240	@ 0xf0
 8004178:	9901      	ldr	r1, [sp, #4]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	4019      	ands	r1, r3
 800417e:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <__swhatbuf_r+0x50>)
 8004180:	18c9      	adds	r1, r1, r3
 8004182:	424b      	negs	r3, r1
 8004184:	4159      	adcs	r1, r3
 8004186:	e7ea      	b.n	800415e <__swhatbuf_r+0x1e>
 8004188:	2100      	movs	r1, #0
 800418a:	2340      	movs	r3, #64	@ 0x40
 800418c:	e7e9      	b.n	8004162 <__swhatbuf_r+0x22>
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	ffffe000 	.word	0xffffe000

08004194 <_fstat_r>:
 8004194:	2300      	movs	r3, #0
 8004196:	b570      	push	{r4, r5, r6, lr}
 8004198:	4d06      	ldr	r5, [pc, #24]	@ (80041b4 <_fstat_r+0x20>)
 800419a:	0004      	movs	r4, r0
 800419c:	0008      	movs	r0, r1
 800419e:	0011      	movs	r1, r2
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	f7fd ff6f 	bl	8002084 <_fstat>
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	d103      	bne.n	80041b2 <_fstat_r+0x1e>
 80041aa:	682b      	ldr	r3, [r5, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d000      	beq.n	80041b2 <_fstat_r+0x1e>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	200003f0 	.word	0x200003f0

080041b8 <_sbrk_r>:
 80041b8:	2300      	movs	r3, #0
 80041ba:	b570      	push	{r4, r5, r6, lr}
 80041bc:	4d06      	ldr	r5, [pc, #24]	@ (80041d8 <_sbrk_r+0x20>)
 80041be:	0004      	movs	r4, r0
 80041c0:	0008      	movs	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fe f898 	bl	80022f8 <_sbrk>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d103      	bne.n	80041d4 <_sbrk_r+0x1c>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d000      	beq.n	80041d4 <_sbrk_r+0x1c>
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	200003f0 	.word	0x200003f0

080041dc <_init>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr

080041e8 <_fini>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr
